/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  backupFights: () => (/* binding */ backupFights),
  badJuju: () => (/* binding */ badJuju),
  deepDarkVisions: () => (/* binding */ deepDarkVisions),
  deepMachineFights: () => (/* binding */ deepMachineFights),
  famwtTest: () => (/* binding */ famwtTest),
  finale: () => (/* binding */ finale),
  freekillBonanza: () => (/* binding */ freekillBonanza),
  freekillConsult: () => (/* binding */ freekillConsult),
  hotresTest: () => (/* binding */ hotresTest),
  hpTest: () => (/* binding */ hpTest),
  itemTest: () => (/* binding */ itemTest),
  kramMode: () => (/* binding */ kramMode),
  levellingPrep: () => (/* binding */ levellingPrep),
  levellingSlime: () => (/* binding */ levellingSlime),
  main: () => (/* binding */ mustard_service_main),
  motherSlime: () => (/* binding */ motherSlime),
  moxTest: () => (/* binding */ moxTest),
  mpRestore: () => (/* binding */ mpRestore),
  musTest: () => (/* binding */ musTest),
  mysTest: () => (/* binding */ mysTest),
  neverendingFreefights: () => (/* binding */ neverendingFreefights),
  nextLevelling: () => (/* binding */ nextLevelling),
  nextTest: () => (/* binding */ nextTest),
  noncomTest: () => (/* binding */ noncomTest),
  oliverFights: () => (/* binding */ oliverFights),
  payphoneFights: () => (/* binding */ payphoneFights),
  pilsners: () => (/* binding */ pilsners),
  preRun: () => (/* binding */ preRun),
  preVenture: () => (/* binding */ preVenture),
  reEnter: () => (/* binding */ reEnter),
  riftConsult: () => (/* binding */ riftConsult),
  sdmgTest: () => (/* binding */ sdmgTest),
  sealFights: () => (/* binding */ sealFights),
  setup: () => (/* binding */ setup),
  skeletons: () => (/* binding */ skeletons),
  snojoFights: () => (/* binding */ snojoFights),
  sombreroSwap: () => (/* binding */ sombreroSwap),
  wdmgTest: () => (/* binding */ wdmgTest),
  witchessFights: () => (/* binding */ witchessFights)
});

;// CONCATENATED MODULE: external "kolmafia"
const external_kolmafia_namespaceObject = require("kolmafia");
;// CONCATENATED MODULE: ./node_modules/libram/dist/propertyTypes.js
/** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseDefaultProperties.ts for more information */
var booleanProperties = ["abortOnChoiceWhenNotInChoice", "addChatCommandLine", "addCreationQueue", "addStatusBarToFrames", "allowCloseableDesktopTabs", "allowNegativeTally", "allowNonMoodBurning", "allowSummonBurning", "autoHighlightOnFocus", "broadcastEvents", "cacheMallSearches", "chatBeep", "chatLinksUseRelay", "compactChessboard", "copyAsHTML", "customizedTabs", "debugBuy", "debugConsequences", "debugFoxtrotRemoval", "debugPathnames", "gapProtection", "gitInstallDependencies", "gitShowCommitMessages", "gitUpdateOnLogin", "greenScreenProtection", "guiUsesOneWindow", "hideServerDebugText", "logAcquiredItems", "logBattleAction", "logBrowserInteractions", "logChatMessages", "logChatRequests", "logCleanedHTML", "logDecoratedResponses", "logFamiliarActions", "logGainMessages", "logReadableHTML", "logPreferenceChange", "logMonsterHealth", "logReverseOrder", "logStatGains", "logStatusEffects", "logStatusOnLogin", "macroDebug", "macroLens", "mementoListActive", "mergeHobopolisChat", "printStackOnAbort", "proxySet", "relayAddSounds", "relayAddsCustomCombat", "relayAddsDiscoHelper", "relayAddsGraphicalCLI", "relayAddsQuickScripts", "relayAddsRestoreLinks", "relayAddsUpArrowLinks", "relayAddsUseLinks", "relayAddsWikiLinks", "relayAllowRemoteAccess", "relayBrowserOnly", "relayCacheUncacheable", "relayFormatsChatText", "relayHidesJunkMallItems", "relayMaintainsEffects", "relayMaintainsHealth", "relayMaintainsMana", "relayOverridesImages", "relayRunsAfterAdventureScript", "relayRunsBeforeBattleScript", "relayRunsBeforePVPScript", "relayScriptButtonFirst", "relayTextualizesEffects", "relayTrimsZapList", "relayUsesInlineLinks", "relayUsesIntegratedChat", "relayWarnOnRecoverFailure", "removeMalignantEffects", "saveSettingsOnSet", "sharePriceData", "showAllRequests", "showExceptionalRequests", "stealthLogin", "svnInstallDependencies", "svnShowCommitMessages", "svnUpdateOnLogin", "switchEquipmentForBuffs", "syncAfterSvnUpdate", "useChatToolbar", "useContactsFrame", "useDevProxyServer", "useDockIconBadge", "useHugglerChannel", "useImageCache", "useLastUserAgent", "useSystemTrayIcon", "useTabbedChatFrame", "useToolbars", "useCachedVolcanoMaps", "useZoneComboBox", "verboseSpeakeasy", "verboseFloundry", "wrapLongLines", "_gitUpdated", "_svnRepoFileFetched", "_svnUpdated", "antagonisticSnowmanKitAvailable", "arcadeGameHints", "armoryUnlocked", "autoForbidIgnoringStores", "autoCraft", "autoQuest", "autoEntangle", "autoGarish", "autoManaRestore", "autoFillMayoMinder", "autoPinkyRing", "autoPlantHardcore", "autoPlantSoftcore", "autoPotionID", "autoRepairBoxServants", "autoSatisfyWithCloset", "autoSatisfyWithCoinmasters", "autoSatisfyWithMall", "autoSatisfyWithNPCs", "autoSatisfyWithStash", "autoSatisfyWithStorage", "autoSetConditions", "autoSteal", "autoTuxedo", "backupCameraReverserEnabled", "badMoonEncounter01", "badMoonEncounter02", "badMoonEncounter03", "badMoonEncounter04", "badMoonEncounter05", "badMoonEncounter06", "badMoonEncounter07", "badMoonEncounter08", "badMoonEncounter09", "badMoonEncounter10", "badMoonEncounter11", "badMoonEncounter12", "badMoonEncounter13", "badMoonEncounter14", "badMoonEncounter15", "badMoonEncounter16", "badMoonEncounter17", "badMoonEncounter18", "badMoonEncounter19", "badMoonEncounter20", "badMoonEncounter21", "badMoonEncounter22", "badMoonEncounter23", "badMoonEncounter24", "badMoonEncounter25", "badMoonEncounter26", "badMoonEncounter27", "badMoonEncounter28", "badMoonEncounter29", "badMoonEncounter30", "badMoonEncounter31", "badMoonEncounter32", "badMoonEncounter33", "badMoonEncounter34", "badMoonEncounter35", "badMoonEncounter36", "badMoonEncounter37", "badMoonEncounter38", "badMoonEncounter39", "badMoonEncounter40", "badMoonEncounter41", "badMoonEncounter42", "badMoonEncounter43", "badMoonEncounter44", "badMoonEncounter45", "badMoonEncounter46", "badMoonEncounter47", "badMoonEncounter48", "barrelShrineUnlocked", "bigBrotherRescued", "blackBartsBootyAvailable", "bondAdv", "bondBeach", "bondBeat", "bondBooze", "bondBridge", "bondDesert", "bondDR", "bondDrunk1", "bondDrunk2", "bondHoney", "bondHP", "bondInit", "bondItem1", "bondItem2", "bondItem3", "bondJetpack", "bondMartiniDelivery", "bondMartiniPlus", "bondMartiniTurn", "bondMeat", "bondMox1", "bondMox2", "bondMPregen", "bondMus1", "bondMus2", "bondMys1", "bondMys2", "bondSpleen", "bondStat", "bondStat2", "bondStealth", "bondStealth2", "bondSymbols", "bondWar", "bondWeapon2", "bondWpn", "booPeakLit", "bootsCharged", "breakfastCompleted", "burrowgrubHiveUsed", "calzoneOfLegendEaten", "canteenUnlocked", "chaosButterflyThrown", "chatbotScriptExecuted", "chateauAvailable", "chatLiterate", "chatServesUpdates", "checkJackassHardcore", "checkJackassSoftcore", "clanAttacksEnabled", "coldAirportAlways", "considerShadowNoodles", "controlRoomUnlock", "concertVisited", "controlPanel1", "controlPanel2", "controlPanel3", "controlPanel4", "controlPanel5", "controlPanel6", "controlPanel7", "controlPanel8", "controlPanel9", "corralUnlocked", "dailyDungeonDone", "dampOldBootPurchased", "daycareOpen", "deepDishOfLegendEaten", "demonSummoned", "dinseyAudienceEngagement", "dinseyGarbagePirate", "dinseyRapidPassEnabled", "dinseyRollercoasterNext", "dinseySafetyProtocolsLoose", "doghouseBoarded", "dontStopForCounters", "drippingHallUnlocked", "drippyShieldUnlocked", "edUsedLash", "eldritchFissureAvailable", "eldritchHorrorAvailable", "essenceOfAnnoyanceAvailable", "essenceOfBearAvailable", "expressCardUsed", "falloutShelterChronoUsed", "falloutShelterCoolingTankUsed", "fireExtinguisherBatHoleUsed", "fireExtinguisherChasmUsed", "fireExtinguisherCyrptUsed", "fireExtinguisherDesertUsed", "fireExtinguisherHaremUsed", "fistTeachingsHaikuDungeon", "fistTeachingsPokerRoom", "fistTeachingsBarroomBrawl", "fistTeachingsConservatory", "fistTeachingsBatHole", "fistTeachingsFunHouse", "fistTeachingsMenagerie", "fistTeachingsSlums", "fistTeachingsFratHouse", "fistTeachingsRoad", "fistTeachingsNinjaSnowmen", "flickeringPixel1", "flickeringPixel2", "flickeringPixel3", "flickeringPixel4", "flickeringPixel5", "flickeringPixel6", "flickeringPixel7", "flickeringPixel8", "frAlways", "frCemetaryUnlocked", "friarsBlessingReceived", "frMountainsUnlocked", "frSwampUnlocked", "frVillageUnlocked", "frWoodUnlocked", "getawayCampsiteUnlocked", "ghostPencil1", "ghostPencil2", "ghostPencil3", "ghostPencil4", "ghostPencil5", "ghostPencil6", "ghostPencil7", "ghostPencil8", "ghostPencil9", "gingerAdvanceClockUnlocked", "gingerBlackmailAccomplished", "gingerbreadCityAvailable", "gingerExtraAdventures", "gingerNegativesDropped", "gingerSewersUnlocked", "gingerSubwayLineUnlocked", "gingerRetailUnlocked", "glitchItemAvailable", "grabCloversHardcore", "grabCloversSoftcore", "guideToSafariAvailable", "guyMadeOfBeesDefeated", "hallowienerDefiledNook", "hallowienerGuanoJunction", "hallowienerKnollGym", "hallowienerMadnessBakery", "hallowienerMiddleChamber", "hallowienerOvergrownLot", "hallowienerSkeletonStore", "hallowienerSmutOrcs", "hallowienerSonofaBeach", "hallowienerVolcoino", "hardcorePVPWarning", "harvestBatteriesHardcore", "harvestBatteriesSoftcore", "hasAutumnaton", "hasBartender", "hasChef", "hasCocktailKit", "hasCosmicBowlingBall", "hasDetectiveSchool", "hasMaydayContract", "hasOven", "hasRange", "hasShaker", "hasSushiMat", "haveBoxingDaydreamHardcore", "haveBoxingDaydreamSoftcore", "hermitHax0red", "holidayHalsBookAvailable", "horseryAvailable", "hotAirportAlways", "implementGlitchItem", "intenseCurrents", "itemBoughtPerAscension637", "itemBoughtPerAscension8266", "itemBoughtPerAscension10790", "itemBoughtPerAscension10794", "itemBoughtPerAscension10795", "itemBoughtPerCharacter6423", "itemBoughtPerCharacter6428", "itemBoughtPerCharacter6429", "kingLiberated", "lastPirateInsult1", "lastPirateInsult2", "lastPirateInsult3", "lastPirateInsult4", "lastPirateInsult5", "lastPirateInsult6", "lastPirateInsult7", "lastPirateInsult8", "lawOfAveragesAvailable", "leafletCompleted", "libraryCardUsed", "lockPicked", "logBastilleBattalionBattles", "loginRecoveryHardcore", "loginRecoverySoftcore", "lovebugsUnlocked", "loveTunnelAvailable", "lowerChamberUnlock", "madnessBakeryAvailable", "makePocketWishesHardcore", "makePocketWishesSoftcore", "manualOfNumberologyAvailable", "mappingMonsters", "mapToAnemoneMinePurchased", "mapToKokomoAvailable", "mapToMadnessReefPurchased", "mapToTheDiveBarPurchased", "mapToTheMarinaraTrenchPurchased", "mapToTheSkateParkPurchased", "maraisBeaverUnlock", "maraisCorpseUnlock", "maraisDarkUnlock", "maraisVillageUnlock", "maraisWildlifeUnlock", "maraisWizardUnlock", "maximizerAlwaysCurrent", "maximizerCreateOnHand", "maximizerCurrentMallPrices", "maximizerFoldables", "maximizerIncludeAll", "maximizerNoAdventures", "middleChamberUnlock", "milkOfMagnesiumActive", "moonTuned", "neverendingPartyAlways", "noncombatForcerActive", "oasisAvailable", "odeBuffbotCheck", "oilPeakLit", "oscusSodaUsed", "outrageousSombreroUsed", "overgrownLotAvailable", "ownsSpeakeasy", "pathedSummonsHardcore", "pathedSummonsSoftcore", "pizzaOfLegendEaten", "popularTartUnlocked", "potatoAlarmClockUsed", "prAlways", "prayedForGlamour", "prayedForProtection", "prayedForVigor", "primaryLabCheerCoreGrabbed", "pyramidBombUsed", "replicaChateauAvailable", "replicaNeverendingPartyAlways", "replicaWitchessSetAvailable", "ROMOfOptimalityAvailable", "rageGlandVented", "readManualHardcore", "readManualSoftcore", "relayShowSpoilers", "relayShowWarnings", "rememberDesktopSize", "restUsingChateau", "restUsingCampAwayTent", "requireBoxServants", "requireSewerTestItems", "safePickpocket", "schoolOfHardKnocksDiplomaAvailable", "scriptCascadingMenus", "serverAddsCustomCombat", "SHAWARMAInitiativeUnlocked", "showForbiddenStores", "showGainsPerUnit", "showIgnoringStorePrices", "showNoSummonOnly", "showTurnFreeOnly", "skeletonStoreAvailable", "sleazeAirportAlways", "snojoAvailable", "sortByEffect", "sortByRoom", "spacegateAlways", "spacegateVaccine1", "spacegateVaccine2", "spacegateVaccine3", "spaceInvaderDefeated", "spelunkyHints", "spiceMelangeUsed", "spookyAirportAlways", "stenchAirportAlways", "stopForFixedWanderer", "stopForUltraRare", "styxPixieVisited", "superconductorDefeated", "suppressInappropriateNags", "suppressPowerPixellation", "suppressMallPriceCacheMessages", "telegraphOfficeAvailable", "telescopeLookedHigh", "timeTowerAvailable", "trackLightsOut", "uneffectWithHotTub", "universalSeasoningActive", "universalSeasoningAvailable", "useBookOfEverySkillHardcore", "useBookOfEverySkillSoftcore", "useCrimboToysHardcore", "useCrimboToysSoftcore", "verboseMaximizer", "visitLoungeHardcore", "visitLoungeSoftcore", "visitRumpusHardcore", "visitRumpusSoftcore", "voteAlways", "wildfireBarrelCaulked", "wildfireDusted", "wildfireFracked", "wildfirePumpGreased", "wildfireSprinkled", "yearbookCameraPending", "youRobotScavenged", "_affirmationCookieEaten", "_affirmationHateUsed", "_airFryerUsed", "_akgyxothUsed", "_alienAnimalMilkUsed", "_alienPlantPodUsed", "_allYearSucker", "_aprilShower", "_armyToddlerCast", "_authorsInkUsed", "_baconMachineUsed", "_bagOfCandy", "_bagOfCandyUsed", "_bagOTricksUsed", "_ballastTurtleUsed", "_ballInACupUsed", "_ballpit", "_barrelPrayer", "_bastilleLastBattleWon", "_beachCombing", "_bendHellUsed", "_blankoutUsed", "_bonersSummoned", "_bookOfEverySkillUsed", "_borrowedTimeUsed", "_bowleggedSwaggerUsed", "_bowlFullOfJellyUsed", "_boxOfHammersUsed", "_brainPreservationFluidUsed", "_brassDreadFlaskUsed", "_cameraUsed", "_canSeekBirds", "_carboLoaded", "_cargoPocketEmptied", "_ceciHatUsed", "_chateauDeskHarvested", "_chateauMonsterFought", "_chibiChanged", "_chronerCrossUsed", "_chronerTriggerUsed", "_chubbyAndPlumpUsed", "_circleDrumUsed", "_clanFortuneBuffUsed", "_claraBellUsed", "_coalPaperweightUsed", "_cocoaDispenserUsed", "_cocktailShakerUsed", "_coldAirportToday", "_coldOne", "_communismUsed", "_confusingLEDClockUsed", "_controlPanelUsed", "_cookbookbatRecipeDrops", "_corruptedStardustUsed", "_cosmicSixPackConjured", "_crappyCameraUsed", "_creepyVoodooDollUsed", "_crimboTraining", "_crimboTree", "_cursedKegUsed", "_cursedMicrowaveUsed", "_dailyDungeonMalwareUsed", "_darkChocolateHeart", "_daycareFights", "_daycareNap", "_daycareSpa", "_daycareToday", "_defectiveTokenChecked", "_defectiveTokenUsed", "_dinseyGarbageDisposed", "_discoKnife", "_distentionPillUsed", "_dnaHybrid", "_docClocksThymeCocktailDrunk", "_drippingHallDoor1", "_drippingHallDoor2", "_drippingHallDoor3", "_drippingHallDoor4", "_drippyCaviarUsed", "_drippyNuggetUsed", "_drippyPilsnerUsed", "_drippyPlumUsed", "_drippyWineUsed", "_eldritchHorrorEvoked", "_eldritchTentacleFought", "_entauntaunedToday", "_envyfishEggUsed", "_essentialTofuUsed", "_etchedHourglassUsed", "_eternalCarBatteryUsed", "_everfullGlassUsed", "_eyeAndATwistUsed", "_fancyChessSetUsed", "_falloutShelterSpaUsed", "_fancyHotDogEaten", "_farmerItemsCollected", "_favoriteBirdVisited", "_firedJokestersGun", "_fireExtinguisherRefilled", "_fireStartingKitUsed", "_fireworksShop", "_fireworksShopHatBought", "_fireworksShopEquipmentBought", "_fireworkUsed", "_fishyPipeUsed", "_floundryItemCreated", "_floundryItemUsed", "_freePillKeeperUsed", "_frToday", "_fudgeSporkUsed", "_garbageItemChanged", "_gingerBiggerAlligators", "_gingerbreadCityToday", "_gingerbreadClockAdvanced", "_gingerbreadClockVisited", "_gingerbreadColumnDestroyed", "_gingerbreadMobHitUsed", "_glennGoldenDiceUsed", "_glitchItemImplemented", "_gnollEyeUsed", "_governmentPerDiemUsed", "_grimBuff", "_guildManualUsed", "_guzzlrQuestAbandoned", "_hardKnocksDiplomaUsed", "_hippyMeatCollected", "_hobbyHorseUsed", "_holidayFunUsed", "_holoWristCrystal", "_hotAirportToday", "_hungerSauceUsed", "_hyperinflatedSealLungUsed", "_iceHotelRoomsRaided", "_iceSculptureUsed", "_incredibleSelfEsteemCast", "_infernoDiscoVisited", "_internetDailyDungeonMalwareBought", "_internetGallonOfMilkBought", "_internetPlusOneBought", "_internetPrintScreenButtonBought", "_internetViralVideoBought", "_interviewIsabella", "_interviewMasquerade", "_interviewVlad", "_inquisitorsUnidentifiableObjectUsed", "_ironicMoustache", "_jackassPlumberGame", "_jarlsCheeseSummoned", "_jarlsCreamSummoned", "_jarlsDoughSummoned", "_jarlsEggsSummoned", "_jarlsFruitSummoned", "_jarlsMeatSummoned", "_jarlsPotatoSummoned", "_jarlsVeggiesSummoned", "_jingleBellUsed", "_jukebox", "_kgbFlywheelCharged", "_kgbLeftDrawerUsed", "_kgbOpened", "_kgbRightDrawerUsed", "_kolConSixPackUsed", "_kolhsCutButNotDried", "_kolhsIsskayLikeAnAshtray", "_kolhsPoeticallyLicenced", "_kolhsSchoolSpirited", "_kudzuSaladEaten", "_lastCombatWon", "_latteBanishUsed", "_latteCopyUsed", "_latteDrinkUsed", "_legendaryBeat", "_licenseToChillUsed", "_lodestoneUsed", "_lookingGlass", "_loveTunnelToday", "_loveTunnelUsed", "_luckyGoldRingVolcoino", "_lunchBreak", "_lupineHormonesUsed", "_lyleFavored", "_madLiquorDrunk", "_madTeaParty", "_mafiaMiddleFingerRingUsed", "_managerialManipulationUsed", "_mansquitoSerumUsed", "_maydayDropped", "_mayoDeviceRented", "_mayoTankSoaked", "_meatballMachineUsed", "_meatifyMatterUsed", "_milkOfMagnesiumUsed", "_mimeArmyShotglassUsed", "_missGravesVermouthDrunk", "_missileLauncherUsed", "_molehillMountainUsed", "_momFoodReceived", "_mrBurnsgerEaten", "_muffinOrderedToday", "_mushroomGardenVisited", "_neverendingPartyToday", "_newYouQuestCompleted", "_olympicSwimmingPool", "_olympicSwimmingPoolItemFound", "_overflowingGiftBasketUsed", "_partyHard", "_pastaAdditive", "_perfectFreezeUsed", "_perfectlyFairCoinUsed", "_petePartyThrown", "_peteRiotIncited", "_photocopyUsed", "_pickyTweezersUsed", "_pingPongGame", "_pirateBellowUsed", "_pirateForkUsed", "_pixelOrbUsed", "_plumbersMushroomStewEaten", "_pneumaticityPotionUsed", "_portableSteamUnitUsed", "_pottedTeaTreeUsed", "_prToday", "_psychoJarFilled", "_psychoJarUsed", "_psychokineticHugUsed", "_rainStickUsed", "_redwoodRainStickUsed", "_replicaSnowconeTomeUsed", "_replicaResolutionLibramUsed", "_replicaSmithsTomeUsed", "_requestSandwichSucceeded", "_rhinestonesAcquired", "_seaJellyHarvested", "_setOfJacksUsed", "_sewingKitUsed", "_sexChanged", "_shadowAffinityToday", "_shadowForestLooted", "_shrubDecorated", "_silverDreadFlaskUsed", "_sitCourseCompleted", "_skateBuff1", "_skateBuff2", "_skateBuff3", "_skateBuff4", "_skateBuff5", "_sleazeAirportToday", "_sobrieTeaUsed", "_softwareGlitchTurnReceived", "_spacegateMurderbot", "_spacegateRuins", "_spacegateSpant", "_spacegateToday", "_spacegateVaccine", "_spaghettiBreakfast", "_spaghettiBreakfastEaten", "_spinmasterLatheVisited", "_spinningWheel", "_spookyAirportToday", "_stabonicScrollUsed", "_steelyEyedSquintUsed", "_stenchAirportToday", "_stinkyCheeseBanisherUsed", "_strangeStalagmiteUsed", "_streamsCrossed", "_stuffedPocketwatchUsed", "_styxSprayUsed", "_summonAnnoyanceUsed", "_summonCarrotUsed", "_summonResortPassUsed", "_sweetToothUsed", "_syntheticDogHairPillUsed", "_tacoFlierUsed", "_telegraphOfficeToday", "_templeHiddenPower", "_tempuraAirUsed", "_thesisDelivered", "_timeSpinnerReplicatorUsed", "_toastSummoned", "_tonicDjinn", "_treasuryEliteMeatCollected", "_treasuryHaremMeatCollected", "_trivialAvocationsGame", "_tryptophanDartUsed", "_turtlePowerCast", "_twelveNightEnergyUsed", "_ultraMegaSourBallUsed", "_victorSpoilsUsed", "_villainLairCanLidUsed", "_villainLairColorChoiceUsed", "_villainLairDoorChoiceUsed", "_villainLairFirecrackerUsed", "_villainLairSymbologyChoiceUsed", "_villainLairWebUsed", "_vmaskBanisherUsed", "_voraciTeaUsed", "_volcanoItemRedeemed", "_volcanoSuperduperheatedMetal", "_voteToday", "_VYKEACafeteriaRaided", "_VYKEALoungeRaided", "_walfordQuestStartedToday", "_warbearBankUsed", "_warbearBreakfastMachineUsed", "_warbearGyrocopterUsed", "_warbearSodaMachineUsed", "_wildfireBarrelHarvested", "_witchessBuff", "_workshedItemUsed", "_zombieClover", "_preventScurvy", "lockedItem4637", "lockedItem4638", "lockedItem4639", "lockedItem4646", "lockedItem4647", "unknownRecipe3542", "unknownRecipe3543", "unknownRecipe3544", "unknownRecipe3545", "unknownRecipe3546", "unknownRecipe3547", "unknownRecipe3548", "unknownRecipe3749", "unknownRecipe3751", "unknownRecipe4172", "unknownRecipe4173", "unknownRecipe4174", "unknownRecipe5060", "unknownRecipe5061", "unknownRecipe5062", "unknownRecipe5063", "unknownRecipe5064", "unknownRecipe5066", "unknownRecipe5067", "unknownRecipe5069", "unknownRecipe5070", "unknownRecipe5072", "unknownRecipe5073", "unknownRecipe5670", "unknownRecipe5671", "unknownRecipe6501", "unknownRecipe6564", "unknownRecipe6565", "unknownRecipe6566", "unknownRecipe6567", "unknownRecipe6568", "unknownRecipe6569", "unknownRecipe6570", "unknownRecipe6571", "unknownRecipe6572", "unknownRecipe6573", "unknownRecipe6574", "unknownRecipe6575", "unknownRecipe6576", "unknownRecipe6577", "unknownRecipe6578", "unknownRecipe7752", "unknownRecipe7753", "unknownRecipe7754", "unknownRecipe7755", "unknownRecipe7756", "unknownRecipe7757", "unknownRecipe7758", "unknownRecipe10970", "unknownRecipe10971", "unknownRecipe10972", "unknownRecipe10973", "unknownRecipe10974", "unknownRecipe10975", "unknownRecipe10976", "unknownRecipe10977", "unknownRecipe10978", "unknownRecipe10988", "unknownRecipe10989", "unknownRecipe10990", "unknownRecipe10991", "unknownRecipe10992", "unknownRecipe11000"];
var numericProperties = ["coinMasterIndex", "dailyDeedsVersion", "defaultDropdown1", "defaultDropdown2", "defaultDropdownSplit", "defaultLimit", "fixedThreadPoolSize", "itemManagerIndex", "lastBuffRequestType", "lastGlobalCounterDay", "lastImageCacheClear", "previousUpdateRevision", "relayDelayForSVN", "relaySkillButtonCount", "scriptButtonPosition", "statusDropdown", "svnThreadPoolSize", "toolbarPosition", "_g9Effect", "8BitBonusTurns", "8BitScore", "addingScrolls", "affirmationCookiesEaten", "aminoAcidsUsed", "antagonisticSnowmanKitCost", "ascensionsToday", "asolDeferredPoints", "asolPointsPigSkinner", "asolPointsCheeseWizard", "asolPointsJazzAgent", "autoAbortThreshold", "autoAntidote", "autoBuyPriceLimit", "autumnatonQuestTurn", "availableCandyCredits", "availableDimes", "availableFunPoints", "availableQuarters", "availableStoreCredits", "availableSwagger", "averageSwagger", "awolMedicine", "awolPointsBeanslinger", "awolPointsCowpuncher", "awolPointsSnakeoiler", "awolDeferredPointsBeanslinger", "awolDeferredPointsCowpuncher", "awolDeferredPointsSnakeoiler", "awolVenom", "bagOTricksCharges", "ballpitBonus", "bankedKarma", "bartenderTurnsUsed", "basementMallPrices", "basementSafetyMargin", "batmanFundsAvailable", "batmanBonusInitialFunds", "batmanTimeLeft", "bearSwagger", "beeCounter", "beGregariousCharges", "beGregariousFightsLeft", "birdformCold", "birdformHot", "birdformRoc", "birdformSleaze", "birdformSpooky", "birdformStench", "blackBartsBootyCost", "blackPuddingsDefeated", "blackForestProgress", "blankOutUsed", "bloodweiserDrunk", "bondPoints", "bondVillainsDefeated", "boneAbacusVictories", "booPeakProgress", "borisPoints", "breakableHandling", "breakableHandling1964", "breakableHandling9691", "breakableHandling9692", "breakableHandling9699", "breathitinCharges", "brodenBacteria", "brodenSprinkles", "buffBotMessageDisposal", "buffBotPhilanthropyType", "buffJimmyIngredients", "burnoutsDefeated", "burrowgrubSummonsRemaining", "camelSpit", "camerasUsed", "campAwayDecoration", "candyWitchTurnsUsed", "candyWitchCandyTotal", "carboLoading", "catBurglarBankHeists", "cellarLayout", "charitableDonations", "chasmBridgeProgress", "chefTurnsUsed", "chessboardsCleared", "chibiAlignment", "chibiBirthday", "chibiFitness", "chibiIntelligence", "chibiLastVisit", "chibiSocialization", "chilledToTheBone", "cinchoSaltAndLime", "cinderellaMinutesToMidnight", "cinderellaScore", "cocktailSummons", "commerceGhostCombats", "controlPanelOmega", "cornucopiasOpened", "cosmicBowlingBallReturnCombats", "cozyCounter6332", "cozyCounter6333", "cozyCounter6334", "craftingClay", "craftingLeather", "craftingStraw", "crimbo16BeardChakraCleanliness", "crimbo16BootsChakraCleanliness", "crimbo16BungChakraCleanliness", "crimbo16CrimboHatChakraCleanliness", "crimbo16GutsChakraCleanliness", "crimbo16HatChakraCleanliness", "crimbo16JellyChakraCleanliness", "crimbo16LiverChakraCleanliness", "crimbo16NippleChakraCleanliness", "crimbo16NoseChakraCleanliness", "crimbo16ReindeerChakraCleanliness", "crimbo16SackChakraCleanliness", "crimboTrainingSkill", "crimboTreeDays", "cubelingProgress", "currentExtremity", "currentHedgeMazeRoom", "currentMojoFilters", "currentNunneryMeat", "currentPortalEnergy", "cursedMagnifyingGlassCount", "cyrptAlcoveEvilness", "cyrptCrannyEvilness", "cyrptNicheEvilness", "cyrptNookEvilness", "cyrptTotalEvilness", "darkGyfftePoints", "daycareEquipment", "daycareInstructors", "daycareLastScavenge", "daycareToddlers", "dbNemesisSkill1", "dbNemesisSkill2", "dbNemesisSkill3", "desertExploration", "desktopHeight", "desktopWidth", "dinseyFilthLevel", "dinseyFunProgress", "dinseyNastyBearsDefeated", "dinseySocialJusticeIProgress", "dinseySocialJusticeIIProgress", "dinseyTouristsFed", "dinseyToxicMultiplier", "doctorBagQuestLights", "doctorBagUpgrades", "dreadScroll1", "dreadScroll2", "dreadScroll3", "dreadScroll4", "dreadScroll5", "dreadScroll6", "dreadScroll7", "dreadScroll8", "dripAdventuresSinceAscension", "drippingHallAdventuresSinceAscension", "drippingTreesAdventuresSinceAscension", "drippyBatsUnlocked", "drippyJuice", "drippyOrbsClaimed", "drunkenSwagger", "edDefeatAbort", "edPoints", "eldritchTentaclesFought", "electricKoolAidEaten", "elfGratitude", "encountersUntilDMTChoice", "encountersUntilNEPChoice", "encountersUntilSRChoice", "ensorceleeLevel", "entauntaunedColdRes", "essenceOfAnnoyanceCost", "essenceOfBearCost", "extraRolloverAdventures", "falloutShelterLevel", "familiarSweat", "fingernailsClipped", "fistSkillsKnown", "flyeredML", "fossilB", "fossilD", "fossilN", "fossilP", "fossilS", "fossilW", "fratboysDefeated", "frenchGuardTurtlesFreed", "funGuyMansionKills", "garbageChampagneCharge", "garbageFireProgress", "garbageShirtCharge", "garbageTreeCharge", "garlandUpgrades", "getsYouDrunkTurnsLeft", "ghostPepperTurnsLeft", "gingerDigCount", "gingerLawChoice", "gingerMuscleChoice", "gingerTrainScheduleStudies", "gladiatorBallMovesKnown", "gladiatorBladeMovesKnown", "gladiatorNetMovesKnown", "glitchItemCost", "glitchItemImplementationCount", "glitchItemImplementationLevel", "glitchSwagger", "gloverPoints", "gnasirProgress", "goldenMrAccessories", "gongPath", "gooseDronesRemaining", "goreCollected", "gourdItemCount", "greyYouPoints", "grimoire1Summons", "grimoire2Summons", "grimoire3Summons", "grimstoneCharge", "guardTurtlesFreed", "guideToSafariCost", "guyMadeOfBeesCount", "guzzlrBronzeDeliveries", "guzzlrDeliveryProgress", "guzzlrGoldDeliveries", "guzzlrPlatinumDeliveries", "haciendaLayout", "hallowiener8BitRealm", "hallowienerCoinspiracy", "hareMillisecondsSaved", "hareTurnsUsed", "heavyRainsStartingThunder", "heavyRainsStartingRain", "heavyRainsStartingLightning", "heroDonationBoris", "heroDonationJarlsberg", "heroDonationSneakyPete", "hiddenApartmentProgress", "hiddenBowlingAlleyProgress", "hiddenHospitalProgress", "hiddenOfficeProgress", "hiddenTavernUnlock", "highTopPumped", "hippiesDefeated", "holidayHalsBookCost", "holidaySwagger", "homemadeRobotUpgrades", "homebodylCharges", "hpAutoRecovery", "hpAutoRecoveryTarget", "iceSwagger", "jarlsbergPoints", "jungCharge", "junglePuns", "knownAscensions", "kolhsTotalSchoolSpirited", "lastAnticheeseDay", "lastArcadeAscension", "lastBadMoonReset", "lastBangPotionReset", "lastBattlefieldReset", "lastBeardBuff", "lastBreakfast", "lastCartographyBooPeak", "lastCartographyCastleTop", "lastCartographyDarkNeck", "lastCartographyDefiledNook", "lastCartographyFratHouse", "lastCartographyFratHouseVerge", "lastCartographyGuanoJunction", "lastCartographyHauntedBilliards", "lastCartographyHippyCampVerge", "lastCartographyZeppelinProtesters", "lastCastleGroundUnlock", "lastCastleTopUnlock", "lastCellarReset", "lastChanceThreshold", "lastChasmReset", "lastColosseumRoundWon", "lastCouncilVisit", "lastCounterDay", "lastDesertUnlock", "lastDispensaryOpen", "lastDMTDuplication", "lastDwarfFactoryReset", "lastEVHelmetValue", "lastEVHelmetReset", "lastEmptiedStorage", "lastFilthClearance", "lastGoofballBuy", "lastGuildStoreOpen", "lastGuyMadeOfBeesReset", "lastFratboyCall", "lastFriarCeremonyAscension", "lastFriarElbowNC", "lastFriarHeartNC", "lastFriarNeckNC", "lastHippyCall", "lastIslandUnlock", "lastKeyotronUse", "lastKingLiberation", "lastLightsOutTurn", "lastMushroomPlot", "lastMiningReset", "lastNemesisReset", "lastPaperStripReset", "lastPirateEphemeraReset", "lastPirateInsultReset", "lastPlusSignUnlock", "lastQuartetAscension", "lastQuartetRequest", "lastSecondFloorUnlock", "lastShadowForgeUnlockAdventure", "lastSkateParkReset", "lastStillBeatingSpleen", "lastTavernAscension", "lastTavernSquare", "lastTelescopeReset", "lastTempleAdventures", "lastTempleButtonsUnlock", "lastTempleUnlock", "lastThingWithNoNameDefeated", "lastTowelAscension", "lastTr4pz0rQuest", "lastTrainsetConfiguration", "lastVioletFogMap", "lastVoteMonsterTurn", "lastWartDinseyDefeated", "lastWuTangDefeated", "lastYearbookCameraAscension", "lastZapperWand", "lastZapperWandExplosionDay", "lawOfAveragesCost", "legacyPoints", "libramSummons", "lightsOutAutomation", "louvreDesiredGoal", "louvreGoal", "lovebugsAridDesert", "lovebugsBeachBuck", "lovebugsBooze", "lovebugsChroner", "lovebugsCoinspiracy", "lovebugsCyrpt", "lovebugsFreddy", "lovebugsFunFunds", "lovebugsHoboNickel", "lovebugsItemDrop", "lovebugsMeat", "lovebugsMeatDrop", "lovebugsMoxie", "lovebugsMuscle", "lovebugsMysticality", "lovebugsOilPeak", "lovebugsOrcChasm", "lovebugsPowder", "lovebugsWalmart", "lttQuestDifficulty", "lttQuestStageCount", "manaBurnSummonThreshold", "manaBurningThreshold", "manaBurningTrigger", "manorDrawerCount", "manualOfNumberologyCost", "mapToKokomoCost", "masksUnlocked", "maximizerMRUSize", "maximizerCombinationLimit", "maximizerEquipmentLevel", "maximizerEquipmentScope", "maximizerMaxPrice", "maximizerPriceLevel", "maxManaBurn", "mayflyExperience", "mayoLevel", "meansuckerPrice", "merkinVocabularyMastery", "miniAdvClass", "miniMartinisDrunk", "moleTunnelLevel", "mothershipProgress", "mpAutoRecovery", "mpAutoRecoveryTarget", "munchiesPillsUsed", "mushroomGardenCropLevel", "nextParanormalActivity", "nextQuantumFamiliarOwnerId", "nextQuantumFamiliarTurn", "noobPoints", "noobDeferredPoints", "noodleSummons", "nsContestants1", "nsContestants2", "nsContestants3", "nuclearAutumnPoints", "numericSwagger", "nunsVisits", "oilPeakProgress", "optimalSwagger", "optimisticCandleProgress", "palindomeDudesDefeated", "parasolUsed", "pendingMapReflections", "pingpongSkill", "pirateSwagger", "plantingDay", "plumberBadgeCost", "plumberCostumeCost", "plumberPoints", "poolSharkCount", "poolSkill", "primaryLabGooIntensity", "prismaticSummons", "procrastinatorLanguageFluency", "promptAboutCrafting", "puzzleChampBonus", "pyramidPosition", "rockinRobinProgress", "ROMOfOptimalityCost", "quantumPoints", "reagentSummons", "reanimatorArms", "reanimatorLegs", "reanimatorSkulls", "reanimatorWeirdParts", "reanimatorWings", "recentLocations", "redSnapperProgress", "relayPort", "relocatePygmyJanitor", "relocatePygmyLawyer", "rumpelstiltskinTurnsUsed", "rumpelstiltskinKidsRescued", "safariSwagger", "sausageGrinderUnits", "schoolOfHardKnocksDiplomaCost", "schoolSwagger", "scrapbookCharges", "scriptMRULength", "seaodesFound", "SeasoningSwagger", "sexChanges", "shenInitiationDay", "shockingLickCharges", "singleFamiliarRun", "skillBurn3", "skillBurn90", "skillBurn153", "skillBurn154", "skillBurn155", "skillBurn1019", "skillBurn5017", "skillBurn6014", "skillBurn6015", "skillBurn6016", "skillBurn6020", "skillBurn6021", "skillBurn6022", "skillBurn6023", "skillBurn6024", "skillBurn6026", "skillBurn6028", "skillBurn7323", "skillBurn14008", "skillBurn14028", "skillBurn14038", "skillBurn15011", "skillBurn15028", "skillBurn17005", "skillBurn22034", "skillBurn22035", "skillBurn23301", "skillBurn23302", "skillBurn23303", "skillBurn23304", "skillBurn23305", "skillBurn23306", "skillLevel46", "skillLevel47", "skillLevel48", "skillLevel117", "skillLevel118", "skillLevel121", "skillLevel128", "skillLevel134", "skillLevel144", "skillLevel180", "skillLevel188", "skillLevel7254", "slimelingFullness", "slimelingStacksDropped", "slimelingStacksDue", "smoresEaten", "smutOrcNoncombatProgress", "sneakyPetePoints", "snojoMoxieWins", "snojoMuscleWins", "snojoMysticalityWins", "sourceAgentsDefeated", "sourceEnlightenment", "sourceInterval", "sourcePoints", "sourceTerminalGram", "sourceTerminalPram", "sourceTerminalSpam", "spaceBabyLanguageFluency", "spacePirateLanguageFluency", "spelunkyNextNoncombat", "spelunkySacrifices", "spelunkyWinCount", "spookyPuttyCopiesMade", "statbotUses", "sugarCounter4178", "sugarCounter4179", "sugarCounter4180", "sugarCounter4181", "sugarCounter4182", "sugarCounter4183", "sugarCounter4191", "summonAnnoyanceCost", "sweat", "tacoDanCocktailSauce", "tacoDanFishMeat", "tavernLayout", "telescopeUpgrades", "tempuraSummons", "timeSpinnerMedals", "timesRested", "tomeSummons", "totalCharitableDonations", "trainsetPosition", "turtleBlessingTurns", "twinPeakProgress", "twoCRSPoints", "unicornHornInflation", "universalSeasoningCost", "usable1HWeapons", "usable1xAccs", "usable2HWeapons", "usable3HWeapons", "usableAccessories", "usableHats", "usableOffhands", "usableOther", "usablePants", "usableShirts", "valueOfAdventure", "valueOfInventory", "valueOfStill", "valueOfTome", "vintnerCharge", "vintnerWineLevel", "violetFogGoal", "walfordBucketProgress", "warehouseProgress", "welcomeBackAdv", "whetstonesUsed", "wolfPigsEvicted", "wolfTurnsUsed", "writingDesksDefeated", "xoSkeleltonXProgress", "xoSkeleltonOProgress", "yearbookCameraAscensions", "yearbookCameraUpgrades", "youRobotBody", "youRobotBottom", "youRobotLeft", "youRobotPoints", "youRobotRight", "youRobotTop", "zeppelinProtestors", "zigguratLianas", "zombiePoints", "_absintheDrops", "_abstractionDropsCrown", "_aguaDrops", "_xenomorphCharge", "_ancestralRecallCasts", "_antihangoverBonus", "_astralDrops", "_autumnatonQuests", "_backUpUses", "_badlyRomanticArrows", "_badgerCharge", "_balefulHowlUses", "_banderRunaways", "_bastilleCheese", "_bastilleGames", "_bastilleGameTurn", "_bastilleLastCheese", "_beanCannonUses", "_bearHugs", "_beerLensDrops", "_bellydancerPickpockets", "_benettonsCasts", "_birdsSoughtToday", "_boomBoxFights", "_boomBoxSongsLeft", "_bootStomps", "_boxingGloveArrows", "_brickoEyeSummons", "_brickoFights", "_campAwayCloudBuffs", "_campAwaySmileBuffs", "_candySummons", "_captainHagnkUsed", "_carnieCandyDrops", "_carrotNoseDrops", "_catBurglarCharge", "_catBurglarHeistsComplete", "_cheerleaderSteam", "_chestXRayUsed", "_chibiAdventures", "_chipBags", "_chocolateCigarsUsed", "_chocolateCoveredPingPongBallsUsed", "_chocolateSculpturesUsed", "_chocolatesUsed", "_chronolithActivations", "_chronolithNextCost", "_cinchUsed", "_cinchoRests", "_clanFortuneConsultUses", "_clipartSummons", "_cloversPurchased", "_coldMedicineConsults", "_coldMedicineEquipmentTaken", "_companionshipCasts", "_cookbookbatCrafting", "_cosmicBowlingSkillsUsed", "_crimbo21ColdResistance", "_dailySpecialPrice", "_daycareGymScavenges", "_daycareRecruits", "_deckCardsDrawn", "_deluxeKlawSummons", "_demandSandwich", "_detectiveCasesCompleted", "_disavowed", "_dnaPotionsMade", "_donhosCasts", "_dreamJarDrops", "_drunkPygmyBanishes", "_edDefeats", "_edLashCount", "_elronsCasts", "_enamorangs", "_energyCollected", "_expertCornerCutterUsed", "_favorRareSummons", "_feastUsed", "_feelinTheRhythm", "_feelPrideUsed", "_feelExcitementUsed", "_feelHatredUsed", "_feelLonelyUsed", "_feelNervousUsed", "_feelEnvyUsed", "_feelDisappointedUsed", "_feelSuperiorUsed", "_feelLostUsed", "_feelNostalgicUsed", "_feelPeacefulUsed", "_fingertrapArrows", "_fireExtinguisherCharge", "_fragrantHerbsUsed", "_freeBeachWalksUsed", "_frButtonsPressed", "_fudgeWaspFights", "_gapBuffs", "_garbageFireDrops", "_garbageFireDropsCrown", "_genieFightsUsed", "_genieWishesUsed", "_gibbererAdv", "_gibbererCharge", "_gingerbreadCityTurns", "_glarkCableUses", "_glitchMonsterFights", "_gnomeAdv", "_godLobsterFights", "_goldenMoneyCharge", "_gongDrops", "_gothKidCharge", "_gothKidFights", "_greyYouAdventures", "_grimBrotherCharge", "_grimFairyTaleDrops", "_grimFairyTaleDropsCrown", "_grimoireConfiscatorSummons", "_grimoireGeekySummons", "_grimstoneMaskDrops", "_grimstoneMaskDropsCrown", "_grooseCharge", "_grooseDrops", "_grubbyWoolDrops", "_guzzlrDeliveries", "_guzzlrGoldDeliveries", "_guzzlrPlatinumDeliveries", "_hareAdv", "_hareCharge", "_highTopPumps", "_hipsterAdv", "_hoardedCandyDropsCrown", "_hoboUnderlingSummons", "_holoWristDrops", "_holoWristProgress", "_hotAshesDrops", "_hotJellyUses", "_hotTubSoaks", "_humanMuskUses", "_iceballUses", "_inigosCasts", "_jerksHealthMagazinesUsed", "_jiggleCheese", "_jiggleCream", "_jiggleLife", "_jiggleSteak", "_jitbCharge", "_juneCleaverFightsLeft", "_juneCleaverEncounters", "_juneCleaverStench", "_juneCleaverSpooky", "_juneCleaverSleaze", "_juneCleaverHot", "_juneCleaverCold", "_juneCleaverSkips", "_jungDrops", "_kgbClicksUsed", "_kgbDispenserUses", "_kgbTranquilizerDartUses", "_klawSummons", "_kloopCharge", "_kloopDrops", "_kolhsAdventures", "_kolhsSavedByTheBell", "_lastDailyDungeonRoom", "_lastSausageMonsterTurn", "_lastZomboEye", "_latteRefillsUsed", "_leafblowerML", "_legionJackhammerCrafting", "_llamaCharge", "_longConUsed", "_lovebugsBeachBuck", "_lovebugsChroner", "_lovebugsCoinspiracy", "_lovebugsFreddy", "_lovebugsFunFunds", "_lovebugsHoboNickel", "_lovebugsWalmart", "_loveChocolatesUsed", "_lynyrdSnareUses", "_machineTunnelsAdv", "_macrometeoriteUses", "_mafiaThumbRingAdvs", "_mayflowerDrops", "_mayflySummons", "_mediumSiphons", "_meteoriteAdesUsed", "_meteorShowerUses", "_micrometeoriteUses", "_miniMartiniDrops", "_monkeyPawWishesUsed", "_monstersMapped", "_mushroomGardenFights", "_nanorhinoCharge", "_navelRunaways", "_neverendingPartyFreeTurns", "_newYouQuestSharpensDone", "_newYouQuestSharpensToDo", "_nextColdMedicineConsult", "_nextQuantumAlignment", "_nightmareFuelCharges", "_noobSkillCount", "_nuclearStockpileUsed", "_oilExtracted", "_olfactionsUsed", "_optimisticCandleDropsCrown", "_oreDropsCrown", "_otoscopeUsed", "_oysterEggsFound", "_pantsgivingBanish", "_pantsgivingCount", "_pantsgivingCrumbs", "_pantsgivingFullness", "_pasteDrops", "_peteJukeboxFixed", "_peteJumpedShark", "_petePeeledOut", "_pieDrops", "_piePartsCount", "_pixieCharge", "_pocketProfessorLectures", "_poisonArrows", "_pokeGrowFertilizerDrops", "_poolGames", "_powderedGoldDrops", "_powderedMadnessUses", "_powerfulGloveBatteryPowerUsed", "_powerPillDrops", "_powerPillUses", "_precisionCasts", "_radlibSummons", "_raindohCopiesMade", "_rapidPrototypingUsed", "_raveStealCount", "_reflexHammerUsed", "_resolutionAdv", "_resolutionRareSummons", "_riftletAdv", "_robinEggDrops", "_roboDrops", "_rogueProgramCharge", "_romanticFightsLeft", "_saberForceMonsterCount", "_saberForceUses", "_saberMod", "_saltGrainsConsumed", "_sandwormCharge", "_saplingsPlanted", "_sausageFights", "_sausagesEaten", "_sausagesMade", "_sealFigurineUses", "_sealScreeches", "_sealsSummoned", "_shadowBricksUsed", "_shadowRiftCombats", "_shatteringPunchUsed", "_shortOrderCookCharge", "_shrubCharge", "_sloppyDinerBeachBucks", "_smilesOfMrA", "_smithsnessSummons", "_snojoFreeFights", "_snojoParts", "_snokebombUsed", "_snowconeSummons", "_snowglobeDrops", "_snowSuitCount", "_sourceTerminalDigitizeMonsterCount", "_sourceTerminalDigitizeUses", "_sourceTerminalDuplicateUses", "_sourceTerminalEnhanceUses", "_sourceTerminalExtrudes", "_sourceTerminalPortscanUses", "_spaceFurDropsCrown", "_spacegatePlanetIndex", "_spacegateTurnsLeft", "_spaceJellyfishDrops", "_speakeasyDrinksDrunk", "_speakeasyFreeFights", "_spelunkerCharges", "_spelunkingTalesDrops", "_spikolodonSpikeUses", "_spookyJellyUses", "_stackLumpsUses", "_steamCardDrops", "_stickerSummons", "_stinkyCheeseCount", "_stressBallSqueezes", "_sugarSummons", "_sweatOutSomeBoozeUsed", "_taffyRareSummons", "_taffyYellowSummons", "_thanksgettingFoodsEaten", "_thingfinderCasts", "_thinknerdPackageDrops", "_thorsPliersCrafting", "_timeHelmetAdv", "_timeSpinnerMinutesUsed", "_tokenDrops", "_transponderDrops", "_turkeyBlastersUsed", "_turkeyBooze", "_turkeyMuscle", "_turkeyMyst", "_turkeyMoxie", "_unaccompaniedMinerUsed", "_unconsciousCollectiveCharge", "_universalSeasoningsUsed", "_universeCalculated", "_universeImploded", "_usedReplicaBatoomerang", "_vampyreCloakeFormUses", "_villainLairProgress", "_vitachocCapsulesUsed", "_vmaskAdv", "_voidFreeFights", "_volcanoItem1", "_volcanoItem2", "_volcanoItem3", "_volcanoItemCount1", "_volcanoItemCount2", "_volcanoItemCount3", "_voteFreeFights", "_VYKEACompanionLevel", "_warbearAutoAnvilCrafting", "_waxGlobDrops", "_whiteRiceDrops", "_witchessFights", "_xoHugsUsed", "_yellowPixelDropsCrown", "_zapCount", "_zombieSmashPocketsUsed"];
var monsterProperties = ["beGregariousMonster", "cameraMonster", "chateauMonster", "clumsinessGroveBoss", "crappyCameraMonster", "crudeMonster", "enamorangMonster", "envyfishMonster", "glacierOfJerksBoss", "iceSculptureMonster", "lastCopyableMonster", "longConMonster", "maelstromOfLoversBoss", "makeFriendsMonster", "merkinLockkeyMonster", "monkeyPointMonster", "motifMonster", "nosyNoseMonster", "olfactedMonster", "photocopyMonster", "rainDohMonster", "romanticTarget", "rufusDesiredEntity", "screencappedMonster", "spookyPuttyMonster", "stenchCursedMonster", "superficiallyInterestedMonster", "waxMonster", "yearbookCameraTarget", "_gallapagosMonster", "_jiggleCreamedMonster", "_latteMonster", "_nanorhinoBanishedMonster", "_newYouQuestMonster", "_relativityMonster", "_saberForceMonster", "_sourceTerminalDigitizeMonster", "_voteMonster"];
var locationProperties = ["autumnatonQuestLocation", "currentJunkyardLocation", "doctorBagQuestLocation", "ghostLocation", "guzzlrQuestLocation", "nextSpookyravenElizabethRoom", "nextSpookyravenStephenRoom", "sourceOracleTarget", "_floundryBassLocation", "_floundryCarpLocation", "_floundryCodLocation", "_floundryHatchetfishLocation", "_floundryTroutLocation", "_floundryTunaLocation", "_sotParcelLocation"];
var stringProperties = ["autoLogin", "browserBookmarks", "chatFontSize", "combatHotkey0", "combatHotkey1", "combatHotkey2", "combatHotkey3", "combatHotkey4", "combatHotkey5", "combatHotkey6", "combatHotkey7", "combatHotkey8", "combatHotkey9", "commandLineNamespace", "dailyDeedsOptions", "defaultBorderColor", "displayName", "externalEditor", "getBreakfast", "headerStates", "highlightList", "http.proxyHost", "http.proxyPassword", "http.proxyPort", "http.proxyUser", "https.proxyHost", "https.proxyPassword", "https.proxyPort", "https.proxyUser", "initialDesktop", "initialFrames", "lastRelayUpdate", "lastUserAgent", "lastUsername", "logPreferenceChangeFilter", "loginScript", "loginServerName", "loginWindowLogo", "logoutScript", "previousNotifyList", "previousUpdateVersion", "saveState", "saveStateActive", "scriptList", "swingLookAndFeel", "userAgent", "8BitColor", "afterAdventureScript", "autoOlfact", "autoPutty", "autumnatonUpgrades", "backupCameraMode", "banishedMonsters", "banishingShoutMonsters", "batmanStats", "batmanZone", "batmanUpgrades", "battleAction", "beachHeadsUnlocked", "beforePVPScript", "betweenBattleScript", "boomBoxSong", "breakfastAlways", "breakfastHardcore", "breakfastSoftcore", "buffBotCasting", "buyScript", "cargoPocketsEmptied", "cargoPocketScraps", "chatbotScript", "chatPlayerScript", "chibiName", "choiceAdventureScript", "chosenTrip", "clanFortuneReply1", "clanFortuneReply2", "clanFortuneReply3", "clanFortuneWord1", "clanFortuneWord2", "clanFortuneWord3", "commerceGhostItem", "counterScript", "copperheadClubHazard", "crimbotChassis", "crimbotArm", "crimbotPropulsion", "crystalBallPredictions", "csServicesPerformed", "currentAstralTrip", "currentDistillateMods", "currentEasyBountyItem", "currentHardBountyItem", "currentHippyStore", "currentJunkyardTool", "currentLlamaForm", "currentMood", "currentPVPSeason", "currentPvpVictories", "currentSpecialBountyItem", "currentSITSkill", "customCombatScript", "cyrusAdjectives", "defaultFlowerLossMessage", "defaultFlowerWinMessage", "demonName1", "demonName2", "demonName3", "demonName4", "demonName5", "demonName6", "demonName7", "demonName8", "demonName9", "demonName10", "demonName11", "demonName12", "demonName13", "dinseyGatorStenchDamage", "dinseyRollercoasterStats", "doctorBagQuestItem", "dolphinItem", "duckAreasCleared", "duckAreasSelected", "edPiece", "enamorangMonsterTurn", "ensorcelee", "EVEDirections", "extraCosmeticModifiers", "familiarScript", "forbiddenStores", "gameProBossSpecialPower", "gooseReprocessed", "grimoireSkillsHardcore", "grimoireSkillsSoftcore", "grimstoneMaskPath", "guzzlrQuestClient", "guzzlrQuestBooze", "guzzlrQuestTier", "harvestGardenHardcore", "harvestGardenSoftcore", "hpAutoRecoveryItems", "invalidBuffMessage", "jickSwordModifier", "juneCleaverQueue", "kingLiberatedScript", "lassoTraining", "lastAdventure", "lastBangPotion819", "lastBangPotion820", "lastBangPotion821", "lastBangPotion822", "lastBangPotion823", "lastBangPotion824", "lastBangPotion825", "lastBangPotion826", "lastBangPotion827", "lastChanceBurn", "lastChessboard", "lastCombatEnvironments", "lastDwarfDiceRolls", "lastDwarfDigitRunes", "lastDwarfEquipmentRunes", "lastDwarfFactoryItem118", "lastDwarfFactoryItem119", "lastDwarfFactoryItem120", "lastDwarfFactoryItem360", "lastDwarfFactoryItem361", "lastDwarfFactoryItem362", "lastDwarfFactoryItem363", "lastDwarfFactoryItem364", "lastDwarfFactoryItem365", "lastDwarfFactoryItem910", "lastDwarfFactoryItem3199", "lastDwarfOfficeItem3208", "lastDwarfOfficeItem3209", "lastDwarfOfficeItem3210", "lastDwarfOfficeItem3211", "lastDwarfOfficeItem3212", "lastDwarfOfficeItem3213", "lastDwarfOfficeItem3214", "lastDwarfOreRunes", "lastDwarfHopper1", "lastDwarfHopper2", "lastDwarfHopper3", "lastDwarfHopper4", "lastEncounter", "lastMacroError", "lastMessageId", "lastPaperStrip3144", "lastPaperStrip4138", "lastPaperStrip4139", "lastPaperStrip4140", "lastPaperStrip4141", "lastPaperStrip4142", "lastPaperStrip4143", "lastPaperStrip4144", "lastPirateEphemera", "lastPorkoBoard", "lastPorkoPayouts", "lastPorkoExpected", "lastSlimeVial3885", "lastSlimeVial3886", "lastSlimeVial3887", "lastSlimeVial3888", "lastSlimeVial3889", "lastSlimeVial3890", "lastSlimeVial3891", "lastSlimeVial3892", "lastSlimeVial3893", "lastSlimeVial3894", "lastSlimeVial3895", "lastSlimeVial3896", "latteIngredients", "latteModifier", "latteUnlocks", "libramSkillsHardcore", "libramSkillsSoftcore", "louvreOverride", "lovePotion", "lttQuestName", "maximizerList", "maximizerMRUList", "mayoInMouth", "mayoMinderSetting", "merkinQuestPath", "mineLayout1", "mineLayout2", "mineLayout3", "mineLayout4", "mineLayout5", "mineLayout6", "mpAutoRecoveryItems", "muffinOnOrder", "nextAdventure", "nextDistillateMods", "nextQuantumFamiliarName", "nextQuantumFamiliarOwner", "nsChallenge2", "nsChallenge3", "nsChallenge4", "nsChallenge5", "nsTowerDoorKeysUsed", "oceanAction", "oceanDestination", "parkaMode", "pastaThrall1", "pastaThrall2", "pastaThrall3", "pastaThrall4", "pastaThrall5", "pastaThrall6", "pastaThrall7", "pastaThrall8", "peteMotorbikeTires", "peteMotorbikeGasTank", "peteMotorbikeHeadlight", "peteMotorbikeCowling", "peteMotorbikeMuffler", "peteMotorbikeSeat", "pieStuffing", "plantingDate", "plantingLength", "plantingScript", "plumberCostumeWorn", "pokefamBoosts", "postAscensionScript", "preAscensionScript", "retroCapeSuperhero", "retroCapeWashingInstructions", "questClumsinessGrove", "questDoctorBag", "questECoBucket", "questESlAudit", "questESlBacteria", "questESlCheeseburger", "questESlCocktail", "questESlDebt", "questESlFish", "questESlMushStash", "questESlSalt", "questESlSprinkles", "questESpEVE", "questESpJunglePun", "questESpGore", "questESpClipper", "questESpFakeMedium", "questESpSerum", "questESpSmokes", "questESpOutOfOrder", "questEStFishTrash", "questEStGiveMeFuel", "questEStNastyBears", "questEStSocialJusticeI", "questEStSocialJusticeII", "questEStSuperLuber", "questEStWorkWithFood", "questEStZippityDooDah", "questEUNewYou", "questF01Primordial", "questF02Hyboria", "questF03Future", "questF04Elves", "questF05Clancy", "questG01Meatcar", "questG02Whitecastle", "questG03Ego", "questG04Nemesis", "questG05Dark", "questG06Delivery", "questG07Myst", "questG08Moxie", "questG09Muscle", "questGlacierOfJerks", "questGuzzlr", "questI01Scapegoat", "questI02Beat", "questL02Larva", "questL03Rat", "questL04Bat", "questL05Goblin", "questL06Friar", "questL07Cyrptic", "questL08Trapper", "questL09Topping", "questL10Garbage", "questL11MacGuffin", "questL11Black", "questL11Business", "questL11Curses", "questL11Desert", "questL11Doctor", "questL11Manor", "questL11Palindome", "questL11Pyramid", "questL11Ron", "questL11Shen", "questL11Spare", "questL11Worship", "questL12War", "questL12HippyFrat", "questL13Final", "questL13Warehouse", "questLTTQuestByWire", "questM01Untinker", "questM02Artist", "questM03Bugbear", "questM05Toot", "questM06Gourd", "questM07Hammer", "questM08Baker", "questM09Rocks", "questM10Azazel", "questM11Postal", "questM12Pirate", "questM13Escape", "questM14Bounty", "questM15Lol", "questM16Temple", "questM17Babies", "questM18Swamp", "questM19Hippy", "questM20Necklace", "questM21Dance", "questM22Shirt", "questM23Meatsmith", "questM24Doc", "questM25Armorer", "questM26Oracle", "questMaelstromOfLovers", "questPAGhost", "questRufus", "questS01OldGuy", "questS02Monkees", "raveCombo1", "raveCombo2", "raveCombo3", "raveCombo4", "raveCombo5", "raveCombo6", "recoveryScript", "relayCounters", "royalty", "rufusDesiredArtifact", "rufusDesiredItems", "rufusQuestTarget", "rufusQuestType", "scriptMRUList", "seahorseName", "shadowLabyrinthGoal", "shadowRiftIngress", "shenQuestItem", "shrubGarland", "shrubGifts", "shrubLights", "shrubTopper", "sideDefeated", "sidequestArenaCompleted", "sidequestFarmCompleted", "sidequestJunkyardCompleted", "sidequestLighthouseCompleted", "sidequestNunsCompleted", "sidequestOrchardCompleted", "skateParkStatus", "snowsuit", "sourceTerminalChips", "sourceTerminalEducate1", "sourceTerminalEducate2", "sourceTerminalEnquiry", "sourceTerminalEducateKnown", "sourceTerminalEnhanceKnown", "sourceTerminalEnquiryKnown", "sourceTerminalExtrudeKnown", "spadingData", "spadingScript", "speakeasyName", "spelunkyStatus", "spelunkyUpgrades", "spookyravenRecipeUsed", "stationaryButton1", "stationaryButton2", "stationaryButton3", "stationaryButton4", "stationaryButton5", "streamCrossDefaultTarget", "sweetSynthesisBlacklist", "telescope1", "telescope2", "telescope3", "telescope4", "telescope5", "testudinalTeachings", "textColors", "thanksMessage", "tomeSkillsHardcore", "tomeSkillsSoftcore", "trackVoteMonster", "trainsetConfiguration", "trapperOre", "umbrellaState", "umdLastObtained", "vintnerWineEffect", "vintnerWineName", "vintnerWineType", "violetFogLayout", "volcanoMaze1", "volcanoMaze2", "volcanoMaze3", "volcanoMaze4", "volcanoMaze5", "walfordBucketItem", "warProgress", "watchedPreferences", "workteaClue", "yourFavoriteBird", "yourFavoriteBirdMods", "youRobotCPUUpgrades", "_bastilleBoosts", "_bastilleChoice1", "_bastilleChoice2", "_bastilleChoice3", "_bastilleCurrentStyles", "_bastilleEnemyCastle", "_bastilleEnemyName", "_bastilleLastBattleResults", "_bastilleLastEncounter", "_bastilleStats", "_beachHeadsUsed", "_beachLayout", "_beachMinutes", "_birdOfTheDay", "_birdOfTheDayMods", "_bittycar", "_campAwaySmileBuffSign", "_cloudTalkMessage", "_cloudTalkSmoker", "_coatOfPaintModifier", "_dailySpecial", "_deckCardsSeen", "_feastedFamiliars", "_floristPlantsUsed", "_frAreasUnlocked", "_frHoursLeft", "_frMonstersKilled", "_horsery", "_horseryCrazyMox", "_horseryCrazyMus", "_horseryCrazyMys", "_horseryCrazyName", "_horseryCurrentName", "_horseryDarkName", "_horseryNormalName", "_horseryPaleName", "_jickJarAvailable", "_jiggleCheesedMonsters", "_lastCombatStarted", "_lastPirateRealmIsland", "_locketMonstersFought", "_mummeryMods", "_mummeryUses", "_newYouQuestSkill", "_noHatModifier", "_pantogramModifier", "_pottedPowerPlant", "_questESp", "_questPartyFair", "_questPartyFairProgress", "_questPartyFairQuest", "_roboDrinks", "_roninStoragePulls", "_sotParcelReturned  false", "_spacegateAnimalLife", "_spacegateCoordinates", "_spacegateGear", "_spacegateHazards", "_spacegateIntelligentLife", "_spacegatePlanetName", "_spacegatePlantLife", "_stolenAccordions", "_tempRelayCounters", "_timeSpinnerFoodAvailable", "_unknownEasyBountyItem", "_unknownHardBountyItem", "_unknownSpecialBountyItem", "_untakenEasyBountyItem", "_untakenHardBountyItem", "_untakenSpecialBountyItem", "_userMods", "_villainLairColor", "_villainLairKey", "_voteLocal1", "_voteLocal2", "_voteLocal3", "_voteLocal4", "_voteMonster1", "_voteMonster2", "_voteModifier", "_VYKEACompanionType", "_VYKEACompanionRune", "_VYKEACompanionName"];
var numericOrStringProperties = ["statusEngineering", "statusGalley", "statusMedbay", "statusMorgue", "statusNavigation", "statusScienceLab", "statusSonar", "statusSpecialOps", "statusWasteProcessing", "choiceAdventure2", "choiceAdventure3", "choiceAdventure4", "choiceAdventure5", "choiceAdventure6", "choiceAdventure7", "choiceAdventure8", "choiceAdventure9", "choiceAdventure10", "choiceAdventure11", "choiceAdventure12", "choiceAdventure14", "choiceAdventure15", "choiceAdventure16", "choiceAdventure17", "choiceAdventure18", "choiceAdventure19", "choiceAdventure20", "choiceAdventure21", "choiceAdventure22", "choiceAdventure23", "choiceAdventure24", "choiceAdventure25", "choiceAdventure26", "choiceAdventure27", "choiceAdventure28", "choiceAdventure29", "choiceAdventure40", "choiceAdventure41", "choiceAdventure42", "choiceAdventure45", "choiceAdventure46", "choiceAdventure47", "choiceAdventure71", "choiceAdventure72", "choiceAdventure73", "choiceAdventure74", "choiceAdventure75", "choiceAdventure76", "choiceAdventure77", "choiceAdventure86", "choiceAdventure87", "choiceAdventure88", "choiceAdventure89", "choiceAdventure90", "choiceAdventure91", "choiceAdventure105", "choiceAdventure106", "choiceAdventure107", "choiceAdventure108", "choiceAdventure109", "choiceAdventure110", "choiceAdventure111", "choiceAdventure112", "choiceAdventure113", "choiceAdventure114", "choiceAdventure115", "choiceAdventure116", "choiceAdventure117", "choiceAdventure118", "choiceAdventure120", "choiceAdventure123", "choiceAdventure125", "choiceAdventure126", "choiceAdventure127", "choiceAdventure129", "choiceAdventure131", "choiceAdventure132", "choiceAdventure135", "choiceAdventure136", "choiceAdventure137", "choiceAdventure138", "choiceAdventure139", "choiceAdventure140", "choiceAdventure141", "choiceAdventure142", "choiceAdventure143", "choiceAdventure144", "choiceAdventure145", "choiceAdventure146", "choiceAdventure147", "choiceAdventure148", "choiceAdventure149", "choiceAdventure151", "choiceAdventure152", "choiceAdventure153", "choiceAdventure154", "choiceAdventure155", "choiceAdventure156", "choiceAdventure157", "choiceAdventure158", "choiceAdventure159", "choiceAdventure160", "choiceAdventure161", "choiceAdventure162", "choiceAdventure163", "choiceAdventure164", "choiceAdventure165", "choiceAdventure166", "choiceAdventure167", "choiceAdventure168", "choiceAdventure169", "choiceAdventure170", "choiceAdventure171", "choiceAdventure172", "choiceAdventure177", "choiceAdventure178", "choiceAdventure180", "choiceAdventure181", "choiceAdventure182", "choiceAdventure184", "choiceAdventure185", "choiceAdventure186", "choiceAdventure187", "choiceAdventure188", "choiceAdventure189", "choiceAdventure191", "choiceAdventure197", "choiceAdventure198", "choiceAdventure199", "choiceAdventure200", "choiceAdventure201", "choiceAdventure202", "choiceAdventure203", "choiceAdventure204", "choiceAdventure205", "choiceAdventure206", "choiceAdventure207", "choiceAdventure208", "choiceAdventure211", "choiceAdventure212", "choiceAdventure213", "choiceAdventure214", "choiceAdventure215", "choiceAdventure216", "choiceAdventure217", "choiceAdventure218", "choiceAdventure219", "choiceAdventure220", "choiceAdventure221", "choiceAdventure222", "choiceAdventure223", "choiceAdventure224", "choiceAdventure225", "choiceAdventure230", "choiceAdventure272", "choiceAdventure273", "choiceAdventure276", "choiceAdventure277", "choiceAdventure278", "choiceAdventure279", "choiceAdventure280", "choiceAdventure281", "choiceAdventure282", "choiceAdventure283", "choiceAdventure284", "choiceAdventure285", "choiceAdventure286", "choiceAdventure287", "choiceAdventure288", "choiceAdventure289", "choiceAdventure290", "choiceAdventure291", "choiceAdventure292", "choiceAdventure293", "choiceAdventure294", "choiceAdventure295", "choiceAdventure296", "choiceAdventure297", "choiceAdventure298", "choiceAdventure299", "choiceAdventure302", "choiceAdventure303", "choiceAdventure304", "choiceAdventure305", "choiceAdventure306", "choiceAdventure307", "choiceAdventure308", "choiceAdventure309", "choiceAdventure310", "choiceAdventure311", "choiceAdventure317", "choiceAdventure318", "choiceAdventure319", "choiceAdventure320", "choiceAdventure321", "choiceAdventure322", "choiceAdventure326", "choiceAdventure327", "choiceAdventure328", "choiceAdventure329", "choiceAdventure330", "choiceAdventure331", "choiceAdventure332", "choiceAdventure333", "choiceAdventure334", "choiceAdventure335", "choiceAdventure336", "choiceAdventure337", "choiceAdventure338", "choiceAdventure339", "choiceAdventure340", "choiceAdventure341", "choiceAdventure342", "choiceAdventure343", "choiceAdventure344", "choiceAdventure345", "choiceAdventure346", "choiceAdventure347", "choiceAdventure348", "choiceAdventure349", "choiceAdventure350", "choiceAdventure351", "choiceAdventure352", "choiceAdventure353", "choiceAdventure354", "choiceAdventure355", "choiceAdventure356", "choiceAdventure357", "choiceAdventure358", "choiceAdventure360", "choiceAdventure361", "choiceAdventure362", "choiceAdventure363", "choiceAdventure364", "choiceAdventure365", "choiceAdventure366", "choiceAdventure367", "choiceAdventure372", "choiceAdventure376", "choiceAdventure387", "choiceAdventure388", "choiceAdventure389", "choiceAdventure390", "choiceAdventure391", "choiceAdventure392", "choiceAdventure393", "choiceAdventure395", "choiceAdventure396", "choiceAdventure397", "choiceAdventure398", "choiceAdventure399", "choiceAdventure400", "choiceAdventure401", "choiceAdventure402", "choiceAdventure403", "choiceAdventure423", "choiceAdventure424", "choiceAdventure425", "choiceAdventure426", "choiceAdventure427", "choiceAdventure428", "choiceAdventure429", "choiceAdventure430", "choiceAdventure431", "choiceAdventure432", "choiceAdventure433", "choiceAdventure435", "choiceAdventure438", "choiceAdventure439", "choiceAdventure442", "choiceAdventure444", "choiceAdventure445", "choiceAdventure446", "choiceAdventure447", "choiceAdventure448", "choiceAdventure449", "choiceAdventure451", "choiceAdventure452", "choiceAdventure453", "choiceAdventure454", "choiceAdventure455", "choiceAdventure456", "choiceAdventure457", "choiceAdventure458", "choiceAdventure460", "choiceAdventure461", "choiceAdventure462", "choiceAdventure463", "choiceAdventure464", "choiceAdventure465", "choiceAdventure467", "choiceAdventure468", "choiceAdventure469", "choiceAdventure470", "choiceAdventure471", "choiceAdventure472", "choiceAdventure473", "choiceAdventure474", "choiceAdventure475", "choiceAdventure477", "choiceAdventure478", "choiceAdventure480", "choiceAdventure483", "choiceAdventure484", "choiceAdventure485", "choiceAdventure486", "choiceAdventure488", "choiceAdventure489", "choiceAdventure490", "choiceAdventure491", "choiceAdventure496", "choiceAdventure497", "choiceAdventure502", "choiceAdventure503", "choiceAdventure504", "choiceAdventure505", "choiceAdventure506", "choiceAdventure507", "choiceAdventure509", "choiceAdventure510", "choiceAdventure511", "choiceAdventure512", "choiceAdventure513", "choiceAdventure514", "choiceAdventure515", "choiceAdventure517", "choiceAdventure518", "choiceAdventure519", "choiceAdventure521", "choiceAdventure522", "choiceAdventure523", "choiceAdventure527", "choiceAdventure528", "choiceAdventure529", "choiceAdventure530", "choiceAdventure531", "choiceAdventure532", "choiceAdventure533", "choiceAdventure534", "choiceAdventure535", "choiceAdventure536", "choiceAdventure538", "choiceAdventure539", "choiceAdventure542", "choiceAdventure543", "choiceAdventure544", "choiceAdventure546", "choiceAdventure548", "choiceAdventure549", "choiceAdventure550", "choiceAdventure551", "choiceAdventure552", "choiceAdventure553", "choiceAdventure554", "choiceAdventure556", "choiceAdventure557", "choiceAdventure558", "choiceAdventure559", "choiceAdventure560", "choiceAdventure561", "choiceAdventure562", "choiceAdventure563", "choiceAdventure564", "choiceAdventure565", "choiceAdventure566", "choiceAdventure567", "choiceAdventure568", "choiceAdventure569", "choiceAdventure571", "choiceAdventure572", "choiceAdventure573", "choiceAdventure574", "choiceAdventure575", "choiceAdventure576", "choiceAdventure577", "choiceAdventure578", "choiceAdventure579", "choiceAdventure581", "choiceAdventure582", "choiceAdventure583", "choiceAdventure584", "choiceAdventure594", "choiceAdventure595", "choiceAdventure596", "choiceAdventure597", "choiceAdventure598", "choiceAdventure599", "choiceAdventure600", "choiceAdventure603", "choiceAdventure604", "choiceAdventure616", "choiceAdventure634", "choiceAdventure640", "choiceAdventure654", "choiceAdventure655", "choiceAdventure656", "choiceAdventure657", "choiceAdventure658", "choiceAdventure664", "choiceAdventure669", "choiceAdventure670", "choiceAdventure671", "choiceAdventure672", "choiceAdventure673", "choiceAdventure674", "choiceAdventure675", "choiceAdventure676", "choiceAdventure677", "choiceAdventure678", "choiceAdventure679", "choiceAdventure681", "choiceAdventure683", "choiceAdventure684", "choiceAdventure685", "choiceAdventure686", "choiceAdventure687", "choiceAdventure688", "choiceAdventure689", "choiceAdventure690", "choiceAdventure691", "choiceAdventure692", "choiceAdventure693", "choiceAdventure694", "choiceAdventure695", "choiceAdventure696", "choiceAdventure697", "choiceAdventure698", "choiceAdventure700", "choiceAdventure701", "choiceAdventure705", "choiceAdventure706", "choiceAdventure707", "choiceAdventure708", "choiceAdventure709", "choiceAdventure710", "choiceAdventure711", "choiceAdventure712", "choiceAdventure713", "choiceAdventure714", "choiceAdventure715", "choiceAdventure716", "choiceAdventure717", "choiceAdventure721", "choiceAdventure725", "choiceAdventure729", "choiceAdventure733", "choiceAdventure737", "choiceAdventure741", "choiceAdventure745", "choiceAdventure749", "choiceAdventure753", "choiceAdventure771", "choiceAdventure778", "choiceAdventure780", "choiceAdventure781", "choiceAdventure783", "choiceAdventure784", "choiceAdventure785", "choiceAdventure786", "choiceAdventure787", "choiceAdventure788", "choiceAdventure789", "choiceAdventure791", "choiceAdventure793", "choiceAdventure794", "choiceAdventure795", "choiceAdventure796", "choiceAdventure797", "choiceAdventure803", "choiceAdventure805", "choiceAdventure808", "choiceAdventure809", "choiceAdventure813", "choiceAdventure815", "choiceAdventure830", "choiceAdventure832", "choiceAdventure833", "choiceAdventure834", "choiceAdventure835", "choiceAdventure837", "choiceAdventure838", "choiceAdventure839", "choiceAdventure840", "choiceAdventure841", "choiceAdventure842", "choiceAdventure851", "choiceAdventure852", "choiceAdventure853", "choiceAdventure854", "choiceAdventure855", "choiceAdventure856", "choiceAdventure857", "choiceAdventure858", "choiceAdventure866", "choiceAdventure873", "choiceAdventure875", "choiceAdventure876", "choiceAdventure877", "choiceAdventure878", "choiceAdventure879", "choiceAdventure880", "choiceAdventure881", "choiceAdventure882", "choiceAdventure888", "choiceAdventure889", "choiceAdventure918", "choiceAdventure919", "choiceAdventure920", "choiceAdventure921", "choiceAdventure923", "choiceAdventure924", "choiceAdventure925", "choiceAdventure926", "choiceAdventure927", "choiceAdventure928", "choiceAdventure929", "choiceAdventure930", "choiceAdventure931", "choiceAdventure932", "choiceAdventure940", "choiceAdventure941", "choiceAdventure942", "choiceAdventure943", "choiceAdventure944", "choiceAdventure945", "choiceAdventure946", "choiceAdventure950", "choiceAdventure955", "choiceAdventure957", "choiceAdventure958", "choiceAdventure959", "choiceAdventure960", "choiceAdventure961", "choiceAdventure962", "choiceAdventure963", "choiceAdventure964", "choiceAdventure965", "choiceAdventure966", "choiceAdventure970", "choiceAdventure973", "choiceAdventure974", "choiceAdventure975", "choiceAdventure976", "choiceAdventure977", "choiceAdventure979", "choiceAdventure980", "choiceAdventure981", "choiceAdventure982", "choiceAdventure983", "choiceAdventure988", "choiceAdventure989", "choiceAdventure993", "choiceAdventure998", "choiceAdventure1000", "choiceAdventure1003", "choiceAdventure1005", "choiceAdventure1006", "choiceAdventure1007", "choiceAdventure1008", "choiceAdventure1009", "choiceAdventure1010", "choiceAdventure1011", "choiceAdventure1012", "choiceAdventure1013", "choiceAdventure1015", "choiceAdventure1016", "choiceAdventure1017", "choiceAdventure1018", "choiceAdventure1019", "choiceAdventure1020", "choiceAdventure1021", "choiceAdventure1022", "choiceAdventure1023", "choiceAdventure1026", "choiceAdventure1027", "choiceAdventure1028", "choiceAdventure1029", "choiceAdventure1030", "choiceAdventure1031", "choiceAdventure1032", "choiceAdventure1033", "choiceAdventure1034", "choiceAdventure1035", "choiceAdventure1036", "choiceAdventure1037", "choiceAdventure1038", "choiceAdventure1039", "choiceAdventure1040", "choiceAdventure1041", "choiceAdventure1042", "choiceAdventure1044", "choiceAdventure1045", "choiceAdventure1046", "choiceAdventure1048", "choiceAdventure1051", "choiceAdventure1052", "choiceAdventure1053", "choiceAdventure1054", "choiceAdventure1055", "choiceAdventure1056", "choiceAdventure1057", "choiceAdventure1059", "choiceAdventure1060", "choiceAdventure1061", "choiceAdventure1062", "choiceAdventure1065", "choiceAdventure1067", "choiceAdventure1068", "choiceAdventure1069", "choiceAdventure1070", "choiceAdventure1071", "choiceAdventure1073", "choiceAdventure1077", "choiceAdventure1080", "choiceAdventure1081", "choiceAdventure1082", "choiceAdventure1083", "choiceAdventure1084", "choiceAdventure1085", "choiceAdventure1091", "choiceAdventure1094", "choiceAdventure1095", "choiceAdventure1096", "choiceAdventure1097", "choiceAdventure1102", "choiceAdventure1106", "choiceAdventure1107", "choiceAdventure1108", "choiceAdventure1110", "choiceAdventure1114", "choiceAdventure1115", "choiceAdventure1116", "choiceAdventure1118", "choiceAdventure1119", "choiceAdventure1120", "choiceAdventure1121", "choiceAdventure1122", "choiceAdventure1123", "choiceAdventure1171", "choiceAdventure1172", "choiceAdventure1173", "choiceAdventure1174", "choiceAdventure1175", "choiceAdventure1193", "choiceAdventure1195", "choiceAdventure1196", "choiceAdventure1197", "choiceAdventure1198", "choiceAdventure1199", "choiceAdventure1202", "choiceAdventure1203", "choiceAdventure1204", "choiceAdventure1205", "choiceAdventure1206", "choiceAdventure1207", "choiceAdventure1208", "choiceAdventure1209", "choiceAdventure1210", "choiceAdventure1211", "choiceAdventure1212", "choiceAdventure1213", "choiceAdventure1214", "choiceAdventure1215", "choiceAdventure1219", "choiceAdventure1222", "choiceAdventure1223", "choiceAdventure1224", "choiceAdventure1225", "choiceAdventure1226", "choiceAdventure1227", "choiceAdventure1228", "choiceAdventure1229", "choiceAdventure1236", "choiceAdventure1237", "choiceAdventure1238", "choiceAdventure1239", "choiceAdventure1240", "choiceAdventure1241", "choiceAdventure1242", "choiceAdventure1243", "choiceAdventure1244", "choiceAdventure1245", "choiceAdventure1246", "choiceAdventure1247", "choiceAdventure1248", "choiceAdventure1249", "choiceAdventure1250", "choiceAdventure1251", "choiceAdventure1252", "choiceAdventure1253", "choiceAdventure1254", "choiceAdventure1255", "choiceAdventure1256", "choiceAdventure1266", "choiceAdventure1280", "choiceAdventure1281", "choiceAdventure1282", "choiceAdventure1283", "choiceAdventure1284", "choiceAdventure1285", "choiceAdventure1286", "choiceAdventure1287", "choiceAdventure1288", "choiceAdventure1289", "choiceAdventure1290", "choiceAdventure1291", "choiceAdventure1292", "choiceAdventure1293", "choiceAdventure1294", "choiceAdventure1295", "choiceAdventure1296", "choiceAdventure1297", "choiceAdventure1298", "choiceAdventure1299", "choiceAdventure1300", "choiceAdventure1301", "choiceAdventure1302", "choiceAdventure1303", "choiceAdventure1304", "choiceAdventure1305", "choiceAdventure1307", "choiceAdventure1310", "choiceAdventure1312", "choiceAdventure1313", "choiceAdventure1314", "choiceAdventure1315", "choiceAdventure1316", "choiceAdventure1317", "choiceAdventure1318", "choiceAdventure1319", "choiceAdventure1321", "choiceAdventure1322", "choiceAdventure1323", "choiceAdventure1324", "choiceAdventure1325", "choiceAdventure1326", "choiceAdventure1327", "choiceAdventure1328", "choiceAdventure1332", "choiceAdventure1333", "choiceAdventure1335", "choiceAdventure1340", "choiceAdventure1341", "choiceAdventure1345", "choiceAdventure1389", "choiceAdventure1392", "choiceAdventure1397", "choiceAdventure1399", "choiceAdventure1405", "choiceAdventure1411", "choiceAdventure1415", "choiceAdventure1427", "choiceAdventure1428", "choiceAdventure1429", "choiceAdventure1430", "choiceAdventure1431", "choiceAdventure1432", "choiceAdventure1433", "choiceAdventure1434", "choiceAdventure1436", "choiceAdventure1460", "choiceAdventure1461", "choiceAdventure1467", "choiceAdventure1468", "choiceAdventure1469", "choiceAdventure1470", "choiceAdventure1471", "choiceAdventure1472", "choiceAdventure1473", "choiceAdventure1474", "choiceAdventure1475", "choiceAdventure1486", "choiceAdventure1487", "choiceAdventure1488", "choiceAdventure1489", "choiceAdventure1491", "choiceAdventure1494"];
var familiarProperties = ["commaFamiliar", "nextQuantumFamiliar", "stillsuitFamiliar"];
var statProperties = ["nsChallenge1", "snojoSetting"];
var phylumProperties = ["dnaSyringe", "locketPhylum", "redSnapperPhylum"];
;// CONCATENATED MODULE: ./node_modules/libram/dist/propertyTyping.js

var booleanPropertiesSet = new Set(booleanProperties);
var numericPropertiesSet = new Set(numericProperties);
var numericOrStringPropertiesSet = new Set(numericOrStringProperties);
var stringPropertiesSet = new Set(stringProperties);
var locationPropertiesSet = new Set(locationProperties);
var monsterPropertiesSet = new Set(monsterProperties);
var familiarPropertiesSet = new Set(familiarProperties);
var statPropertiesSet = new Set(statProperties);
var phylumPropertiesSet = new Set(phylumProperties);
/**
 * Determine whether a property has a boolean value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a boolean value
 */
function isBooleanProperty(property) {
  return booleanPropertiesSet.has(property);
}
/**
 * Determine whether a property has a numeric value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a numeric value
 */
function isNumericProperty(property) {
  return numericPropertiesSet.has(property);
}
/**
 * Determine whether a property has a numeric or string value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a numeric or string value
 */
function isNumericOrStringProperty(property) {
  return numericOrStringPropertiesSet.has(property);
}
/**
 * Determine whether a property has a string value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a string value
 */
function isStringProperty(property) {
  return stringPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Location value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Location value
 */
function isLocationProperty(property) {
  return locationPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Monster value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Monster value
 */
function isMonsterProperty(property) {
  return monsterPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Familiar value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Familiar value
 */
function isFamiliarProperty(property) {
  return familiarPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Stat value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Stat value
 */
function isStatProperty(property) {
  return statPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Phylum value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Phylum value
 */
function isPhylumProperty(property) {
  return phylumPropertiesSet.has(property);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/property.js
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


var createPropertyGetter = transform => (property, default_) => {
  var value = (0,external_kolmafia_namespaceObject.getProperty)(property);
  if (default_ !== undefined && value === "") {
    return default_;
  }
  return transform(value, property);
};
var createMafiaClassPropertyGetter = (Type, toType) => createPropertyGetter(value => {
  if (value === "") return null;
  var v = toType(value);
  return v === Type.none ? null : v;
});
var getString = createPropertyGetter(value => value);
var getCommaSeparated = createPropertyGetter(value => value.split(/, ?/));
var getBoolean = createPropertyGetter(value => value === "true");
var getNumber = createPropertyGetter(value => Number(value));
var getBounty = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Bounty, external_kolmafia_namespaceObject.toBounty);
var getClass = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Class, external_kolmafia_namespaceObject.toClass);
var getCoinmaster = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Coinmaster, external_kolmafia_namespaceObject.toCoinmaster);
var getEffect = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Effect, external_kolmafia_namespaceObject.toEffect);
var getElement = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Element, external_kolmafia_namespaceObject.toElement);
var getFamiliar = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Familiar, external_kolmafia_namespaceObject.toFamiliar);
var getItem = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Item, external_kolmafia_namespaceObject.toItem);
var getLocation = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Location, external_kolmafia_namespaceObject.toLocation);
var getMonster = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Monster, external_kolmafia_namespaceObject.toMonster);
var getPhylum = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Phylum, external_kolmafia_namespaceObject.toPhylum);
var getServant = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Servant, external_kolmafia_namespaceObject.toServant);
var getSkill = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Skill, external_kolmafia_namespaceObject.toSkill);
var getSlot = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Slot, external_kolmafia_namespaceObject.toSlot);
var getStat = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Stat, external_kolmafia_namespaceObject.toStat);
var getThrall = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Thrall, external_kolmafia_namespaceObject.toThrall);
/**
 * Gets the value of a mafia property, either built in or custom
 *
 * @param property Name of the property
 * @param _default Default value for the property to take if not set
 * @returns Value of the mafia property
 */
function property_get(property, _default) {
  var value = getString(property);
  // Handle known properties.
  if (isBooleanProperty(property)) {
    var _getBoolean;
    return (_getBoolean = getBoolean(property, _default)) !== null && _getBoolean !== void 0 ? _getBoolean : false;
  } else if (isNumericProperty(property)) {
    var _getNumber;
    return (_getNumber = getNumber(property, _default)) !== null && _getNumber !== void 0 ? _getNumber : 0;
  } else if (isNumericOrStringProperty(property)) {
    return value.match(/^\d+$/) ? parseInt(value) : value;
  } else if (isLocationProperty(property)) {
    return getLocation(property, _default);
  } else if (isMonsterProperty(property)) {
    return getMonster(property, _default);
  } else if (isFamiliarProperty(property)) {
    return getFamiliar(property, _default);
  } else if (isStatProperty(property)) {
    return getStat(property, _default);
  } else if (isPhylumProperty(property)) {
    return getPhylum(property, _default);
  } else if (isStringProperty(property)) {
    return value;
  }
  // Not a KnownProperty from here on out.
  if (_default instanceof external_kolmafia_namespaceObject.Location) {
    return getLocation(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Monster) {
    return getMonster(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Familiar) {
    return getFamiliar(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Stat) {
    return getStat(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Phylum) {
    return getPhylum(property, _default);
  } else if (typeof _default === "boolean") {
    return value === "true" ? true : value === "false" ? false : _default;
  } else if (typeof _default === "number") {
    return value === "" ? _default : parseInt(value);
  } else if (value === "") {
    return _default === undefined ? "" : _default;
  } else {
    return value;
  }
}
/**
 * Sets the value of a mafia property, either built in or custom
 *
 * @param property Name of the property
 * @param value Value to give the property
 */
function _set(property, value) {
  var stringValue = value === null ? "" : value.toString();
  (0,external_kolmafia_namespaceObject.setProperty)(property, stringValue);
}
/**
 * Sets the value of a set of mafia properties
 *
 * @param properties Set of properties
 */

function setProperties(properties) {
  for (var _i = 0, _Object$entries = Object.entries(properties); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      prop = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    _set(prop, value);
  }
}
/**
 * Carries out a callback during which a set of properties will be set as supplied
 *
 * @param properties Properties to set during callback
 * @param callback Callback to execute with set properties
 * @returns Return value of the supplied callback
 */
function withProperties(properties, callback) {
  var propertiesBackup = Object.fromEntries(Object.entries(properties).map(_ref => {
    var _ref2 = _slicedToArray(_ref, 1),
      prop = _ref2[0];
    return [prop, property_get(prop)];
  }));
  setProperties(properties);
  try {
    return callback();
  } finally {
    setProperties(propertiesBackup);
  }
}
/**
 * Carries out a callback during which a property will be set as supplied
 *
 * @param property Property to set during callback
 * @param value Value to set property during callback
 * @param callback Callback to execute with set properties
 * @returns Return value of the supplied callback
 */
function withProperty(property, value, callback) {
  return withProperties(_defineProperty({}, property, value), callback);
}
/**
 * Carries out a callback during which a set of choices will be handled as supplied
 *
 * @param choices Choices to set during callback
 * @param callback Callback to execute with set choices
 * @returns Return value of the supplied callback
 */
function withChoices(choices, callback) {
  var properties = Object.fromEntries(Object.entries(choices).map(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 2),
      choice = _ref4[0],
      option = _ref4[1];
    return ["choiceAdventure".concat(choice), option];
  }));
  return withProperties(properties, callback);
}
/**
 * Carries out a callback during which a choice will be handled as supplied
 *
 * @param choice Choice to set during callback
 * @param value How to handle choice during callback
 * @param callback Callback to execute with set properties
 * @returns Return value of the supplied callback
 */
function withChoice(choice, value, callback) {
  return withChoices(_defineProperty({}, choice, value), callback);
}
var PropertiesManager = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function PropertiesManager() {
    _classCallCheck(this, PropertiesManager);
    _defineProperty(this, "properties", {});
  }
  _createClass(PropertiesManager, [{
    key: "storedValues",
    get: function get() {
      return this.properties;
    }
    /**
     * Sets a collection of properties to the given values, storing the old values.
     *
     * @param propertiesToSet A Properties object, keyed by property name.
     */
  }, {
    key: "set",
    value: function set(propertiesToSet) {
      for (var _i2 = 0, _Object$entries2 = Object.entries(propertiesToSet); _i2 < _Object$entries2.length; _i2++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
          propertyName = _Object$entries2$_i[0],
          propertyValue = _Object$entries2$_i[1];
        if (this.properties[propertyName] === undefined) {
          this.properties[propertyName] = property_get(propertyName);
        }
        _set(propertyName, propertyValue);
      }
    }
    /**
     * Sets a collection of choice adventure properties to the given values, storing the old values.
     *
     * @param choicesToSet An object keyed by choice adventure number.
     */
  }, {
    key: "setChoices",
    value: function setChoices(choicesToSet) {
      this.set(Object.fromEntries(Object.entries(choicesToSet).map(_ref5 => {
        var _ref6 = _slicedToArray(_ref5, 2),
          choiceNumber = _ref6[0],
          choiceValue = _ref6[1];
        return ["choiceAdventure".concat(choiceNumber), choiceValue];
      })));
    }
    /**
     * Sets a single choice adventure property to the given value, storing the old value.
     *
     * @param choiceToSet The number of the choice adventure to set the property for.
     * @param value The value to assign to that choice adventure.
     */
  }, {
    key: "setChoice",
    value: function setChoice(choiceToSet, value) {
      this.setChoices(_defineProperty({}, choiceToSet, value));
    }
    /**
     * Resets the given properties to their original stored value. Does not delete entries from the manager.
     *
     * @param properties Collection of properties to reset.
     */
  }, {
    key: "reset",
    value: function reset() {
      for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
        properties[_key] = arguments[_key];
      }
      for (var _i3 = 0, _properties = properties; _i3 < _properties.length; _i3++) {
        var property = _properties[_i3];
        var value = this.properties[property];
        if (value) {
          _set(property, value);
        }
      }
    }
    /**
     * Iterates over all stored values, setting each property back to its original stored value. Does not delete entries from the manager.
     */
  }, {
    key: "resetAll",
    value: function resetAll() {
      setProperties(this.properties);
    }
    /**
     * Stops storing the original values of inputted properties.
     *
     * @param properties Properties for the manager to forget.
     */
  }, {
    key: "clear",
    value: function clear() {
      for (var _len2 = arguments.length, properties = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        properties[_key2] = arguments[_key2];
      }
      for (var _i4 = 0, _properties2 = properties; _i4 < _properties2.length; _i4++) {
        var property = _properties2[_i4];
        if (this.properties[property]) {
          delete this.properties[property];
        }
      }
    }
    /**
     * Clears all properties.
     */
  }, {
    key: "clearAll",
    value: function clearAll() {
      this.properties = {};
    }
    /**
     * Increases a numeric property to the given value if necessary.
     *
     * @param property The numeric property we want to potentially raise.
     * @param value The minimum value we want that property to have.
     * @returns Whether we needed to change the property.
     */
  }, {
    key: "setMinimumValue",
    value: function setMinimumValue(property, value) {
      if (property_get(property, 0) < value) {
        this.set(_defineProperty({}, property, value));
        return true;
      }
      return false;
    }
    /**
     * Decrease a numeric property to the given value if necessary.
     *
     * @param property The numeric property we want to potentially lower.
     * @param value The maximum value we want that property to have.
     * @returns Whether we needed to change the property.
     */
  }, {
    key: "setMaximumValue",
    value: function setMaximumValue(property, value) {
      if (property_get(property, 0) > value) {
        this.set(_defineProperty({}, property, value));
        return true;
      }
      return false;
    }
    /**
     * Creates a new PropertiesManager with identical stored values to this one.
     *
     * @returns A new PropertiesManager, with identical stored values to this one.
     */
  }, {
    key: "clone",
    value: function clone() {
      var newGuy = new PropertiesManager();
      newGuy.properties = this.storedValues;
      return newGuy;
    }
    /**
     * Clamps a numeric property, modulating it up or down to fit within a specified range
     *
     * @param property The numeric property to clamp
     * @param min The lower bound for what we want the property to be allowed to be.
     * @param max The upper bound for what we want the property to be allowed to be.
     * @returns Whether we ended up changing the property or not.
     */
  }, {
    key: "clamp",
    value: function clamp(property, min, max) {
      if (max < min) return false;
      var start = property_get(property);
      this.setMinimumValue(property, min);
      this.setMaximumValue(property, max);
      return start !== property_get(property);
    }
    /**
     * Determines whether this PropertiesManager has identical stored values to another.
     *
     * @param other The PropertiesManager to compare to this one.
     * @returns Whether their StoredValues are identical.
     */
  }, {
    key: "equals",
    value: function equals(other) {
      var thisProps = Object.entries(this.storedValues);
      var otherProps = new Map(Object.entries(other.storedValues));
      if (thisProps.length !== otherProps.size) return false;
      for (var _i5 = 0, _thisProps = thisProps; _i5 < _thisProps.length; _i5++) {
        var _thisProps$_i = _slicedToArray(_thisProps[_i5], 2),
          propertyName = _thisProps$_i[0],
          propertyValue = _thisProps$_i[1];
        if (otherProps.get(propertyName) === propertyValue) return false;
      }
      return true;
    }
    /**
     * Merges a PropertiesManager onto this one, letting the input win in the event that both PropertiesManagers have a value stored.
     *
     * @param other The PropertiesManager to be merged onto this one.
     * @returns A new PropertiesManager with stored values from both its parents.
     */
  }, {
    key: "merge",
    value: function merge(other) {
      var newGuy = new PropertiesManager();
      newGuy.properties = _objectSpread(_objectSpread({}, this.properties), other.properties);
      return newGuy;
    }
    /**
     * Merges an arbitrary collection of PropertiesManagers, letting the rightmost PropertiesManager win in the event of verlap.
     *
     * @param mergees The PropertiesManagers to merge together.
     * @returns A PropertiesManager that is just an amalgam of all the constituents.
     */
  }], [{
    key: "merge",
    value: function merge() {
      for (var _len3 = arguments.length, mergees = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        mergees[_key3] = arguments[_key3];
      }
      if (mergees.length === 0) return new PropertiesManager();
      return mergees.reduce((a, b) => a.merge(b));
    }
  }]);
  return PropertiesManager;
}()));
;// CONCATENATED MODULE: ./node_modules/libram/dist/utils.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = utils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function utils_slicedToArray(arr, i) { return utils_arrayWithHoles(arr) || utils_iterableToArrayLimit(arr, i) || utils_unsupportedIterableToArray(arr, i) || utils_nonIterableRest(); }
function utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function utils_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function utils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || utils_unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return utils_arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return utils_arrayLikeToArray(arr); }
function utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Type guard against null value
 *
 * @param value Value that can be null
 * @returns Whether the value is not null or... not
 */
function notNull(value) {
  return value !== null;
}
/**
 * Parse string to number, stripping commas
 *
 * @param n Numberical string to parse
 * @returns Numerical value of string
 */
function parseNumber(n) {
  return Number.parseInt(n.replace(/,/g, ""));
}
/**
 * Clamp a number between lower and upper bounds.
 *
 * @param n Number to clamp.
 * @param min Lower bound.
 * @param max Upper bound.
 * @returns Clamped value
 */
function clamp(n, min, max) {
  return Math.max(min, Math.min(max, n));
}
/**
 * Split an {@param array} into {@param chunkSize} sized chunks
 *
 * @param array Array to split
 * @param chunkSize Size of chunk
 * @returns Split array
 */
function utils_chunk(array, chunkSize) {
  var result = [];
  for (var i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
/**
 * Count distinct values in an array
 *
 * @param array Array of values
 * @returns Map of distinct values to count
 */
function arrayToCountedMap(array) {
  if (!Array.isArray(array)) return array;
  var map = new Map();
  array.forEach(item => {
    map.set(item, (map.get(item) || 0) + 1);
  });
  return map;
}
/**
 * Turn map of distinct values to count into array of values
 *
 * @param map Map to turn into array
 * @returns Array of values
 */
function countedMapToArray(map) {
  var _ref;
  return (_ref = []).concat.apply(_ref, _toConsumableArray(_toConsumableArray(map).map(_ref2 => {
    var _ref3 = utils_slicedToArray(_ref2, 2),
      item = _ref3[0],
      quantity = _ref3[1];
    return Array(quantity).fill(item);
  })));
}
/**
 * Stringify a counted map
 *
 * @param map Map of counted values
 * @returns String representing map of counted values
 */
function countedMapToString(map) {
  return _toConsumableArray(map).map(_ref4 => {
    var _ref5 = utils_slicedToArray(_ref4, 2),
      item = _ref5[0],
      quantity = _ref5[1];
    return "".concat(quantity, " x ").concat(item);
  }).join(", ");
}
/**
 * Sum an array of numbers.
 *
 * @param addends Addends to sum.
 * @param x Property or mapping function of addends to sum
 * @returns Sum of numbers
 */
function utils_sum(addends, x) {
  return addends.reduce((subtotal, element) => subtotal + (typeof x === "function" ? x(element) : element[x]), 0);
}
/**
 * Sum array of numbers
 *
 * @param addends Numbers to sum
 * @returns Sum of numbers
 */
function sumNumbers(addends) {
  return utils_sum(addends, x => x);
}
/**
 * Checks if a given item is in a readonly array, acting as a typeguard.
 *
 * @param item Needle
 * @param array Readonly array haystack
 * @returns Whether the item is in the array, and narrows the type of the item.
 */
function utils_arrayContains(item, array) {
  return array.includes(item);
}
/**
 * Checks if two arrays contain the same elements in the same quantity.
 *
 * @param a First array for comparison
 * @param b Second array for comparison
 * @returns Whether the two arrays are equal, irrespective of order.
 */
function setEqual(a, b) {
  var sortedA = _toConsumableArray(a).sort();
  var sortedB = _toConsumableArray(b).sort();
  return a.length === b.length && sortedA.every((item, index) => item === sortedB[index]);
}
/**
 * Reverses keys and values for a given map
 *
 * @param map Map to invert
 * @returns Inverted map
 */
function invertMap(map) {
  var returnValue = new Map();
  var _iterator = _createForOfIteratorHelper(map),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = utils_slicedToArray(_step.value, 2),
        key = _step$value[0],
        value = _step$value[1];
      returnValue.set(value, key);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return returnValue;
}
/**
 * Splits a string by commas while also respecting escaping commas with a backslash
 *
 * @param str String to split
 * @returns List of tokens
 */
function splitByCommasWithEscapes(str) {
  var returnValue = [];
  var ignoreNext = false;
  var currentString = "";
  var _iterator2 = _createForOfIteratorHelper(str.split("")),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var char = _step2.value;
      if (char === "\\") {
        ignoreNext = true;
      } else {
        if (char == "," && !ignoreNext) {
          returnValue.push(currentString.trim());
          currentString = "";
        } else {
          currentString += char;
        }
        ignoreNext = false;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  returnValue.push(currentString.trim());
  return returnValue;
}
/**
 * Find the best element of an array, where "best" is defined by some given criteria.
 *
 * @param array The array to traverse and find the best element of.
 * @param optimizer Either a key on the objects we're looking at that corresponds to numerical values, or a function for mapping these objects to numbers. Essentially, some way of assigning value to the elements of the array.
 * @param reverse Make this true to find the worst element of the array, and false to find the best. Defaults to false.
 * @returns Best element by optimizer function
 */
function maxBy(array, optimizer) {
  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (!array.length) throw new Error("Cannot call maxBy on an empty array!");
  if (typeof optimizer === "function") {
    return _toConsumableArray(array).reduce((_ref6, other) => {
      var value = _ref6.value,
        item = _ref6.item;
      var otherValue = optimizer(other);
      return value >= otherValue !== reverse ? {
        value: value,
        item: item
      } : {
        value: otherValue,
        item: other
      };
    }, {
      item: array[0],
      value: optimizer(array[0])
    }).item;
  } else {
    return array.reduce((a, b) => a[optimizer] >= b[optimizer] !== reverse ? a : b);
  }
}
/**
 * Compare arrays shallowly
 *
 * @param left One array to compare
 * @param right The other array to compare
 * @returns Whether the two arrays are shallowly equal
 */
function arrayEquals(left, right) {
  if (left.length !== right.length) return false;
  return left.every((element, index) => element === right[index]);
}
/**
 * Used to collapse a Delayed<T> object into an entity of type "T" as represented by the object.
 *
 * @param delayedObject Object of type Delayed<T> that represents either a value of type T or a function returning a value of type T.
 * @returns The return value of the function, if delayedObject is a function. Otherwise, this returns the original element.
 */
function undelay(delayedObject) {
  return typeof delayedObject === "function" ? delayedObject() : delayedObject;
}
/**
 * Makes a byX function, like byStat or byClass
 *
 * @param source A method for finding your stat, or class, or whatever X is in this context
 * @returns A function akin to byStat or byClass; it accepts an object that either is "complete" in the sense that it has a key for every conceivable value, or contains a `default` parameter. If an inappropriate input is provided, returns undefined.
 */
function makeByXFunction(source) {
  return function (options) {
    var _options$val;
    var val = undelay(source);
    if ("default" in options) return (_options$val = options[val]) !== null && _options$val !== void 0 ? _options$val : options.default;
    return options[val];
  };
}
/**
 * Flattens an array. Basically replacing Array.prototype.flat for which Rhino doesn't yet have an implementation
 *
 * @param arr Array to flatten
 * @param depth Number of layers to flatten by; Infinity for a fully flat array
 * @returns Flattened array
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function utils_flat(arr) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
  var flatArray = [];
  var _iterator3 = _createForOfIteratorHelper(arr),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var item = _step3.value;
      if (Array.isArray(item) && depth > 0) {
        flatArray = flatArray.concat(utils_flat(item, depth - 1));
      } else {
        flatArray.push(item);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return flatArray;
}
/**
 * @param array Array to select from
 * @returns Random item from array
 */
function random(array) {
  return array[Math.floor(Math.random() * array.length)];
}
/**
 * Title cases a single word
 *
 * @param word Word to transform
 * @returns Word in title case
 */
var tc = word => word.charAt(0).toUpperCase() + word.slice(1);
;// CONCATENATED MODULE: ./node_modules/libram/dist/template-string.js


var concatTemplateString = function concatTemplateString(literals) {
  for (var _len = arguments.length, placeholders = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    placeholders[_key - 1] = arguments[_key];
  }
  return literals.raw.reduce((acc, literal, i) => {
    var _placeholders$i;
    return acc + literal + ((_placeholders$i = placeholders[i]) !== null && _placeholders$i !== void 0 ? _placeholders$i : "");
  }, "");
};
var handleTypeGetError = (Type, error) => {
  var message = "".concat(error);
  var match = message.match(RegExp("Bad ".concat(Type.name.toLowerCase(), " value: .*")));
  if (match) {
    (0,external_kolmafia_namespaceObject.print)("".concat(match[0], "; if you're certain that this ").concat(Type.name, " exists and is spelled correctly, please update KoLMafia"), "red");
  } else {
    (0,external_kolmafia_namespaceObject.print)(message);
  }
};
var createSingleConstant = Type => {
  var tagFunction = function tagFunction(literals) {
    for (var _len2 = arguments.length, placeholders = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      placeholders[_key2 - 1] = arguments[_key2];
    }
    var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));
    try {
      return Type.get(input);
    } catch (error) {
      handleTypeGetError(Type, error);
    }
    (0,external_kolmafia_namespaceObject.abort)();
  };
  tagFunction.none = Type.none;
  return tagFunction;
};
var createPluralConstant = Type => {
  var tagFunction = function tagFunction(literals) {
    for (var _len3 = arguments.length, placeholders = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      placeholders[_key3 - 1] = arguments[_key3];
    }
    var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));
    if (input === "") {
      return Type.all();
    }
    try {
      return Type.get(splitByCommasWithEscapes(input));
    } catch (error) {
      handleTypeGetError(Type, error);
    }
    (0,external_kolmafia_namespaceObject.abort)();
  };
  tagFunction.all = () => Type.all();
  return tagFunction;
};
/**
 * A Bounty specified by name.
 *
 * @category In-game constant
 */
var $bounty = createSingleConstant(external_kolmafia_namespaceObject.Bounty);
/**
 * A list of Bounties specified by a comma-separated list of names.
 * For a list of all possible Bounties, leave the template string blank.
 *
 * @category In-game constant
 */
var $bounties = createPluralConstant(external_kolmafia_namespaceObject.Bounty);
/**
 * A Class specified by name.
 *
 * @category In-game constant
 */
var template_string_$class = createSingleConstant(external_kolmafia_namespaceObject.Class);
/**
 * A list of Classes specified by a comma-separated list of names.
 * For a list of all possible Classes, leave the template string blank.
 *
 * @category In-game constant
 */
var $classes = createPluralConstant(external_kolmafia_namespaceObject.Class);
/**
 * A Coinmaster specified by name.
 *
 * @category In-game constant
 */
var $coinmaster = createSingleConstant(external_kolmafia_namespaceObject.Coinmaster);
/**
 * A list of Coinmasters specified by a comma-separated list of names.
 * For a list of all possible Coinmasters, leave the template string blank.
 *
 * @category In-game constant
 */
var $coinmasters = createPluralConstant(external_kolmafia_namespaceObject.Coinmaster);
/**
 * An Effect specified by name.
 *
 * @category In-game constant
 */
var $effect = createSingleConstant(external_kolmafia_namespaceObject.Effect);
/**
 * A list of Effects specified by a comma-separated list of names.
 * For a list of all possible Effects, leave the template string blank.
 *
 * @category In-game constant
 */
var $effects = createPluralConstant(external_kolmafia_namespaceObject.Effect);
/**
 * An Element specified by name.
 *
 * @category In-game constant
 */
var $element = createSingleConstant(external_kolmafia_namespaceObject.Element);
/**
 * A list of Elements specified by a comma-separated list of names.
 * For a list of all possible Elements, leave the template string blank.
 *
 * @category In-game constant
 */
var $elements = createPluralConstant(external_kolmafia_namespaceObject.Element);
/**
 * A Familiar specified by name.
 *
 * @category In-game constant
 */
var template_string_$familiar = createSingleConstant(external_kolmafia_namespaceObject.Familiar);
/**
 * A list of Familiars specified by a comma-separated list of names.
 * For a list of all possible Familiars, leave the template string blank.
 *
 * @category In-game constant
 */
var $familiars = createPluralConstant(external_kolmafia_namespaceObject.Familiar);
/**
 * An Item specified by name.
 *
 * @category In-game constant
 */
var template_string_$item = createSingleConstant(external_kolmafia_namespaceObject.Item);
/**
 * A list of Items specified by a comma-separated list of names.
 * For a list of all possible Items, leave the template string blank.
 *
 * @category In-game constant
 */
var template_string_$items = createPluralConstant(external_kolmafia_namespaceObject.Item);
/**
 * A Location specified by name.
 *
 * @category In-game constant
 */
var $location = createSingleConstant(external_kolmafia_namespaceObject.Location);
/**
 * A list of Locations specified by a comma-separated list of names.
 * For a list of all possible Locations, leave the template string blank.
 *
 * @category In-game constant
 */
var $locations = createPluralConstant(external_kolmafia_namespaceObject.Location);
/**
 * A Monster specified by name.
 *
 * @category In-game constant
 */
var $monster = createSingleConstant(external_kolmafia_namespaceObject.Monster);
/**
 * A list of Monsters specified by a comma-separated list of names.
 * For a list of all possible Monsters, leave the template string blank.
 *
 * @category In-game constant
 */
var $monsters = createPluralConstant(external_kolmafia_namespaceObject.Monster);
/**
 * A Phylum specified by name.
 *
 * @category In-game constant
 */
var $phylum = createSingleConstant(external_kolmafia_namespaceObject.Phylum);
/**
 * A list of Phyla specified by a comma-separated list of names.
 * For a list of all possible Phyla, leave the template string blank.
 *
 * @category In-game constant
 */
var $phyla = createPluralConstant(external_kolmafia_namespaceObject.Phylum);
/**
 * A Servant specified by name.
 *
 * @category In-game constant
 */
var $servant = createSingleConstant(external_kolmafia_namespaceObject.Servant);
/**
 * A list of Servants specified by a comma-separated list of names.
 * For a list of all possible Servants, leave the template string blank.
 *
 * @category In-game constant
 */
var $servants = createPluralConstant(external_kolmafia_namespaceObject.Servant);
/**
 * A Skill specified by name.
 *
 * @category In-game constant
 */
var template_string_$skill = createSingleConstant(external_kolmafia_namespaceObject.Skill);
/**
 * A list of Skills specified by a comma-separated list of names.
 * For a list of all possible Skills, leave the template string blank.
 *
 * @category In-game constant
 */
var $skills = createPluralConstant(external_kolmafia_namespaceObject.Skill);
/**
 * A Slot specified by name.
 *
 * @category In-game constant
 */
var $slot = createSingleConstant(external_kolmafia_namespaceObject.Slot);
/**
 * A list of Slots specified by a comma-separated list of names.
 * For a list of all possible Slots, leave the template string blank.
 *
 * @category In-game constant
 */
var $slots = createPluralConstant(external_kolmafia_namespaceObject.Slot);
/**
 * A Stat specified by name.
 *
 * @category In-game constant
 */
var $stat = createSingleConstant(external_kolmafia_namespaceObject.Stat);
/**
 * A list of Stats specified by a comma-separated list of names.
 * For a list of all possible Stats, leave the template string blank.
 *
 * @category In-game constant
 */
var $stats = createPluralConstant(external_kolmafia_namespaceObject.Stat);
/**
 * A Thrall specified by name.
 *
 * @category In-game constant
 */
var $thrall = createSingleConstant(external_kolmafia_namespaceObject.Thrall);
/**
 * A list of Thralls specified by a comma-separated list of names.
 * For a list of all possible Thralls, leave the template string blank.
 *
 * @category In-game constant
 */
var $thralls = createPluralConstant(external_kolmafia_namespaceObject.Thrall);
/**
 * A Path specified by name.
 *
 * @category In-game constant
 */
var $path = createSingleConstant(external_kolmafia_namespaceObject.Path);
/**
 * A list of Paths specified by a comma-separated list of names.
 * For a list of all possible Paths, leave the template string blank.
 *
 * @category In-game constant
 */
var $paths = createPluralConstant(external_kolmafia_namespaceObject.Path);
;// CONCATENATED MODULE: ./node_modules/libram/dist/lib.js
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34;
function lib_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, lib_toPropertyKey(descriptor.key), descriptor); } }
function lib_createClass(Constructor, protoProps, staticProps) { if (protoProps) lib_defineProperties(Constructor.prototype, protoProps); if (staticProps) lib_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function lib_toPropertyKey(arg) { var key = lib_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function lib_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function lib_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function lib_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = lib_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function lib_slicedToArray(arr, i) { return lib_arrayWithHoles(arr) || lib_iterableToArrayLimit(arr, i) || lib_unsupportedIterableToArray(arr, i) || lib_nonIterableRest(); }
function lib_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function lib_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return lib_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return lib_arrayLikeToArray(o, minLen); }
function lib_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function lib_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function lib_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
/** @module GeneralLibrary */





/**
 * Determines the current maximum Accordion Thief songs the player can have in their head
 *
 * @category General
 * @returns Maximum number of songs for player
 */
function getSongLimit() {
  return 3 + (booleanModifier("Four Songs") ? 1 : 0) + numericModifier("Additional Song");
}
/**
 * Determine whether the Skill or Effect provided is an Accordion Thief song
 *
 * @category General
 * @param skillOrEffect The Skill or Effect
 * @returns Whether it's a song
 */
function isSong(skillOrEffect) {
  if (skillOrEffect instanceof Effect && skillOrEffect.attributes.includes("song")) {
    return true;
  } else {
    var skill = skillOrEffect instanceof Effect ? toSkill(skillOrEffect) : skillOrEffect;
    return skill.class === $class(_templateObject || (_templateObject = _taggedTemplateLiteral(["Accordion Thief"]))) && skill.buff;
  }
}
/**
 * List all active Effects
 *
 * @category General
 * @returns List of Effects
 */
function getActiveEffects() {
  return Object.keys((0,external_kolmafia_namespaceObject.myEffects)()).map(e => external_kolmafia_namespaceObject.Effect.get(e));
}
/**
 * List currently active Accordion Thief songs
 *
 * @category General
 * @returns List of song Effects
 */
function getActiveSongs() {
  return getActiveEffects().filter(isSong);
}
/**
 * List number of active Accordion Thief songs
 *
 * @category General
 * @returns Number of songs
 */
function getSongCount() {
  return getActiveSongs().length;
}
/**
 * Determine whether player can remember another Accordion Thief song
 *
 * @category General
 * @param quantity Number of songs to test the space for
 * @returns Whether player can remember another song
 */
function canRememberSong() {
  var quantity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  return getSongLimit() - getSongCount() >= quantity;
}
/**
 * Determine the locations in which the given monster can be encountered naturally
 *
 * @category General
 * @param monster Monster to find
 * @returns Locations for monster
 */
function getMonsterLocations(monster) {
  return Location.all().filter(location => monster.name in appearanceRates(location));
}
/**
 * Determine the player's remaining liver space
 *
 * @category General
 * @returns Remaining liver space
 */
function getRemainingLiver() {
  return inebrietyLimit() - myInebriety();
}
/**
 * Determine the player's remaining stomach space
 *
 * @category General
 * @returns Remaining stomach space
 */
function getRemainingStomach() {
  return fullnessLimit() - myFullness();
}
/**
 * Determine the player's remaining spleen space
 *
 * @category General
 * @returns Remaining spleen space
 */
function getRemainingSpleen() {
  return spleenLimit() - mySpleenUse();
}
/**
 * Determine whether the player "has" any entity which one could feasibly "have".
 *
 * @category General
 * @param thing Thing to check
 * @param quantity Minimum quantity the player must have to pass
 * @returns Whether the player meets the requirements of owning the supplied thing
 */
function have(thing) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  if (thing instanceof external_kolmafia_namespaceObject.Effect) {
    return (0,external_kolmafia_namespaceObject.haveEffect)(thing) >= quantity;
  }
  if (thing instanceof external_kolmafia_namespaceObject.Familiar) {
    return (0,external_kolmafia_namespaceObject.haveFamiliar)(thing);
  }
  if (thing instanceof external_kolmafia_namespaceObject.Item) {
    return (0,external_kolmafia_namespaceObject.availableAmount)(thing) >= quantity;
  }
  if (thing instanceof external_kolmafia_namespaceObject.Servant) {
    return (0,external_kolmafia_namespaceObject.haveServant)(thing);
  }
  if (thing instanceof external_kolmafia_namespaceObject.Skill) {
    return (0,external_kolmafia_namespaceObject.haveSkill)(thing);
  }
  if (thing instanceof external_kolmafia_namespaceObject.Thrall) {
    var thrall = (0,external_kolmafia_namespaceObject.myThrall)();
    return thrall.id === thing.id && thrall.level >= quantity;
  }
  return false;
}
/**
 * Determine whether a given item is in the player's campground
 *
 * @category General
 * @param item The Item KoLmafia uses to represent the campground item
 * @returns Whether the item is in the campground
 */
function lib_haveInCampground(item) {
  return Object.keys(getCampground()).map(i => Item.get(i)).includes(item);
}
var Wanderer;
(function (Wanderer) {
  Wanderer["Digitize"] = "Digitize Monster";
  Wanderer["Enamorang"] = "Enamorang Monster";
  Wanderer["Familiar"] = "Familiar";
  Wanderer["Holiday"] = "Holiday Monster";
  Wanderer["Kramco"] = "Kramco";
  Wanderer["Nemesis"] = "Nemesis Assassin";
  Wanderer["Portscan"] = "portscan.edu";
  Wanderer["Romantic"] = "Romantic Monster";
  Wanderer["Vote"] = "Vote Monster";
})(Wanderer || (Wanderer = {}));
var deterministicWanderers = [Wanderer.Digitize, Wanderer.Portscan];
/**
 * Determine whether the player has the specified counter
 *
 * @param counterName Name of the counter
 * @param minTurns Minimum turns the counter is set to
 * @param maxTurns Maximum turns the counter is set to
 * @category General
 * @returns Whether player has the counter
 */
function haveCounter(counterName) {
  var minTurns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var maxTurns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
  return getCounters(counterName, minTurns, maxTurns) === counterName;
}
/**
 * Determine whether the player has the specified wanderer's counter
 *
 * @param wanderer Wanderer to check
 * @category Wanderers
 * @returns Whether player has the wanderer counter
 */
function haveWandererCounter(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer);
  }
  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  return haveCounter(begin) || haveCounter(end);
}
/**
 * Determine whether the player will encounter a vote wanderer on the next turn,
 * providing an "I Voted!" sticker is equipped.
 *
 * @category Wanderers
 * @returns Whether the vote wanderer is due
 */
function isVoteWandererNow() {
  return totalTurnsPlayed() % 11 === 1 && get("lastVoteMonsterTurn") < totalTurnsPlayed();
}
/**
 * Tells us whether we can expect a given wanderer now. Behaves differently
 * for different types of wanderer.
 *
 * - For deterministic wanderers, return whether the player will encounter
 *   the queried wanderer on the next turn
 *
 * - For variable wanderers (window), return whether the player is within
 *   an encounter window for the queried wanderer
 *
 * - For variable wanderers (chance per turn), returns true unless the player
 *   has exhausted the number of wanderers possible
 *
 * @category Wanderers
 * @param wanderer Wanderer to check
 * @returns Whether the wanderer is due
 */
function isWandererNow(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer, 0, 0);
  }
  if (wanderer === Wanderer.Kramco) {
    return true;
  }
  if (wanderer === Wanderer.Vote) {
    return isVoteWandererNow();
  }
  if (wanderer === Wanderer.Familiar) {
    return get("_hipsterAdv") < 7;
  }
  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  return !haveCounter(begin, 1) && haveCounter(end);
}
/**
 * Determines the chance the player will encounter a sausage goblin on the
 * next turn, providing the Kramco Sausage-o-Matic is equipped.
 *
 * @category Wanderers
 * @returns Chance that the sausage goblin is due (as a number between 0 and 1)
 */
function getKramcoWandererChance() {
  var fights = property_get("_sausageFights");
  var lastFight = property_get("_lastSausageMonsterTurn");
  var totalTurns = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
  if (fights < 1) {
    return lastFight === totalTurns && (0,external_kolmafia_namespaceObject.myTurncount)() < 1 ? 0.5 : 1.0;
  }
  var turnsSinceLastFight = totalTurns - lastFight;
  return Math.min(1.0, (turnsSinceLastFight + 1) / (5 + fights * 3 + Math.pow(Math.max(0, fights - 5), 3)));
}
/**
 * Determines the chance the player will encounter an Artistic Goth Kid or
 * Mini-Hipster wanderer on the next turn, providing a familiar is equipped.
 *
 * NOTE: You must complete one combat with the Artistic Goth Kid before you
 * can encounter any wanderers. Consequently,ƒ the first combat with the
 * Artist Goth Kid is effectively 0% chance to encounter a wanderer.
 *
 * @category Wanderers
 * @returns Chance that the familiar wanderer is due (as a number between 0 and 1)
 */
function getFamiliarWandererChance() {
  var totalFights = get("_hipsterAdv");
  var probability = [0.5, 0.4, 0.3, 0.2];
  if (totalFights < 4) {
    return probability[totalFights];
  }
  return totalFights > 7 ? 0.0 : 0.1;
}
/**
 * Determines the chance the player will encounter the specified wanderer
 * on the next turn.
 *
 * @category Wanderers
 * @param wanderer Wanderer to check
 * @returns Chance that the specified wanderer is due (as a number between 0 and 1)
 */
function getWandererChance(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer, 0, 0) ? 1.0 : 0.0;
  }
  if (wanderer === Wanderer.Kramco) {
    getKramcoWandererChance();
  }
  if (wanderer === Wanderer.Vote) {
    return isVoteWandererNow() ? 1.0 : 0.0;
  }
  if (wanderer === Wanderer.Familiar) {
    getFamiliarWandererChance();
  }
  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  if (haveCounter(begin, 1, 100)) {
    return 0.0;
  }
  var counters = get("relayCounters");
  var re = new RegExp("(\\d+):" + end);
  var matches = counters.match(re);
  if (matches && matches.length === 2) {
    var window = Number.parseInt(matches[1]) - myTurncount();
    return 1.0 / window;
  }
  return 0.0;
}
/**
 * Determines whether the player's current familiar is equal to the one supplied
 *
 * @category General
 * @param familiar Familiar to check
 * @returns Whether it is the player's current familiar
 */
function isCurrentFamiliar(familiar) {
  return myFamiliar() === familiar;
}
/**
 * Determines the fold group (if any) of which the given item is a part
 *
 * @category General
 * @param item Item that is part of the required fold group
 * @returns List of items in the fold group
 */
function getFoldGroup(item) {
  return Object.entries((0,external_kolmafia_namespaceObject.getRelated)(item, "fold")).sort((_ref, _ref2) => {
    var _ref3 = lib_slicedToArray(_ref, 2),
      a = _ref3[1];
    var _ref4 = lib_slicedToArray(_ref2, 2),
      b = _ref4[1];
    return a - b;
  }).map(_ref5 => {
    var _ref6 = lib_slicedToArray(_ref5, 1),
      i = _ref6[0];
    return external_kolmafia_namespaceObject.Item.get(i);
  });
}
/**
 * Determines the zap group (if any) of which the given item is a part
 *
 * @category General
 * @param item Item that is part of the required zap group
 * @returns List of items in the zap group
 */
function getZapGroup(item) {
  return Object.keys(getRelated(item, "zap")).map(i => Item.get(i));
}
/**
 * Get a map of banished monsters keyed by what banished them
 *
 * @category General
 * @returns Map of banished monsters
 */
function getBanishedMonsters() {
  var banishes = chunk(get("banishedMonsters").split(":"), 3);
  var result = new Map();
  var _iterator = lib_createForOfIteratorHelper(banishes),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = lib_slicedToArray(_step.value, 2),
        foe = _step$value[0],
        banisher = _step$value[1];
      if (foe === undefined || banisher === undefined) break;
      // toItem doesn"t error if the item doesn"t exist, so we have to use that.
      var banisherItem = toItem(banisher);
      if (banisher.toLowerCase() === "saber force") {
        result.set($skill(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Use the Force"]))), Monster.get(foe));
      } else if (banisher.toLowerCase() === "nanorhino") {
        result.set($skill(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Unleash Nanites"]))), Monster.get(foe));
      } else if ([Item.none, Item.get("training scroll:  Snokebomb"), Item.get("tomayohawk-style reflex hammer"), null].includes(banisherItem)) {
        if (Skill.get(banisher) === $skill.none) {
          break;
        } else {
          result.set(Skill.get(banisher), Monster.get(foe));
        }
      } else {
        result.set(banisherItem, Monster.get(foe));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
/**
 * Determines whether the item is usable
 *
 * This function will be an ongoing work in progress
 *
 * @param item Item to check
 * @returns Whether item is usable
 */
function canUse(item) {
  var path = myPath();
  if (path !== Path.get("Nuclear Autumn")) {
    if ($items(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Shrieking Weasel holo-record, Power-Guy 2000 holo-record, Lucky Strikes holo-record, EMD holo-record, Superdrifter holo-record, The Pigs holo-record, Drunk Uncles holo-record"]))).includes(item)) {
      return false;
    }
  }
  if (path === Path.get("G-Lover")) {
    if (!item.name.toLowerCase().includes("g")) return false;
  }
  if (path === Path.get("Bees Hate You")) {
    if (item.name.toLowerCase().includes("b")) return false;
  }
  return true;
}
/**
 * Turn KoLmafia `none`s to JavaScript `null`s
 *
 * @param thing Thing that can have a mafia "none" value
 * @returns The thing specified or `null`
 */
function noneToNull(thing) {
  if (thing instanceof Effect) {
    return thing === Effect.none ? null : thing;
  }
  if (thing instanceof Familiar) {
    return thing === Familiar.none ? null : thing;
  }
  if (thing instanceof Item) {
    return thing === Item.none ? null : thing;
  }
  return thing;
}
/**
 * Determine the average value from the sort of range that KoLmafia encodes as a string
 *
 * @param range KoLmafia-style range string
 * @returns Average value fo range
 */
function getAverage(range) {
  var _range$match;
  if (range.indexOf("-") < 0) return Number(range);
  var _ref7 = (_range$match = range.match(/(-?[0-9]+)-(-?[0-9]+)/)) !== null && _range$match !== void 0 ? _range$match : ["0", "0", "0"],
    _ref8 = lib_slicedToArray(_ref7, 3),
    lower = _ref8[1],
    upper = _ref8[2];
  return (Number(lower) + Number(upper)) / 2;
}
/**
 * Deternube tge average adventures expected from consuming an Item
 *
 * If item is not a consumable, will just return "0".
 *
 * @param item Consumable item
 * @returns Average aventures from consumable
 */
function getAverageAdventures(item) {
  return getAverage(item.adventures);
}
/**
 * Remove an effect
 *
 * @category General
 * @param effect Effect to remove
 * @returns Success
 */
function uneffect(effect) {
  return (0,external_kolmafia_namespaceObject.cliExecute)("uneffect ".concat(effect.name));
}
/**
 * Get both the name and id of a player from either their name or id
 *
 * @param idOrName Id or name of player
 * @returns Object containing id and name of player
 */
function getPlayerFromIdOrName(idOrName) {
  var id = typeof idOrName === "number" ? idOrName : parseInt(getPlayerId(idOrName));
  return {
    name: getPlayerName(id),
    id: id
  };
}
/**
 * Determine the step as a number for a given quest property.
 *
 * @param questName Name of quest property to check.
 * @returns Quest step
 */
function questStep(questName) {
  var stringStep = get(questName);
  if (stringStep === "unstarted") return -1;else if (stringStep === "started") return 0;else if (stringStep === "finished" || stringStep === "") return 999;else {
    if (stringStep.substring(0, 4) !== "step") {
      throw new Error("Quest state parsing error.");
    }
    return parseInt(stringStep.substring(4), 10);
  }
}
var EnsureError = /*#__PURE__*/function (_Error) {
  _inherits(EnsureError, _Error);
  var _super = _createSuper(EnsureError);
  function EnsureError(cause, reason) {
    var _this;
    lib_classCallCheck(this, EnsureError);
    _this = _super.call(this, "Failed to ensure ".concat(cause.name, "!").concat(reason ? " ".concat(reason) : ""));
    _this.name = "Ensure Error";
    return _this;
  }
  return lib_createClass(EnsureError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Tries to get an effect using the default method
 *
 * @param ef effect to try to get
 * @param turns turns to aim for; default of 1
 * @throws {EnsureError} Throws an error if the effect cannot be guaranteed
 */
function ensureEffect(ef) {
  var turns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  if ((0,external_kolmafia_namespaceObject.haveEffect)(ef) < turns) {
    if (ef.default === null) {
      throw new EnsureError(ef, "No default action");
    }
    if (!(0,external_kolmafia_namespaceObject.cliExecute)(ef.default) || (0,external_kolmafia_namespaceObject.haveEffect)(ef) === 0) {
      throw new EnsureError(ef);
    }
  }
}
var valueMap = new Map();
var MALL_VALUE_MODIFIER = 0.9;
/**
 * Determiens the average value (based on mallprice and autosell) of a collection of items
 *
 * @param items items whose value you care about
 * @returns Average value of items
 */
function getSaleValue() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }
  return items.map(item => {
    if (valueMap.has(item)) return valueMap.get(item) || 0;
    if (item.discardable) {
      valueMap.set(item, mallPrice(item) > Math.max(2 * autosellPrice(item), 100) ? MALL_VALUE_MODIFIER * mallPrice(item) : autosellPrice(item));
    } else {
      valueMap.set(item, mallPrice(item) > 100 ? MALL_VALUE_MODIFIER * mallPrice(item) : 0);
    }
    return valueMap.get(item) || 0;
  }).reduce((s, price) => s + price, 0) / items.length;
}
var Environment = {
  Outdoor: "outdoor",
  Indoor: "indoor",
  Underground: "underground",
  Underwater: "underwater"
};
/**
 * Determines the weight-coefficient of any leprechaunning that this familiar may find itself doing
 * Assumes the familiar is nude and thus fails for hatrack & pantsrack
 * For the Mutant Cactus Bud, returns the efficacy-multiplier instead
 *
 * @param familiar The familiar whose leprechaun multiplier you're interested in
 * @returns Weight-coefficient
 */
function findLeprechaunMultiplier(familiar) {
  if (familiar === $familiar(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Mutant Cactus Bud"])))) {
    return numericModifier(familiar, "Leprechaun Effectiveness", 1, $item.none);
  }
  if (familiar === $familiar(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
  var meatBonus = numericModifier(familiar, "Meat Drop", 1, $item.none);
  if (meatBonus === 0) return 0;
  return Math.pow(Math.sqrt(meatBonus / 2 + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
}
/**
 * Determines the weight-coefficient of any baby gravy fairying that this familiar may find itself doing
 * Assumes the familiar is nude and thus fails for hatrack & pantsrack
 * For the Mutant Fire Ant, returns the efficacy-multiplier instead
 *
 * @param familiar The familiar whose fairy multiplier you're interested in
 * @returns Weight-coefficient
 */
function findFairyMultiplier(familiar) {
  if (familiar === $familiar(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Mutant Fire Ant"])))) {
    return numericModifier(familiar, "Fairy Effectiveness", 1, $item.none);
  }
  if (familiar === $familiar(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
  var itemBonus = numericModifier(familiar, "Item Drop", 1, $item.none);
  if (itemBonus === 0) return 0;
  return Math.pow(Math.sqrt(itemBonus + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
}
var holidayWanderers = new Map([["El Dia De Los Muertos Borrachos", $monsters(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Novia Cad\xE1ver, Novio Cad\xE1ver, Padre Cad\xE1ver, Persona Inocente Cad\xE1ver"])))], ["Feast of Boris", $monsters(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Candied Yam Golem, Malevolent Tofurkey, Possessed Can of Cranberry Sauce, Stuffing Golem"])))], ["Talk Like a Pirate Day", $monsters(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["ambulatory pirate, migratory pirate, peripatetic pirate"])))]]);
/**
 * Get today's holiday wanderers
 *
 * @returns List of holiday wanderer Monsters
 */
function getTodaysHolidayWanderers() {
  return flat(holiday().split("/").map(holiday => {
    var _holidayWanderers$get;
    return (_holidayWanderers$get = holidayWanderers.get(holiday)) !== null && _holidayWanderers$get !== void 0 ? _holidayWanderers$get : [];
  }));
}
/**
 * Determines whether or not we can safely call visitUrl(), based on whether we're in a fight, multi-fight, choice, etc
 *
 * @returns Whether urls can be safely visited
 */
function canVisitUrl() {
  if (currentRound()) {
    logger.debug("Current round is ".concat(currentRound(), "; you're in combat."));
    return false;
  }
  if (inMultiFight()) {
    logger.debug("You're in a multifight.");
    return false;
  }
  if (choiceFollowsFight()) {
    logger.debug("A choice follows this fight.");
    return false;
  }
  if (handlingChoice()) {
    logger.debug("You're currently in a choice adventure");
    return false;
  }
  return true;
}
/**
 * Calculate damage taken from a specific element after factoring in resistance
 *
 * @param baseDamage Base damage
 * @param element Element
 * @returns damage after factoring in resistances
 */
function damageTakenByElement(baseDamage, element) {
  if (baseDamage < 0) return 1;
  var res = elementalResistance(element);
  return Math.max(1, Math.ceil(baseDamage - baseDamage * res / 100));
}
var telescopeStats = new Map([["standing around flexing their muscles and using grip exercisers", $stat(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Muscle"])))], ["sitting around playing chess and solving complicated-looking logic puzzles", $stat(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Mysticality"])))], ["all wearing sunglasses and dancing", $stat(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Moxie"])))]]);
var telescopeElements = new Map([["people, all of whom appear to be on fire", $element(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["hot"])))], ["people, surrounded by a cloud of eldritch mist", $element(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["spooky"])))], ["greasy-looking people furtively skulking around", $element(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["sleaze"])))], ["people, surrounded by garbage and clouds of flies", $element(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["stench"])))], ["people, clustered around a group of igloos", $element(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap1 = new Map([["smoldering bushes on the outskirts of a hedge maze", $element(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["hot"])))], ["creepy-looking black bushes on the outskirts of a hedge maze", $element(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["spooky"])))], ["purplish, greasy-looking hedges", $element(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["sleaze"])))], ["nasty-looking, dripping green bushes on the outskirts of a hedge maze", $element(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["stench"])))], ["frost-rimed bushes on the outskirts of a hedge maze", $element(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap2 = new Map([["smoke rising from deeper within the maze", $element(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["hot"])))], ["a miasma of eldritch vapors rising from deeper within the maze", $element(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["spooky"])))], ["a greasy purple cloud hanging over the center of the maze", $element(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["sleaze"])))], ["a cloud of green gas hovering over the maze", $element(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["stench"])))], ["wintry mists rising from deeper within the maze", $element(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap3 = new Map([["with lava slowly oozing out of it", $element(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["hot"])))], ["surrounded by creepy black mist", $element(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["spooky"])))], ["that occasionally vomits out a greasy ball of hair", $element(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["sleaze"])))], ["disgorging a really surprising amount of sewage", $element(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["stench"])))], ["occasionally disgorging a bunch of ice cubes", $element(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["cold"])))]]);
/**
 * Get information from telescope
 *
 * @returns An object with all information the telescope gives you about the sorceress's contests and maze
 */
function telescope() {
  return {
    statContest: telescopeStats.get(get("telescope1")),
    elementContest: telescopeElements.get(get("telescope2")),
    hedge1: hedgeTrap1.get(get("telescope3")),
    hedge2: hedgeTrap2.get(get("telescope4")),
    hedge3: hedgeTrap3.get(get("telescope5"))
  };
}
/**
 * Visit the desc_x.php page for a given thing
 *
 * @param thing Thing to examine
 * @returns Contents of desc_x.php page
 */
function examine(thing) {
  var url = thing instanceof Item ? "desc_item.php?whichitem=".concat(thing.descid) : thing instanceof Familiar ? "desc_familiar.php?which=".concat(thing.id) : thing instanceof Effect ? "desc_effect.php?whicheffect=".concat(thing.descid) : "desc_skill.php?whichskill=".concat(thing.id);
  return visitUrl(url);
}
/**
 * Picks an option based on your primestat
 *
 * @param options An object keyed by stat; it must either contain all stats, or have a `default` parameter.
 * @returns The option corresponding to your primestat.
 */
var byStat = makeByXFunction(() => (0,external_kolmafia_namespaceObject.myPrimestat)().toString());
/**
 * Picks an option based on your player class
 *
 * @param options An object keyed by player class; it must either contain all classes, or have a `default` parameter.
 * @returns The option corresponding to your player class.
 */
var byClass = makeByXFunction(() => (0,external_kolmafia_namespaceObject.myClass)().toString());
/**
 * Use an item with visitUrl instead of `use`; this is sometimes useful
 *
 * @param item The item you want to use
 * @returns The html of the resulting page
 */
function lib_directlyUse(item) {
  return (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?which=3&whichitem=".concat(item.id, "&pwd"));
}
/**
 * Empty a slot, or unequip all instances of a given equipped item
 *
 * @param thing The slot or item in question
 * @returns Whether we succeeded completely--`false` if we unequip some but not all instances of the item.
 */
function unequip(thing) {
  if (thing instanceof Slot) return equip(thing, $item.none);
  var failedSlots = Slot.all().filter(s => {
    // Filter the slot out if it doesn't contain the relevant item
    if (equippedItem(s) !== thing) return false;
    // Filter the slot out if we succeed at unequipping it
    return !unequip(thing);
    // This leaves only slots that do contain the item but that we failed to unequip
  });

  if (failedSlots.length) logger.debug("Failed to unequip ".concat(thing, " from slots ").concat(failedSlots.join(", ")));
  return failedSlots.length === 0;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/logger.js
var _defaultHandlers;
function logger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function logger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, logger_toPropertyKey(descriptor.key), descriptor); } }
function logger_createClass(Constructor, protoProps, staticProps) { if (protoProps) logger_defineProperties(Constructor.prototype, protoProps); if (staticProps) logger_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function logger_defineProperty(obj, key, value) { key = logger_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function logger_toPropertyKey(arg) { var key = logger_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function logger_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var LogLevels;
(function (LogLevels) {
  LogLevels[LogLevels["NONE"] = 0] = "NONE";
  LogLevels[LogLevels["ERROR"] = 1] = "ERROR";
  LogLevels[LogLevels["WARNING"] = 2] = "WARNING";
  LogLevels[LogLevels["INFO"] = 3] = "INFO";
  LogLevels[LogLevels["DEBUG"] = 4] = "DEBUG";
})(LogLevels || (LogLevels = {}));
var defaultHandlers = (_defaultHandlers = {}, logger_defineProperty(_defaultHandlers, LogLevels.INFO, message => {
  (0,external_kolmafia_namespaceObject.printHtml)("<b>[Libram Info]</b> ".concat(message));
  (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
  return;
}), logger_defineProperty(_defaultHandlers, LogLevels.WARNING, message => {
  (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: orange; color: white;\"><b>[Libram Warning]</b> ".concat(message, "</span>"));
  (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
  return;
}), logger_defineProperty(_defaultHandlers, LogLevels.ERROR, error => {
  (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: red; color: white;\"><b>[Libram Error]</b> ".concat(error.toString(), "</span>"));
  (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(error));
  return;
}), logger_defineProperty(_defaultHandlers, LogLevels.DEBUG, message => {
  (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: red; color: white;\"><b>[Libram Debug]</b> ".concat(message, "</span>"));
  (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
  return;
}), _defaultHandlers);
var Logger = /*#__PURE__*/function () {
  function Logger() {
    logger_classCallCheck(this, Logger);
    logger_defineProperty(this, "handlers", defaultHandlers);
  }
  logger_createClass(Logger, [{
    key: "level",
    get: function get() {
      return Logger.currentLevel;
    }
  }, {
    key: "setLevel",
    value: function setLevel(level) {
      Logger.currentLevel = level;
    }
  }, {
    key: "setHandler",
    value: function setHandler(level, callback) {
      this.handlers[level] = callback;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  }, {
    key: "log",
    value: function log(level, message) {
      if (this.level >= level) this.handlers[level](message);
    }
  }, {
    key: "info",
    value: function info(message) {
      this.log(LogLevels.INFO, message);
    }
  }, {
    key: "warning",
    value: function warning(message) {
      this.log(LogLevels.WARNING, message);
    }
  }, {
    key: "error",
    value: function error(message) {
      this.log(LogLevels.ERROR, message);
    }
  }, {
    key: "debug",
    value: function debug(message) {
      this.log(LogLevels.DEBUG, message);
    }
  }]);
  return Logger;
}();
logger_defineProperty(Logger, "currentLevel", LogLevels.ERROR);
/* harmony default export */ const dist_logger = (new Logger());
;// CONCATENATED MODULE: ./node_modules/libram/dist/Clan.js
function Clan_toConsumableArray(arr) { return Clan_arrayWithoutHoles(arr) || Clan_iterableToArray(arr) || Clan_unsupportedIterableToArray(arr) || Clan_nonIterableSpread(); }
function Clan_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Clan_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Clan_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Clan_arrayLikeToArray(arr); }
function Clan_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Clan_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function Clan_slicedToArray(arr, i) { return Clan_arrayWithHoles(arr) || Clan_iterableToArrayLimit(arr, i) || Clan_unsupportedIterableToArray(arr, i) || Clan_nonIterableRest(); }
function Clan_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Clan_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Clan_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Clan_arrayLikeToArray(o, minLen); }
function Clan_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Clan_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function Clan_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Clan_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Clan_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Clan_toPropertyKey(descriptor.key), descriptor); } }
function Clan_createClass(Constructor, protoProps, staticProps) { if (protoProps) Clan_defineProperties(Constructor.prototype, protoProps); if (staticProps) Clan_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Clan_defineProperty(obj, key, value) { key = Clan_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Clan_toPropertyKey(arg) { var key = Clan_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function Clan_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), Clan_setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { var i = g[name]; if ("number" == typeof i) groups[name] = result[i];else { for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) k++; groups[name] = result[i[k]]; } return groups; }, Object.create(null)); } return Clan_inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) { result.groups = buildGroups(result, this); var indices = result.indices; indices && (indices.groups = buildGroups(indices, this)); } return result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if ("string" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { var group = groups[name]; return "$" + (Array.isArray(group) ? group.join("$") : group); })); } if ("function" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }
function Clan_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Clan_setPrototypeOf(subClass, superClass); }
function Clan_setPrototypeOf(o, p) { Clan_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Clan_setPrototypeOf(o, p); }




var clanIdCache = {};
var toPlayerId = player => typeof player === "string" ? (0,external_kolmafia_namespaceObject.getPlayerId)(player) : player;
var LOG_FAX_PATTERN = /*#__PURE__*/_wrapRegExp(/(\d{2}\/\d{2}\/\d{2}, \d{2}:\d{2}(?:AM|PM): )<a [^>]+>([^<]+)<\/a>(?: faxed in a (.*?))<br>/, {
  monster: 3
});
var WHITELIST_DEGREE_PATTERN = /*#__PURE__*/_wrapRegExp(/(.*?) \(\xB0(\d+)\)/, {
  name: 1,
  degree: 2
});
var Clan = /*#__PURE__*/function () {
  function Clan(id, name) {
    Clan_classCallCheck(this, Clan);
    Clan_defineProperty(this, "id", void 0);
    Clan_defineProperty(this, "name", void 0);
    this.id = id;
    this.name = name;
  }
  Clan_createClass(Clan, [{
    key: "_check",
    value: function _check() {
      if (this.id !== (0,external_kolmafia_namespaceObject.getClanId)()) {
        throw new Error("You are no longer a member of this clan");
      }
    }
    /**
     * Join clan
     *
     * @returns Joined clan
     */
  }, {
    key: "join",
    value: function join() {
      return Clan.join(this.id);
    }
    /**
     * Check that this clan is the player's current clan
     *
     * @returns Whether this is the current clan
     */
  }, {
    key: "check",
    value: function check() {
      return (0,external_kolmafia_namespaceObject.visitUrl)("clan_hall.php").includes("<b>".concat(this.name, "</b>"));
    }
    /**
     * Determine the monster that is currently in the current clan's fax machine if any
     *
     * @returns The current fax monster
     */
  }, {
    key: "getCurrentFax",
    value: function getCurrentFax() {
      this._check();
      var logs = (0,external_kolmafia_namespaceObject.visitUrl)("clan_log.php");
      var lastFax = logs.match(LOG_FAX_PATTERN);
      if (!lastFax) return null;
      var _lastFax = Clan_slicedToArray(lastFax, 4),
        monsterName = _lastFax[3];
      if (!monsterName) return null;
      return external_kolmafia_namespaceObject.Monster.get(monsterName);
    }
    /**
     * List available ranks (name, degree and id) from the current clan
     *
     * @returns List of ranks
     */
  }, {
    key: "getRanks",
    value: function getRanks() {
      this._check();
      var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php");
      return (0,external_kolmafia_namespaceObject.xpath)(page, '//select[@name="level"]//option').map(option => {
        var validHtml = "<select>".concat(option, "</select>");
        var match = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//text()")[0].match(WHITELIST_DEGREE_PATTERN);
        var id = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//@value")[0];
        if (!match || !id) return null;
        var _match = Clan_slicedToArray(match, 3),
          name = _match[1],
          degree = _match[2];
        return {
          name: name,
          degree: Number.parseInt(degree),
          id: Number.parseInt(id)
        };
      }).filter(notNull);
    }
    /**
     * Add a player to the current clan's whitelist.
     * If the player is already in the whitelist this will change their rank or title.
     *
     * @param player Player id or name
     * @param rankName Rank to give the player. If not provided they will be given the lowest rank
     * @param title Title to give the player. If not provided, will be blank
     * @returns Success
     */
  }, {
    key: "addPlayerToWhitelist",
    value: function addPlayerToWhitelist(player, rankName) {
      var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      this._check();
      var playerId = toPlayerId(player);
      var ranks = this.getRanks();
      var rank = rankName ? ranks.find(r => r.name === rankName) : ranks.sort((a, b) => a.degree - b.degree)[0];
      if (!rank) return false;
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php?action=add&pwd&addwho=".concat(playerId, "&level=").concat(rank.id, "&title=").concat(title));
      return result.includes("added to whitelist.") || result.includes("That player is already on the whitelist");
    }
    /**
     * Remove a player from the current clan's whitelist
     *
     * @param player Player id or name
     * @returns Success
     */
  }, {
    key: "removePlayerFromWhitelist",
    value: function removePlayerFromWhitelist(player) {
      this._check();
      var playerId = toPlayerId(player);
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php?action=updatewl&pwd&who=".concat(playerId, "&remove=Remove"));
      return result.includes("Whitelist updated.");
    }
    /**
     * Return the amount of meat in the current clan's coffer
     *
     * @returns Amount of meat
     */
  }, {
    key: "getMeatInCoffer",
    value: function getMeatInCoffer() {
      this._check();
      var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_stash.php");
      var _ref = page.match(/Your <b>Clan Coffer<\/b> contains ([\d,]+) Meat./) || ["0", "0"],
        _ref2 = Clan_slicedToArray(_ref, 2),
        meat = _ref2[1];
      return parseNumber(meat);
    }
    /**
     * Add the given amount of meat to the current clan's coffer.
     *
     * @param amount Amount of meat to put in coffer
     * @returns Success
     */
  }, {
    key: "putMeatInCoffer",
    value: function putMeatInCoffer(amount) {
      this._check();
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_stash.php?pwd&action=contribute&howmuch=".concat(amount));
      return result.includes("You contributed");
    }
  }, {
    key: "take",
    value: function take(items) {
      this._check();
      var map = arrayToCountedMap(items);
      map.forEach((quantity, item) => {
        var needed = Math.max(0, quantity - (0,external_kolmafia_namespaceObject.availableAmount)(item));
        if (needed === 0) {
          return map.set(item, 0);
        }
        var foldGroup = getFoldGroup(item);
        var _iterator = Clan_createForOfIteratorHelper(foldGroup),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var foldable = _step.value;
            var quantityToFold = Math.min(needed, (0,external_kolmafia_namespaceObject.availableAmount)(foldable));
            for (var _i3 = 0; _i3 < quantityToFold; _i3++) {
              (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(item.name));
              needed--;
            }
            return map.set(item, needed);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        (0,external_kolmafia_namespaceObject.refreshStash)();
        for (var _i2 = 0, _arr2 = [item].concat(Clan_toConsumableArray(foldGroup)); _i2 < _arr2.length; _i2++) {
          var matchingItem = _arr2[_i2];
          var quantityToTake = Math.min(needed, (0,external_kolmafia_namespaceObject.stashAmount)(matchingItem));
          if (quantityToTake === 0) continue;
          // If we can't take from the stash, there's no sense in iterating through the whole fold group
          if (!(0,external_kolmafia_namespaceObject.takeStash)(quantityToTake, matchingItem)) return;
          if (matchingItem === item) {
            needed -= quantityToTake;
          } else {
            for (var i = 0; i < quantityToTake; i++) {
              (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(matchingItem.name));
              needed--;
            }
          }
        }
      });
      return Array.isArray(items) ? countedMapToArray(map) : map;
    }
  }, {
    key: "put",
    value: function put(items) {
      this._check();
      var map = arrayToCountedMap(items);
      if (!this.check()) throw new Error("Wanted to return ".concat(countedMapToString(map), " to ").concat(this.name, " but KoLmafia's clan data is out of sync"));
      map.forEach((quantity, item) => {
        (0,external_kolmafia_namespaceObject.retrieveItem)(quantity, item);
        var returned = Math.min(quantity, (0,external_kolmafia_namespaceObject.availableAmount)(item));
        (0,external_kolmafia_namespaceObject.putStash)(returned, item);
        map.set(item, quantity - returned);
      });
      return Array.isArray(items) ? countedMapToArray(map) : map;
    }
  }, {
    key: "withStash",
    value: function withStash(items, callback // eslint-disable-line @typescript-eslint/no-explicit-any
    ) {
      this._check();
      var map = arrayToCountedMap(items);
      return Clan._withStash(() => this.take(map), borrowed => this.put(borrowed), callback);
    }
  }], [{
    key: "_join",
    value: function _join(id) {
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("showclan.php?recruiter=1&whichclan=".concat(id, "&pwd&whichclan=").concat(id, "&action=joinclan&apply=Apply+to+this+Clan&confirm=on"));
      if (!result.includes("clanhalltop.gif")) {
        throw new Error("Could not join clan");
      }
      return Clan.get();
    }
  }, {
    key: "_withStash",
    value: function _withStash(borrowFn,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    returnFn,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
      var borrowed = borrowFn();
      var map = arrayToCountedMap(borrowed);
      try {
        return callback(borrowed);
      } finally {
        if (map.size > 0) {
          var returned = arrayToCountedMap(returnFn(borrowed));
          map.forEach((quantity, item) => {
            var remaining = quantity - (returned.get(item) || 0);
            if (remaining > 0) {
              map.set(item, remaining);
            } else {
              map.delete(item);
            }
          });
          if (map.size > 0) {
            dist_logger.error("Failed to return <b>".concat(countedMapToString(map), "</b> to <b>").concat(this.name, "</b> stash"));
          }
        }
      }
    }
    /**
     * Join a clan
     *
     * @param clanIdOrName Clan id or name
     * @returns Instance of joined clan
     */
  }, {
    key: "join",
    value: function join(clanIdOrName) {
      var clanId;
      if (typeof clanIdOrName === "string") {
        var clanName = clanIdOrName.toLowerCase();
        if (clanName === (0,external_kolmafia_namespaceObject.getClanName)().toLowerCase()) {
          return Clan.get();
        }
        if (!(clanName in clanIdCache)) {
          var clan = Clan.getWhitelisted().find(c => c.name.toLowerCase() === clanName);
          if (!clan) {
            throw new Error("Player is not whitelisted to clan");
          }
          clanIdCache[clanName] = clan.id;
        }
        clanId = clanIdCache[clanName];
      } else {
        clanId = clanIdOrName;
        if (clanId === (0,external_kolmafia_namespaceObject.getClanId)()) {
          return Clan.get();
        }
      }
      return Clan._join(clanId);
    }
    /**
     * Execute callback as a member of a clan and then restore prior membership
     *
     * @param clanIdOrName Clan id or name
     * @param callback Actions to carry out while member of specified can
     * @returns Return value from callback
     */
  }, {
    key: "with",
    value: function _with(clanIdOrName, callback) {
      var startingClan = Clan.get();
      var clan = Clan.join(clanIdOrName);
      try {
        return callback(clan);
      } finally {
        startingClan.join();
      }
    }
  }, {
    key: "withStash",
    value: function withStash(clanIdOrName, items,
    // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    callback // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    ) {
      return Clan._withStash(() => Clan.with(clanIdOrName, clan => clan.take(items)), borrowed => Clan.with(clanIdOrName, clan => clan.put(borrowed)), callback);
    }
    /**
     * Get the player's current clan
     *
     * @returns Player's clan
     */
  }, {
    key: "get",
    value: function get() {
      return new Clan((0,external_kolmafia_namespaceObject.getClanId)(), (0,external_kolmafia_namespaceObject.getClanName)());
    }
    /**
     * Get list of clans to which the player is whitelisted
     *
     * @returns List of clans
     */
  }, {
    key: "getWhitelisted",
    value: function getWhitelisted() {
      var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_signup.php");
      return (0,external_kolmafia_namespaceObject.xpath)(page, '//select[@name="whichclan"]//option').map(option => {
        var validHtml = "<select>".concat(option, "</select>");
        var id = Number.parseInt((0,external_kolmafia_namespaceObject.xpath)(validHtml, "//@value")[0]);
        var name = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//text()")[0];
        return new Clan(id, name);
      });
    }
  }]);
  return Clan;
}();
;// CONCATENATED MODULE: ./node_modules/libram/dist/maximize.js
var maximize_templateObject, maximize_templateObject2, maximize_templateObject3, maximize_templateObject4, maximize_templateObject5, maximize_templateObject6, maximize_templateObject7, maximize_templateObject8, maximize_templateObject9, maximize_templateObject10, maximize_templateObject11, maximize_templateObject12, maximize_templateObject13, maximize_templateObject14, maximize_templateObject15, maximize_templateObject16, maximize_templateObject17, maximize_templateObject18, maximize_templateObject19, maximize_templateObject20, maximize_templateObject21, maximize_templateObject22, maximize_templateObject23, maximize_templateObject24, maximize_templateObject25, maximize_templateObject26, maximize_templateObject27, maximize_templateObject28, maximize_templateObject29, maximize_templateObject30, maximize_templateObject31, maximize_templateObject32, maximize_templateObject33, maximize_templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48;
function maximize_slicedToArray(arr, i) { return maximize_arrayWithHoles(arr) || maximize_iterableToArrayLimit(arr, i) || maximize_unsupportedIterableToArray(arr, i) || maximize_nonIterableRest(); }
function maximize_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function maximize_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function maximize_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
function maximize_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, maximize_toPropertyKey(descriptor.key), descriptor); } }
function maximize_createClass(Constructor, protoProps, staticProps) { if (protoProps) maximize_defineProperties(Constructor.prototype, protoProps); if (staticProps) maximize_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function maximize_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function maximize_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = maximize_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function maximize_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function maximize_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function maximize_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? maximize_ownKeys(Object(source), !0).forEach(function (key) { maximize_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : maximize_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function maximize_defineProperty(obj, key, value) { key = maximize_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function maximize_toPropertyKey(arg) { var key = maximize_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function maximize_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function maximize_toConsumableArray(arr) { return maximize_arrayWithoutHoles(arr) || maximize_iterableToArray(arr) || maximize_unsupportedIterableToArray(arr) || maximize_nonIterableSpread(); }
function maximize_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function maximize_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return maximize_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return maximize_arrayLikeToArray(o, minLen); }
function maximize_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function maximize_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return maximize_arrayLikeToArray(arr); }
function maximize_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }




function toMaximizerName(_ref) {
  var name = _ref.name,
    id = _ref.id;
  return name.includes(";") ? "\xB6".concat(id) : name;
}
/**
 * Merges a partial set of maximizer options onto a full set maximizer options. We merge via overriding for all boolean properties and for onlySlot, and concat all other array properties.
 *
 * @param defaultOptions MaximizeOptions to use as a "base."
 * @param addendums Options to attempt to merge onto defaultOptions.
 * @returns Merged maximizer options
 */
function mergeMaximizeOptions(defaultOptions, addendums) {
  var _addendums$updateOnFa, _addendums$updateOnCa, _addendums$useOutfitC, _addendums$forceEquip, _addendums$preventEqu, _addendums$bonusEquip, _addendums$onlySlot, _addendums$preventSlo, _addendums$forceUpdat, _addendums$modes;
  return {
    updateOnFamiliarChange: (_addendums$updateOnFa = addendums.updateOnFamiliarChange) !== null && _addendums$updateOnFa !== void 0 ? _addendums$updateOnFa : defaultOptions.updateOnFamiliarChange,
    updateOnCanEquipChanged: (_addendums$updateOnCa = addendums.updateOnCanEquipChanged) !== null && _addendums$updateOnCa !== void 0 ? _addendums$updateOnCa : defaultOptions.updateOnCanEquipChanged,
    useOutfitCaching: (_addendums$useOutfitC = addendums.useOutfitCaching) !== null && _addendums$useOutfitC !== void 0 ? _addendums$useOutfitC : defaultOptions.useOutfitCaching,
    forceEquip: [].concat(maximize_toConsumableArray(defaultOptions.forceEquip), maximize_toConsumableArray((_addendums$forceEquip = addendums.forceEquip) !== null && _addendums$forceEquip !== void 0 ? _addendums$forceEquip : [])),
    preventEquip: [].concat(maximize_toConsumableArray(defaultOptions.preventEquip), maximize_toConsumableArray((_addendums$preventEqu = addendums.preventEquip) !== null && _addendums$preventEqu !== void 0 ? _addendums$preventEqu : [])).filter(item => {
      var _addendums$forceEquip2;
      return !defaultOptions.forceEquip.includes(item) && !((_addendums$forceEquip2 = addendums.forceEquip) !== null && _addendums$forceEquip2 !== void 0 && _addendums$forceEquip2.includes(item));
    }),
    bonusEquip: new Map([].concat(maximize_toConsumableArray(defaultOptions.bonusEquip), maximize_toConsumableArray((_addendums$bonusEquip = addendums.bonusEquip) !== null && _addendums$bonusEquip !== void 0 ? _addendums$bonusEquip : []))),
    onlySlot: (_addendums$onlySlot = addendums.onlySlot) !== null && _addendums$onlySlot !== void 0 ? _addendums$onlySlot : defaultOptions.onlySlot,
    preventSlot: [].concat(maximize_toConsumableArray(defaultOptions.preventSlot), maximize_toConsumableArray((_addendums$preventSlo = addendums.preventSlot) !== null && _addendums$preventSlo !== void 0 ? _addendums$preventSlo : [])),
    forceUpdate: (_addendums$forceUpdat = addendums.forceUpdate) !== null && _addendums$forceUpdat !== void 0 ? _addendums$forceUpdat : defaultOptions.forceUpdate,
    modes: maximize_objectSpread(maximize_objectSpread({}, defaultOptions.modes), (_addendums$modes = addendums.modes) !== null && _addendums$modes !== void 0 ? _addendums$modes : {})
  };
}
var defaultMaximizeOptions = {
  updateOnFamiliarChange: true,
  updateOnCanEquipChanged: true,
  useOutfitCaching: true,
  forceEquip: [],
  preventEquip: [],
  bonusEquip: new Map(),
  onlySlot: [],
  preventSlot: [],
  forceUpdate: false,
  modes: {}
};
/**
 *
 * @param options Default options for each maximizer run.
 * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
 * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
 * @param options.forceEquip Equipment to force-equip ("equip X").
 * @param options.preventEquip Equipment to prevent equipping ("-equip X").
 * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
 */
function setDefaultMaximizeOptions(options) {
  Object.assign(defaultMaximizeOptions, options);
}
var modeableCommands = ["backupcamera", "umbrella", "snowsuit", "edpiece", "retrocape", "parka"];
var modeableItems = {
  backupcamera: template_string_$item(maximize_templateObject || (maximize_templateObject = maximize_taggedTemplateLiteral(["backup camera"]))),
  umbrella: template_string_$item(maximize_templateObject2 || (maximize_templateObject2 = maximize_taggedTemplateLiteral(["unbreakable umbrella"]))),
  snowsuit: template_string_$item(maximize_templateObject3 || (maximize_templateObject3 = maximize_taggedTemplateLiteral(["Snow Suit"]))),
  edpiece: template_string_$item(maximize_templateObject4 || (maximize_templateObject4 = maximize_taggedTemplateLiteral(["The Crown of Ed the Undying"]))),
  retrocape: template_string_$item(maximize_templateObject5 || (maximize_templateObject5 = maximize_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"]))),
  parka: template_string_$item(maximize_templateObject6 || (maximize_templateObject6 = maximize_taggedTemplateLiteral(["Jurassic Parka"])))
};
var modeableState = {
  backupcamera: () => (0,external_kolmafia_namespaceObject.getProperty)("backupCameraMode"),
  umbrella: () => (0,external_kolmafia_namespaceObject.getProperty)("umbrellaState"),
  snowsuit: () => (0,external_kolmafia_namespaceObject.getProperty)("snowsuit"),
  edpiece: () => (0,external_kolmafia_namespaceObject.getProperty)("edPiece"),
  retrocape: () => (0,external_kolmafia_namespaceObject.getProperty)("retroCapeSuperhero") + " " + (0,external_kolmafia_namespaceObject.getProperty)("retroCapeWashingInstructions"),
  parka: () => (0,external_kolmafia_namespaceObject.getProperty)("parkaMode")
};
/**
 * Get set of current modes for modeables
 *
 * @returns Set of modes
 */
function getCurrentModes() {
  var modes = {};
  var _iterator = maximize_createForOfIteratorHelper(modeableCommands),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(modeableItems[key])) {
        modes[key] = modeableState[key]();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return modes;
}
/**
 * Apply set of modes
 *
 * @param modes Modes to apply
 */
function applyModes(modes) {
  var _iterator2 = maximize_createForOfIteratorHelper(modeableCommands),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var command = _step2.value;
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(modeableItems[command]) && modes[command] !== undefined) {
        if (modeableState[command]() !== modes[command]) {
          (0,external_kolmafia_namespaceObject.cliExecute)(command + " " + modes[command]);
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
// Subset of slots that are valid for caching.
var cachedSlots = $slots(maximize_templateObject7 || (maximize_templateObject7 = maximize_taggedTemplateLiteral(["hat, weapon, off-hand, back, shirt, pants, acc1, acc2, acc3, familiar"])));
var CacheEntry = /*#__PURE__*/maximize_createClass(function CacheEntry(equipment, rider, familiar, canEquipItemCount, modes) {
  maximize_classCallCheck(this, CacheEntry);
  maximize_defineProperty(this, "equipment", void 0);
  maximize_defineProperty(this, "rider", void 0);
  maximize_defineProperty(this, "familiar", void 0);
  maximize_defineProperty(this, "canEquipItemCount", void 0);
  maximize_defineProperty(this, "modes", void 0);
  this.equipment = equipment;
  this.rider = rider;
  this.familiar = familiar;
  this.canEquipItemCount = canEquipItemCount;
  this.modes = modes;
});
var _outfitSlots = /*#__PURE__*/new WeakMap();
var _useHistory = /*#__PURE__*/new WeakMap();
var _maxSize = /*#__PURE__*/new WeakMap();
var OutfitLRUCache = /*#__PURE__*/function () {
  function OutfitLRUCache(maxSize) {
    maximize_classCallCheck(this, OutfitLRUCache);
    // Current outfits allocated
    _classPrivateFieldInitSpec(this, _outfitSlots, {
      writable: true,
      value: []
    });
    // Array of indices into #outfitSlots in order of use. Most recent at the front.
    _classPrivateFieldInitSpec(this, _useHistory, {
      writable: true,
      value: []
    });
    _classPrivateFieldInitSpec(this, _maxSize, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _maxSize, maxSize);
  }
  maximize_createClass(OutfitLRUCache, [{
    key: "checkConsistent",
    value: function checkConsistent() {
      if (_classPrivateFieldGet(this, _useHistory).length !== _classPrivateFieldGet(this, _outfitSlots).length || !maximize_toConsumableArray(_classPrivateFieldGet(this, _useHistory)).sort().every((value, index) => value === index)) {
        throw new Error("Outfit cache consistency failed.");
      }
    }
  }, {
    key: "promote",
    value: function promote(index) {
      _classPrivateFieldSet(this, _useHistory, [index].concat(maximize_toConsumableArray(_classPrivateFieldGet(this, _useHistory).filter(i => i !== index))));
      this.checkConsistent();
    }
  }, {
    key: "get",
    value: function get(key) {
      var index = _classPrivateFieldGet(this, _outfitSlots).indexOf(key);
      if (index < 0) return undefined;
      this.promote(index);
      return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
    }
  }, {
    key: "insert",
    value: function insert(key) {
      var lastUseIndex = undefined;
      if (_classPrivateFieldGet(this, _outfitSlots).length >= _classPrivateFieldGet(this, _maxSize)) {
        lastUseIndex = _classPrivateFieldGet(this, _useHistory).pop();
        if (lastUseIndex === undefined) {
          throw new Error("Outfit cache consistency failed.");
        }
        _classPrivateFieldGet(this, _useHistory).splice(0, 0, lastUseIndex);
        _classPrivateFieldGet(this, _outfitSlots)[lastUseIndex] = key;
        this.checkConsistent();
        return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(lastUseIndex);
      } else {
        var index = _classPrivateFieldGet(this, _outfitSlots).push(key) - 1;
        _classPrivateFieldGet(this, _useHistory).splice(0, 0, index);
        this.checkConsistent();
        return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      _classPrivateFieldSet(this, _outfitSlots, []);
      _classPrivateFieldSet(this, _useHistory, []);
    }
  }]);
  return OutfitLRUCache;
}();
/**
 * Save current equipment as KoL-native outfit.
 *
 * @param name Name of new outfit.
 */
maximize_defineProperty(OutfitLRUCache, "OUTFIT_PREFIX", "Script Outfit");
function saveOutfit(name) {
  (0,external_kolmafia_namespaceObject.cliExecute)("outfit save ".concat(name));
}
// Objective cache entries.
var cachedObjectives = {};
// Outfit cache entries. Keep 6 by default to avoid cluttering list.
var outfitCache = new OutfitLRUCache(6);
// Cache to prevent rescanning all items unnecessarily
var cachedStats = [0, 0, 0];
var cachedCanEquipItemCount = 0;
/**
 * Count the number of unique items that can be equipped.
 *
 * @returns The count of unique items.
 */
function canEquipItemCount() {
  var stats = $stats(maximize_templateObject8 || (maximize_templateObject8 = maximize_taggedTemplateLiteral(["Muscle, Mysticality, Moxie"]))).map(stat => Math.min((0,external_kolmafia_namespaceObject.myBasestat)(stat), 300));
  if (stats.every((value, index) => value === cachedStats[index])) {
    return cachedCanEquipItemCount;
  }
  cachedStats = stats;
  cachedCanEquipItemCount = external_kolmafia_namespaceObject.Item.all().filter(item => (0,external_kolmafia_namespaceObject.canEquip)(item)).length;
  return cachedCanEquipItemCount;
}
/**
 * Checks the objective cache for a valid entry.
 *
 * @param cacheKey The cache key to check.
 * @param options Set of maximizer options
 * @returns A valid CacheEntry or null.
 */
function checkCache(cacheKey, options) {
  var entry = cachedObjectives[cacheKey];
  if (!entry) {
    return null;
  }
  if (options.updateOnFamiliarChange && (0,external_kolmafia_namespaceObject.myFamiliar)() !== entry.familiar) {
    dist_logger.warning("Equipment found in maximize cache but familiar is different.");
    return null;
  }
  if (options.updateOnCanEquipChanged && entry.canEquipItemCount !== canEquipItemCount()) {
    dist_logger.warning("Equipment found in maximize cache but equippable item list is out of date.");
    return null;
  }
  return entry;
}
/**
 * Applies equipment that was found in the cache.
 *
 * @param entry The CacheEntry to apply
 * @param options Set of maximizer options
 */
function applyCached(entry, options) {
  var outfitName = options.useOutfitCaching ? outfitCache.get(entry) : undefined;
  if (outfitName) {
    if (!(0,external_kolmafia_namespaceObject.isWearingOutfit)(outfitName)) {
      (0,external_kolmafia_namespaceObject.outfit)(outfitName);
    }
    var familiarEquip = entry.equipment.get($slot(maximize_templateObject9 || (maximize_templateObject9 = maximize_taggedTemplateLiteral(["familiar"]))));
    if (familiarEquip) (0,external_kolmafia_namespaceObject.equip)($slot(maximize_templateObject10 || (maximize_templateObject10 = maximize_taggedTemplateLiteral(["familiar"]))), familiarEquip);
  } else {
    var _iterator3 = maximize_createForOfIteratorHelper(entry.equipment),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = maximize_slicedToArray(_step3.value, 2),
          slot = _step3$value[0],
          item = _step3$value[1];
        if ((0,external_kolmafia_namespaceObject.equippedItem)(slot) !== item && (0,external_kolmafia_namespaceObject.availableAmount)(item) > 0) {
          (0,external_kolmafia_namespaceObject.equip)(slot, item);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    if (verifyCached(entry) && options.useOutfitCaching) {
      var _outfitName = outfitCache.insert(entry);
      dist_logger.info("Saving equipment to outfit ".concat(_outfitName, "."));
      saveOutfit(_outfitName);
    }
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject11 || (maximize_templateObject11 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject12 || (maximize_templateObject12 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))))) {
    (0,external_kolmafia_namespaceObject.enthroneFamiliar)(entry.rider.get(template_string_$item(maximize_templateObject13 || (maximize_templateObject13 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) || template_string_$familiar.none);
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject14 || (maximize_templateObject14 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject15 || (maximize_templateObject15 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))))) {
    (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(entry.rider.get(template_string_$item(maximize_templateObject16 || (maximize_templateObject16 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) || template_string_$familiar.none);
  }
  applyModes(maximize_objectSpread(maximize_objectSpread({}, entry.modes), options.modes));
}
var slotStructure = [$slots(maximize_templateObject17 || (maximize_templateObject17 = maximize_taggedTemplateLiteral(["hat"]))), $slots(maximize_templateObject18 || (maximize_templateObject18 = maximize_taggedTemplateLiteral(["back"]))), $slots(maximize_templateObject19 || (maximize_templateObject19 = maximize_taggedTemplateLiteral(["shirt"]))), $slots(maximize_templateObject20 || (maximize_templateObject20 = maximize_taggedTemplateLiteral(["weapon, off-hand"]))), $slots(maximize_templateObject21 || (maximize_templateObject21 = maximize_taggedTemplateLiteral(["pants"]))), $slots(maximize_templateObject22 || (maximize_templateObject22 = maximize_taggedTemplateLiteral(["acc1, acc2, acc3"]))), $slots(maximize_templateObject23 || (maximize_templateObject23 = maximize_taggedTemplateLiteral(["familiar"])))];
/**
 * Verifies that a CacheEntry was applied successfully.
 *
 * @param entry The CacheEntry to verify
 * @param warn Whether to warn if the cache could not be applied
 * @returns If all desired equipment was appliedn in the correct slots.
 */
function verifyCached(entry) {
  var warn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var success = true;
  var _iterator4 = maximize_createForOfIteratorHelper(slotStructure),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var slotGroup = _step4.value;
      var desiredSlots = slotGroup.map(slot => {
        var _entry$equipment$get;
        return [slot, (_entry$equipment$get = entry.equipment.get(slot)) !== null && _entry$equipment$get !== void 0 ? _entry$equipment$get : null];
      }).filter(_ref2 => {
        var _ref3 = maximize_slicedToArray(_ref2, 2),
          item = _ref3[1];
        return item !== null;
      });
      var desiredSet = desiredSlots.map(_ref4 => {
        var _ref5 = maximize_slicedToArray(_ref4, 2),
          item = _ref5[1];
        return item;
      });
      var equippedSet = desiredSlots.map(_ref6 => {
        var _ref7 = maximize_slicedToArray(_ref6, 1),
          slot = _ref7[0];
        return (0,external_kolmafia_namespaceObject.equippedItem)(slot);
      });
      if (!setEqual(desiredSet, equippedSet)) {
        if (warn) {
          dist_logger.warning("Failed to apply cached ".concat(desiredSet.join(", "), " in ").concat(slotGroup.join(", "), "."));
        }
        success = false;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject24 || (maximize_templateObject24 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject25 || (maximize_templateObject25 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))))) {
    if (entry.rider.get(template_string_$item(maximize_templateObject26 || (maximize_templateObject26 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) !== (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)()) {
      if (warn) {
        dist_logger.warning("Failed to apply ".concat(entry.rider.get(template_string_$item(maximize_templateObject27 || (maximize_templateObject27 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))), " in ").concat(template_string_$item(maximize_templateObject28 || (maximize_templateObject28 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))), "."));
      }
      success = false;
    }
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject29 || (maximize_templateObject29 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject30 || (maximize_templateObject30 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))))) {
    if (entry.rider.get(template_string_$item(maximize_templateObject31 || (maximize_templateObject31 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) !== (0,external_kolmafia_namespaceObject.myBjornedFamiliar)()) {
      if (warn) {
        dist_logger.warning("Failed to apply".concat(entry.rider.get(template_string_$item(maximize_templateObject32 || (maximize_templateObject32 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))), " in ").concat(template_string_$item(maximize_templateObject33 || (maximize_templateObject33 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))), "."));
      }
      success = false;
    }
  }
  return success;
}
/**
 * Save current equipment to the objective cache.
 *
 * @param cacheKey The cache key to save.
 * @param options Set of maximizer options
 */
function saveCached(cacheKey, options) {
  var equipment = new Map();
  var rider = new Map();
  var _iterator5 = maximize_createForOfIteratorHelper(cachedSlots),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _slot2 = _step5.value;
      equipment.set(_slot2, (0,external_kolmafia_namespaceObject.equippedItem)(_slot2));
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject34 || (maximize_templateObject34 = maximize_taggedTemplateLiteral(["card sleeve"])))) > 0) {
    equipment.set($slot(_templateObject35 || (_templateObject35 = maximize_taggedTemplateLiteral(["card-sleeve"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject36 || (_templateObject36 = maximize_taggedTemplateLiteral(["card-sleeve"])))));
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(_templateObject37 || (_templateObject37 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0) {
    rider.set(template_string_$item(_templateObject38 || (_templateObject38 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))), (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)());
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(_templateObject39 || (_templateObject39 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0) {
    rider.set(template_string_$item(_templateObject40 || (_templateObject40 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))), (0,external_kolmafia_namespaceObject.myBjornedFamiliar)());
  }
  if (options.preventSlot && options.preventSlot.length > 0) {
    var _iterator6 = maximize_createForOfIteratorHelper(options.preventSlot),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var slot = _step6.value;
        equipment.delete(slot);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
    if (options.preventSlot.includes($slot(_templateObject41 || (_templateObject41 = maximize_taggedTemplateLiteral(["buddy-bjorn"]))))) {
      rider.delete(template_string_$item(_templateObject42 || (_templateObject42 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))));
    }
    if (options.preventSlot.includes($slot(_templateObject43 || (_templateObject43 = maximize_taggedTemplateLiteral(["crown-of-thrones"]))))) {
      rider.delete(template_string_$item(_templateObject44 || (_templateObject44 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))));
    }
  }
  if (options.onlySlot && options.onlySlot.length > 0) {
    var _iterator7 = maximize_createForOfIteratorHelper(external_kolmafia_namespaceObject.Slot.all()),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var _slot = _step7.value;
        if (!options.onlySlot.includes(_slot)) {
          equipment.delete(_slot);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
    if (!options.onlySlot.includes($slot(_templateObject45 || (_templateObject45 = maximize_taggedTemplateLiteral(["buddy-bjorn"]))))) {
      rider.delete(template_string_$item(_templateObject46 || (_templateObject46 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))));
    }
    if (!options.onlySlot.includes($slot(_templateObject47 || (_templateObject47 = maximize_taggedTemplateLiteral(["crown-of-thrones"]))))) {
      rider.delete(template_string_$item(_templateObject48 || (_templateObject48 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))));
    }
  }
  var entry = new CacheEntry(equipment, rider, (0,external_kolmafia_namespaceObject.myFamiliar)(), canEquipItemCount(), maximize_objectSpread(maximize_objectSpread({}, getCurrentModes()), options.modes));
  cachedObjectives[cacheKey] = entry;
  if (options.useOutfitCaching) {
    var outfitName = outfitCache.insert(entry);
    dist_logger.info("Saving equipment to outfit ".concat(outfitName, "."));
    saveOutfit(outfitName);
  }
}
/**
 * Run the maximizer, but only if the objective and certain pieces of game state haven't changed since it was last run.
 *
 * @param objectives Objectives to maximize for.
 * @param options Options for this run of the maximizer.
 * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
 * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
 * @param options.forceEquip Equipment to force-equip ("equip X").
 * @param options.preventEquip Equipment to prevent equipping ("-equip X").
 * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
 * @returns Whether the maximize call succeeded.
 */
function maximizeCached(objectives) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fullOptions = mergeMaximizeOptions(defaultMaximizeOptions, options);
  var forceEquip = fullOptions.forceEquip,
    preventEquip = fullOptions.preventEquip,
    bonusEquip = fullOptions.bonusEquip,
    onlySlot = fullOptions.onlySlot,
    preventSlot = fullOptions.preventSlot,
    forceUpdate = fullOptions.forceUpdate;
  // Sort each group in objective to ensure consistent ordering in string
  var objective = maximize_toConsumableArray(new Set([].concat(maximize_toConsumableArray(objectives.sort()), maximize_toConsumableArray(forceEquip.map(item => "\"equip ".concat(toMaximizerName(item), "\"")).sort()), maximize_toConsumableArray(preventEquip.map(item => "-\"equip ".concat(toMaximizerName(item), "\"")).sort()), maximize_toConsumableArray(onlySlot.map(slot => "".concat(slot)).sort()), maximize_toConsumableArray(preventSlot.map(slot => "-".concat(slot)).sort()), maximize_toConsumableArray(Array.from(bonusEquip.entries()).filter(_ref8 => {
    var _ref9 = maximize_slicedToArray(_ref8, 2),
      bonus = _ref9[1];
    return bonus !== 0;
  }).map(_ref10 => {
    var _ref11 = maximize_slicedToArray(_ref10, 2),
      item = _ref11[0],
      bonus = _ref11[1];
    return "".concat(Math.round(bonus * 100) / 100, " \"bonus ").concat(toMaximizerName(item), "\"");
  }).sort())))).join(", ");
  // Items equipped in slots not touched by the maximizer must be in the cache key
  var untouchedSlots = cachedSlots.filter(slot => preventSlot.includes(slot) || onlySlot.length > 0 && !onlySlot.includes(slot));
  var cacheKey = [objective].concat(maximize_toConsumableArray(untouchedSlots.map(slot => "".concat(slot, ":").concat((0,external_kolmafia_namespaceObject.equippedItem)(slot))).sort())).join("; ");
  var cacheEntry = checkCache(cacheKey, fullOptions);
  if (cacheEntry && !forceUpdate) {
    if (verifyCached(cacheEntry, false)) return true;
    dist_logger.info("Equipment found in maximize cache, equipping...");
    applyCached(cacheEntry, fullOptions);
    if (verifyCached(cacheEntry)) {
      dist_logger.info("Equipped cached ".concat(cacheKey));
      return true;
    }
    dist_logger.warning("Maximize cache application failed, maximizing...");
  }
  var result = (0,external_kolmafia_namespaceObject.maximize)(objective, false);
  saveCached(cacheKey, fullOptions);
  return result;
}
var _maximizeParameters = /*#__PURE__*/new WeakMap();
var _maximizeOptions = /*#__PURE__*/new WeakMap();
var Requirement = /*#__PURE__*/function () {
  /**
   * A convenient way of combining maximization parameters and options
   *
   * @param maximizeParameters Parameters you're attempting to maximize
   * @param maximizeOptions Object potentially containing forceEquips, bonusEquips, preventEquips, and preventSlots
   */
  function Requirement(maximizeParameters, maximizeOptions) {
    maximize_classCallCheck(this, Requirement);
    _classPrivateFieldInitSpec(this, _maximizeParameters, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _maximizeOptions, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _maximizeParameters, maximizeParameters);
    _classPrivateFieldSet(this, _maximizeOptions, maximizeOptions);
  }
  maximize_createClass(Requirement, [{
    key: "maximizeParameters",
    get: function get() {
      return _classPrivateFieldGet(this, _maximizeParameters);
    }
  }, {
    key: "maximizeOptions",
    get: function get() {
      return _classPrivateFieldGet(this, _maximizeOptions);
    }
    /**
     * Merges two requirements, concanating relevant arrays. Typically used in static form.
     *
     * @param other Requirement to merge with.
     */
  }, {
    key: "merge",
    value: function merge(other) {
      var _optionsA$forceEquip, _other$maximizeOption, _optionsA$preventEqui, _other$maximizeOption3, _optionsA$bonusEquip$, _optionsA$bonusEquip, _optionsB$bonusEquip$, _optionsB$bonusEquip, _optionsA$onlySlot, _optionsB$onlySlot, _optionsA$preventSlot, _optionsB$preventSlot;
      var optionsA = this.maximizeOptions;
      var optionsB = other.maximizeOptions;
      return new Requirement([].concat(maximize_toConsumableArray(this.maximizeParameters), maximize_toConsumableArray(other.maximizeParameters)), {
        updateOnFamiliarChange: optionsA.updateOnFamiliarChange || other.maximizeOptions.updateOnFamiliarChange,
        updateOnCanEquipChanged: optionsA.updateOnCanEquipChanged || other.maximizeOptions.updateOnCanEquipChanged,
        forceEquip: [].concat(maximize_toConsumableArray((_optionsA$forceEquip = optionsA.forceEquip) !== null && _optionsA$forceEquip !== void 0 ? _optionsA$forceEquip : []), maximize_toConsumableArray((_other$maximizeOption = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption !== void 0 ? _other$maximizeOption : [])).filter(x => {
          var _other$maximizeOption2;
          return !((_other$maximizeOption2 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption2 !== void 0 && _other$maximizeOption2.includes(x));
        }),
        preventEquip: [].concat(maximize_toConsumableArray((_optionsA$preventEqui = optionsA.preventEquip) !== null && _optionsA$preventEqui !== void 0 ? _optionsA$preventEqui : []), maximize_toConsumableArray((_other$maximizeOption3 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption3 !== void 0 ? _other$maximizeOption3 : [])).filter(x => {
          var _other$maximizeOption4;
          return !((_other$maximizeOption4 = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption4 !== void 0 && _other$maximizeOption4.includes(x));
        }),
        bonusEquip: new Map([].concat(maximize_toConsumableArray((_optionsA$bonusEquip$ = (_optionsA$bonusEquip = optionsA.bonusEquip) === null || _optionsA$bonusEquip === void 0 ? void 0 : _optionsA$bonusEquip.entries()) !== null && _optionsA$bonusEquip$ !== void 0 ? _optionsA$bonusEquip$ : []), maximize_toConsumableArray((_optionsB$bonusEquip$ = (_optionsB$bonusEquip = optionsB.bonusEquip) === null || _optionsB$bonusEquip === void 0 ? void 0 : _optionsB$bonusEquip.entries()) !== null && _optionsB$bonusEquip$ !== void 0 ? _optionsB$bonusEquip$ : []))),
        onlySlot: [].concat(maximize_toConsumableArray((_optionsA$onlySlot = optionsA.onlySlot) !== null && _optionsA$onlySlot !== void 0 ? _optionsA$onlySlot : []), maximize_toConsumableArray((_optionsB$onlySlot = optionsB.onlySlot) !== null && _optionsB$onlySlot !== void 0 ? _optionsB$onlySlot : [])),
        preventSlot: [].concat(maximize_toConsumableArray((_optionsA$preventSlot = optionsA.preventSlot) !== null && _optionsA$preventSlot !== void 0 ? _optionsA$preventSlot : []), maximize_toConsumableArray((_optionsB$preventSlot = optionsB.preventSlot) !== null && _optionsB$preventSlot !== void 0 ? _optionsB$preventSlot : [])),
        forceUpdate: optionsA.forceUpdate || optionsB.forceUpdate
      });
    }
    /**
     * Merges a set of requirements together, starting with an empty requirement.
     *
     * @param allRequirements Requirements to merge
     * @returns Merged requirements
     */
  }, {
    key: "maximize",
    value:
    /**
     * Runs maximizeCached, using the maximizeParameters and maximizeOptions contained by this requirement.
     *
     * @returns Whether the maximize call succeeded.
     */
    function maximize() {
      return maximizeCached(this.maximizeParameters, this.maximizeOptions);
    }
    /**
     * Merges requirements, and then runs maximizeCached on the combined requirement.
     *
     * @param requirements Requirements to maximize on
     */
  }], [{
    key: "merge",
    value: function merge(allRequirements) {
      return allRequirements.reduce((x, y) => x.merge(y), new Requirement([], {}));
    }
  }, {
    key: "maximize",
    value: function maximize() {
      for (var _len = arguments.length, requirements = new Array(_len), _key = 0; _key < _len; _key++) {
        requirements[_key] = arguments[_key];
      }
      Requirement.merge(requirements).maximize();
    }
  }]);
  return Requirement;
}();
/**
 * Clear all outfits cached by the maximizer.
 */
function clearMaximizerCache() {
  outfitCache.clear();
  for (var member in cachedObjectives) delete cachedObjectives[member];
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/modifierTypes.js
// THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseModifiers.ts for more information
var modifierTypes_booleanModifiers = ["Softcore Only", "Single Equip", "Never Fumble", "Weakens Monster", "Free Pull", "Variable", "Nonstackable Watch", "Cold Immunity", "Hot Immunity", "Sleaze Immunity", "Spooky Immunity", "Stench Immunity", "Cold Vulnerability", "Hot Vulnerability", "Sleaze Vulnerability", "Spooky Vulnerability", "Stench Vulnerability", "Moxie Controls MP", "Moxie May Control MP", "Four Songs", "Adventure Underwater", "Underwater Familiar", "Generic", "Unarmed", "No Pull", "Lasts Until Rollover", "Attacks Can't Miss", "Pirate", "Breakable", "Drops Items", "Drops Meat"];
var classModifiers = ["Class"];
var modifierTypes_numericModifiers = ["Familiar Weight", "Monster Level", "Combat Rate", "Initiative", "Experience", "Item Drop", "Meat Drop", "Damage Absorption", "Damage Reduction", "Cold Resistance", "Hot Resistance", "Sleaze Resistance", "Spooky Resistance", "Stench Resistance", "Mana Cost", "Moxie", "Moxie Percent", "Muscle", "Muscle Percent", "Mysticality", "Mysticality Percent", "Maximum HP", "Maximum HP Percent", "Maximum MP", "Maximum MP Percent", "Weapon Damage", "Ranged Damage", "Spell Damage", "Spell Damage Percent", "Cold Damage", "Hot Damage", "Sleaze Damage", "Spooky Damage", "Stench Damage", "Cold Spell Damage", "Hot Spell Damage", "Sleaze Spell Damage", "Spooky Spell Damage", "Stench Spell Damage", "Underwater Combat Rate", "Fumble", "HP Regen Min", "HP Regen Max", "MP Regen Min", "MP Regen Max", "Adventures", "Familiar Weight Percent", "Weapon Damage Percent", "Ranged Damage Percent", "Stackable Mana Cost", "Hobo Power", "Base Resting HP", "Resting HP Percent", "Bonus Resting HP", "Base Resting MP", "Resting MP Percent", "Bonus Resting MP", "Critical Hit Percent", "PvP Fights", "Volleyball", "Sombrero", "Leprechaun", "Fairy", "Meat Drop Penalty", "Hidden Familiar Weight", "Item Drop Penalty", "Initiative Penalty", "Food Drop", "Booze Drop", "Hat Drop", "Weapon Drop", "Offhand Drop", "Shirt Drop", "Pants Drop", "Accessory Drop", "Volleyball Effectiveness", "Sombrero Effectiveness", "Leprechaun Effectiveness", "Fairy Effectiveness", "Familiar Weight Cap", "Slime Resistance", "Slime Hates It", "Spell Critical Percent", "Muscle Experience", "Mysticality Experience", "Moxie Experience", "Effect Duration", "Candy Drop", "DB Combat Damage", "Sombrero Bonus", "Familiar Experience", "Sporadic Meat Drop", "Sporadic Item Drop", "Meat Bonus", "Pickpocket Chance", "Combat Mana Cost", "Muscle Experience Percent", "Mysticality Experience Percent", "Moxie Experience Percent", "Minstrel Level", "Muscle Limit", "Mysticality Limit", "Moxie Limit", "Song Duration", "Prismatic Damage", "Smithsness", "Supercold Resistance", "Reduce Enemy Defense", "Pool Skill", "Surgeonosity", "Familiar Damage", "Gear Drop", "Maximum Hooch", "Water Level", "Crimbot Outfit Power", "Familiar Tuning Muscle", "Familiar Tuning Mysticality", "Familiar Tuning Moxie", "Random Monster Modifiers", "Luck", "Othello Skill", "Disco Style", "Rollover Effect Duration", "Sixgun Damage", "Fishing Skill", "Additional Song", "Sprinkle Drop", "Absorb Adventures", "Absorb Stats", "Rubee Drop", "Kruegerand Drop", "WarBear Armor Penetration", "Clowniness", "Maximum PP", "Plumber Power", "Drippy Damage", "Drippy Resistance", "Energy", "Scrap", "Familiar Action Bonus", "Water"];
var effectModifiers = ["Effect", "Rollover Effect"];
var monsterModifiers = ["Avatar"];
var skillModifiers = ["Skill"];
var statModifiers = ["Plumber Stat"];
var stringModifiers = ["Intrinsic Effect", "Equalize", "Wiki Name", "Modifiers", "Outfit", "Stat Tuning", "Equips On", "Familiar Effect", "Jiggle", "Equalize Muscle", "Equalize Mysticality", "Equalize Moxie", "Floor Buffed Muscle", "Floor Buffed Mysticality", "Floor Buffed Moxie"];
;// CONCATENATED MODULE: ./node_modules/libram/dist/modifier.js
var modifier_templateObject;
function modifier_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function modifier_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function modifier_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? modifier_ownKeys(Object(source), !0).forEach(function (key) { modifier_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : modifier_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function modifier_defineProperty(obj, key, value) { key = modifier_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function modifier_toPropertyKey(arg) { var key = modifier_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function modifier_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





/**
 * Get the value of a modifier
 *
 * @param name Modifier name
 * @param subject Subject of modifier
 * @returns Value of modifier
 */
function modifier_get(name, subject) {
  if (utils_arrayContains(name, modifierTypes_booleanModifiers)) {
    return subject === undefined ? (0,external_kolmafia_namespaceObject.booleanModifier)(name) : (0,external_kolmafia_namespaceObject.booleanModifier)(subject, name);
  }
  if (utils_arrayContains(name, classModifiers)) {
    return (0,external_kolmafia_namespaceObject.classModifier)(subject, name);
  }
  if (utils_arrayContains(name, effectModifiers)) {
    return (0,external_kolmafia_namespaceObject.effectModifier)(subject, name);
  }
  if (utils_arrayContains(name, monsterModifiers)) {
    return (0,external_kolmafia_namespaceObject.monsterModifier)(subject, name);
  }
  if (utils_arrayContains(name, modifierTypes_numericModifiers)) {
    return subject === undefined ? (0,external_kolmafia_namespaceObject.numericModifier)(name) : (0,external_kolmafia_namespaceObject.numericModifier)(subject, name);
  }
  if (utils_arrayContains(name, skillModifiers)) {
    return (0,external_kolmafia_namespaceObject.skillModifier)(subject, name);
  }
  if (utils_arrayContains(name, stringModifiers)) {
    return subject === undefined ? (0,external_kolmafia_namespaceObject.stringModifier)(name) : (0,external_kolmafia_namespaceObject.stringModifier)(subject, name);
  }
  if (utils_arrayContains(name, statModifiers)) {
    return (0,external_kolmafia_namespaceObject.statModifier)(subject, name);
  }
}
/**
 * Merge two Modifiers objects into one, summing all numeric modifiers, ||ing all boolean modifiers, and otherwise letting the second object overwrite the first.
 *
 * @param modifiers1 Modifiers objects to be merged onto.
 * @param modifiers2 Modifiers object to merge.
 * @returns A single Modifiers object obtained by merging.
 */
function pairwiseMerge(modifiers1, modifiers2) {
  var returnValue = modifier_objectSpread(modifier_objectSpread({}, modifiers1), modifiers2);
  for (var modifier in modifiers1) {
    if (Array.from(Object.values(modifiers2)).includes(modifier)) {
      if (arrayContains(modifier, numericModifiers)) {
        var _modifiers1$modifier, _modifiers2$modifier;
        returnValue[modifier] = ((_modifiers1$modifier = modifiers1[modifier]) !== null && _modifiers1$modifier !== void 0 ? _modifiers1$modifier : 0) + ((_modifiers2$modifier = modifiers2[modifier]) !== null && _modifiers2$modifier !== void 0 ? _modifiers2$modifier : 0);
      }
      if (arrayContains(modifier, booleanModifiers)) {
        var _modifiers1$modifier2, _modifiers2$modifier2;
        returnValue[modifier] = ((_modifiers1$modifier2 = modifiers1[modifier]) !== null && _modifiers1$modifier2 !== void 0 ? _modifiers1$modifier2 : false) || ((_modifiers2$modifier2 = modifiers2[modifier]) !== null && _modifiers2$modifier2 !== void 0 ? _modifiers2$modifier2 : false);
      }
    }
  }
  return returnValue;
}
/**
 * Merge arbitrarily many Modifiers objects into one, summing all numeric modifiers, and ||ing all boolean modifiers.
 *
 * @param modifierss Modifiers objects to be merged together.
 * @returns A single Modifiers object obtained by merging.
 */
function mergeModifiers() {
  for (var _len = arguments.length, modifierss = new Array(_len), _key = 0; _key < _len; _key++) {
    modifierss[_key] = arguments[_key];
  }
  return modifierss.reduce((a, b) => pairwiseMerge(a, b), {});
}
/**
 * Prints the modtrace to the log.
 * Example: printModtrace("Meat Drop") or printModtrace(["Item Drop", "Booze Drop"])
 *
 * @param inputModifiers A string (or string[]) containing the modtrace lookup term(s).
 * @param baseModifier A string where all the info about modifiers in the string[] array can be grabbed with this one lookup term. (Automatically generated in most cases)
 * @param componentColor The print color for the sum returned for each input modifier
 * @param totalColor The print color for the total sum over every input modifier
 * @returns void
 */
function printModtrace(inputModifiers,
// the user's list of modifiers to look up
baseModifier) {
  var _htmlOutput$match, _htmlOutput$match2;
  var componentColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "purple";
  var totalColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "blue";
  if (typeof inputModifiers === "string") return printModtrace([inputModifiers], inputModifiers);else if (inputModifiers.length === 0) return;else if (!baseModifier) {
    return inputModifiers.filter(mod1 => !inputModifiers.some(mod2 => mod2 !== mod1 && mod1.includes(mod2))).forEach(baseMod => printModtrace(inputModifiers.filter(mod => mod.includes(baseMod)), baseMod));
  }
  var htmlOutput = (0,external_kolmafia_namespaceObject.cliExecuteOutput)("modtrace ".concat(baseModifier));
  // The list of matched modifiers that mafia returns
  var modtraceModifiers = Array.from((_htmlOutput$match = htmlOutput.match(RegExp(/(>)(.*?)(<\/td>)/g))) !== null && _htmlOutput$match !== void 0 ? _htmlOutput$match : []).map(s => s.slice(1, -5)).slice(2);
  if (!modtraceModifiers.some(modifier => modifier.toLowerCase() === baseModifier.toLowerCase())) {
    return (0,external_kolmafia_namespaceObject.print)("Could not find exact string match of ".concat(baseModifier, " in ").concat(inputModifiers.toString()), "red");
  }
  var initialVal = baseModifier.toLowerCase() === "familiar weight" ? (() => {
    var wt = (0,external_kolmafia_namespaceObject.familiarWeight)((0,external_kolmafia_namespaceObject.myFamiliar)());
    (0,external_kolmafia_namespaceObject.print)("[Familiar Weight] Base weight (".concat(wt, ")"));
    return wt;
  })() : 0;
  var modifierVals = new Map(modtraceModifiers.map(modifier => [modifier, initialVal])); // Maps modifier name to its value
  var lowerCaseModifiers = inputModifiers.map(modifier => modifier.toLowerCase());
  Array.from((_htmlOutput$match2 = htmlOutput.match(RegExp(/<tr>(.*?)<\/tr>/g))) !== null && _htmlOutput$match2 !== void 0 ? _htmlOutput$match2 : []).slice(1).map(s => s.slice(4, -5)).forEach(s => {
    var _s$replace$match;
    var rowArr = Array.from((_s$replace$match = s.replace(RegExp(/><\/td>/g), ">0</td>").match(RegExp(/(>)(.*?)(<\/td>)/g))) !== null && _s$replace$match !== void 0 ? _s$replace$match : []).map(s => s.slice(1, -5));
    var rowName = rowArr[1];
    rowArr.slice(2).filter((e, idx) => idx % 2 === 0).forEach((e, idx) => {
      var _modifierVals$get;
      var val = parseFloat(e);
      modifierVals.set(modtraceModifiers[idx], ((_modifierVals$get = modifierVals.get(modtraceModifiers[idx])) !== null && _modifierVals$get !== void 0 ? _modifierVals$get : 0) + val);
      if (val !== 0 && lowerCaseModifiers.includes(modtraceModifiers[idx].toLowerCase())) {
        (0,external_kolmafia_namespaceObject.print)("[".concat(modtraceModifiers[idx], "] ").concat(rowName, " (").concat(val.toFixed(1), ")"));
      }
    });
  });
  var total = utils_sum(modtraceModifiers, modifier => {
    if (lowerCaseModifiers.includes(modifier.toLowerCase())) {
      var _modifierVals$get2;
      var modVal = (_modifierVals$get2 = modifierVals.get(modifier)) !== null && _modifierVals$get2 !== void 0 ? _modifierVals$get2 : 0;
      if (have($effect(modifier_templateObject || (modifier_templateObject = modifier_taggedTemplateLiteral(["Bow-Legged Swagger"])))) && modifier.includes("Weapon Damage")) {
        (0,external_kolmafia_namespaceObject.print)("[".concat(modifier, "] Bow-Legged Swagger (").concat(modVal.toFixed(1), ")"));
        modVal *= 2;
      }
      (0,external_kolmafia_namespaceObject.print)("".concat(modifier, " => ").concat(modVal.toFixed(1)), componentColor);
      return modVal;
    } else return 0;
  });
  (0,external_kolmafia_namespaceObject.print)("Total ".concat(baseModifier, ": ").concat(total.toFixed(1)), totalColor);
}
/**
 * Take the sum of a modifier over an array of Skills, Effects, and Items
 *
 * @param modifier A NumericModifier that we want to find the total value of
 * @param subjects A rested array of Skills, Effects, and Items that we want to find the total value of
 * @returns The sum of the appropriate modifier for all of the subjects
 */
function getTotalModifier(modifier) {
  for (var _len2 = arguments.length, subjects = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    subjects[_key2 - 1] = arguments[_key2];
  }
  return sum(subjects, subject => modifier_get(modifier, subject));
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/MummingTrunk.js
function MummingTrunk_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = MummingTrunk_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function MummingTrunk_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return MummingTrunk_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MummingTrunk_arrayLikeToArray(o, minLen); }
function MummingTrunk_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }


/**
 * Internal function used to parse mods
 *
 * @param input The modstring used in your mummery pref
 * @returns a NumericModifier matching that string
 */
function toModifier(input) {
  var regExp = new RegExp(/Experience \((.*?)\)/);
  var matcher = input.match(regExp);
  return matcher ? "".concat(matcher[2], " Experience") : input;
}
/**
 * Parses the _mummeryMods preference into a Map for easier use.
 *
 * @returns A map, mapping Familiars to a Tuple consisting of the NumericModifier attached to the familiar, and the value thereof.
 */
function currentCostumes() {
  var entries = property_get("_mummeryMods").split(",");
  var returnValue = new Map();
  var regExp = new RegExp(/([^:]+): \[(\d+)\*fam\(([^)]+)\)\]/);
  var _iterator = MummingTrunk_createForOfIteratorHelper(entries),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var entry = _step.value;
      var matcher = entry.match(regExp);
      if (matcher) {
        returnValue.set((0,external_kolmafia_namespaceObject.toFamiliar)(matcher[3]), [toModifier(matcher[1]), parseInt(matcher[2])]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return returnValue;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/challengePaths/2015/CommunityService.js
var CommunityService_templateObject, CommunityService_templateObject2, CommunityService_templateObject3, CommunityService_templateObject4, CommunityService_templateObject5, CommunityService_templateObject6, CommunityService_templateObject7, CommunityService_templateObject8, CommunityService_templateObject9, CommunityService_templateObject10, CommunityService_templateObject11, CommunityService_templateObject12, CommunityService_templateObject13, CommunityService_templateObject14, CommunityService_templateObject15, CommunityService_templateObject16, CommunityService_templateObject17, CommunityService_templateObject18, CommunityService_templateObject19, CommunityService_templateObject20, CommunityService_templateObject21, CommunityService_templateObject22, CommunityService_templateObject23, CommunityService_templateObject24, CommunityService_templateObject25, CommunityService_templateObject26, CommunityService_templateObject27;
function CommunityService_slicedToArray(arr, i) { return CommunityService_arrayWithHoles(arr) || CommunityService_iterableToArrayLimit(arr, i) || CommunityService_unsupportedIterableToArray(arr, i) || CommunityService_nonIterableRest(); }
function CommunityService_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function CommunityService_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CommunityService_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CommunityService_arrayLikeToArray(o, minLen); }
function CommunityService_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function CommunityService_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function CommunityService_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function CommunityService_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function CommunityService_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, CommunityService_toPropertyKey(descriptor.key), descriptor); } }
function CommunityService_createClass(Constructor, protoProps, staticProps) { if (protoProps) CommunityService_defineProperties(Constructor.prototype, protoProps); if (staticProps) CommunityService_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function CommunityService_defineProperty(obj, key, value) { key = CommunityService_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function CommunityService_toPropertyKey(arg) { var key = CommunityService_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function CommunityService_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function CommunityService_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }








var thralls = new Map([[$stat(CommunityService_templateObject || (CommunityService_templateObject = CommunityService_taggedTemplateLiteral(["muscle"]))), $thrall(CommunityService_templateObject2 || (CommunityService_templateObject2 = CommunityService_taggedTemplateLiteral(["Elbow Macaroni"])))], [$stat(CommunityService_templateObject3 || (CommunityService_templateObject3 = CommunityService_taggedTemplateLiteral(["moxie"]))), $thrall(CommunityService_templateObject4 || (CommunityService_templateObject4 = CommunityService_taggedTemplateLiteral(["Penne Dreadful"])))]]);
var statCommunityServicePredictor = stat => {
  return () => 60 - Math.floor(1 / 30 * ((0,external_kolmafia_namespaceObject.myBuffedstat)(stat) - (0,external_kolmafia_namespaceObject.myBasestat)(thralls.get(stat) === (0,external_kolmafia_namespaceObject.myThrall)() && !have($effect(CommunityService_templateObject5 || (CommunityService_templateObject5 = CommunityService_taggedTemplateLiteral(["Expert Oiliness"])))) ? $stat(CommunityService_templateObject6 || (CommunityService_templateObject6 = CommunityService_taggedTemplateLiteral(["mysticality"]))) : stat)));
};
var visitCouncil = () => (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
var baseWeight = () => have($effect(CommunityService_templateObject7 || (CommunityService_templateObject7 = CommunityService_taggedTemplateLiteral(["Fidoxene"])))) ? 20 : (0,external_kolmafia_namespaceObject.familiarWeight)((0,external_kolmafia_namespaceObject.myFamiliar)());
var CommunityService = /*#__PURE__*/function () {
  /**
   * Class to store properties of various CS tests.
   *
   * @param id The id the game HTML uses to identify the test; this is used primarily in runChoice.
   * @param stat The principle stat the test measures, often used as more easily memorable shorthand for the specific tests
   * @param property The name of the test as a string, often used as part of the string property "csServicesPerformed".
   * @param predictor A function that returns an estimate for the number of turns that the test will take given your character's current state.
   * @param maximizeRequirements A Requirement object, if applicable, that aligns with the things needed to maximize for this particular test.
   */
  function CommunityService(id, stat, property, predictor, maximizeRequirements) {
    CommunityService_classCallCheck(this, CommunityService);
    CommunityService_defineProperty(this, "choice", void 0);
    CommunityService_defineProperty(this, "stat", void 0);
    CommunityService_defineProperty(this, "property", void 0);
    CommunityService_defineProperty(this, "predictor", void 0);
    CommunityService_defineProperty(this, "maximizeRequirements", void 0);
    CommunityService_defineProperty(this, "timer", null);
    this.choice = id;
    this.stat = stat;
    this.property = property;
    this.predictor = predictor;
    this.maximizeRequirements = maximizeRequirements;
  }
  /**
   * @returns The id number of the test, used primarily in runChoice.
   */
  CommunityService_createClass(CommunityService, [{
    key: "id",
    get: function get() {
      return this.choice;
    }
    /**
     * @returns The primary stat the test measures, used primarily as memorable shorthand in place of test names.
     */
  }, {
    key: "statName",
    get: function get() {
      return this.stat;
    }
    /**
     * @returns The name of the test, used primarily as part of the string property "csServicesPerformed"
     */
  }, {
    key: "name",
    get: function get() {
      return this.property;
    }
    /**
     *  @returns The predicted number of turns this test will take given your character's current state.
     */
  }, {
    key: "prediction",
    get: function get() {
      return this.predictor();
    }
    /**
     * @returns A Requirement object, if applicable, that aligns with the things needed to maximize for this particular test.
     */
  }, {
    key: "requirement",
    get: function get() {
      return this.maximizeRequirements;
    }
    /**
     * Start the time & turn counter for the Test in question.
     */
  }, {
    key: "startTimer",
    value: function startTimer() {
      var _this$timer;
      (_this$timer = this.timer) !== null && _this$timer !== void 0 ? _this$timer : this.timer = {
        time: Date.now(),
        turns: (0,external_kolmafia_namespaceObject.myTurncount)()
      };
    }
  }, {
    key: "isDone",
    value:
    /**
     * Checks the "csServicesPerformed" property to see whether mafia currently believes this test is complete.
     *
     * @returns Whether mafia currently believes this test is complete.
     */
    function isDone() {
      return property_get("csServicesPerformed").includes(this.property);
    }
    /**
     * Maximizes based on the Requirement associated with this particular test.
     */
  }, {
    key: "maximize",
    value: function maximize() {
      if (this.maximizeRequirements) this.maximizeRequirements.maximize();
    }
    /**
     * Attempts to turn in the test to the Council of Loathing.
     *
     * @returns Whether mafia believes the test is complete at the end of this function.
     */
  }, {
    key: "do",
    value: function _do() {
      if (property_get("csServicesPerformed").trim().length === 0) visitCouncil();
      visitCouncil();
      var councilText = (0,external_kolmafia_namespaceObject.runChoice)(this.choice);
      return this._verifyIsDone(councilText);
    }
    /**
     * Wrapper function that prepares for a test and then completes it, adding time and turn details to the log.
     *
     * @param prepare A function that does all necessary preparations for this CS test, including choosing your outfit. Optionally returns the number of turns you expect to spend preparing for the test.
     * @param maxTurns We will run the test iff the predicted/actual turns is less than or equal to this parameter.
     * @returns "completed", "failed", or "already completed".
     */
  }, {
    key: "run",
    value: function run(prepare) {
      var _this$timer2;
      var maxTurns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
      if (this.isDone()) return "already completed";
      var _ref = (_this$timer2 = this.timer) !== null && _this$timer2 !== void 0 ? _this$timer2 : {
          time: Date.now(),
          turns: (0,external_kolmafia_namespaceObject.myTurncount)()
        },
        time = _ref.time,
        turns = _ref.turns;
      var additionalTurns;
      try {
        var result = prepare();
        additionalTurns = typeof result === "number" ? result : 0;
      } catch (e) {
        (0,external_kolmafia_namespaceObject.print)("".concat(e), "red");
        return "failed";
      }
      var prediction = this.predictor();
      var council = visitCouncil();
      var turnCost = this._actualCost(council);
      if (!turnCost) return "already completed";
      if (turnCost > Math.min(maxTurns, (0,external_kolmafia_namespaceObject.myAdventures)())) {
        return "failed";
      }
      if (!this.do()) return "failed";
      CommunityService.log[this.property] = {
        predictedTurns: prediction + additionalTurns,
        turnCost: (0,external_kolmafia_namespaceObject.myTurncount)() - turns,
        seconds: (Date.now() - time) / 1000,
        type: "test"
      };
      return "completed";
    }
  }, {
    key: "_verifyIsDone",
    value: function _verifyIsDone(councilText) {
      return !councilText.includes("<input type=hidden name=option value=".concat(this.choice, ">"));
    }
    /**
     * Checks council.php to verify that a test is complete; more reliable than isDone, but requires an additional pagehit.
     *
     * @returns Whether council.php suggests that the test is complete.
     */
  }, {
    key: "verifyIsDone",
    value: function verifyIsDone() {
      return this._verifyIsDone(visitCouncil());
    }
  }, {
    key: "_actualCost",
    value: function _actualCost(councilText) {
      var match = councilText.match("<input type=hidden name=option value=".concat(this.id, ">.*?Perform Service \\((\\d+) Adventures\\)"));
      return match ? parseInt(match[1]) : 0;
    }
    /**
     * Checks council.php for the number of turns this test will take; more reliable than prediction, but requires an additional pagehit.
     *
     * @returns The number of turns to complete this test according to council.php.
     */
  }, {
    key: "actualCost",
    value: function actualCost() {
      return this._actualCost(visitCouncil());
    }
    /**
     * A log of the predicted turns, actual turns, and duration of each CS test performed.
     */
  }], [{
    key: "startTimer",
    value:
    /**
     * Start the time & turn counter for the given task
     *
     * @param name The name of the task to start the counter of
     */
    function startTimer(name) {
      if (!this.taskTimers.has(name)) {
        this.taskTimers.set(name, {
          time: Date.now(),
          turns: (0,external_kolmafia_namespaceObject.myTurncount)()
        });
      }
    }
  }, {
    key: "logTask",
    value: function logTask(name, action) {
      var _action, _this$taskTimers$get;
      var estimatedTurns = (_action = action()) !== null && _action !== void 0 ? _action : 0;
      var _ref2 = (_this$taskTimers$get = this.taskTimers.get(name)) !== null && _this$taskTimers$get !== void 0 ? _this$taskTimers$get : {
          time: Date.now(),
          turns: (0,external_kolmafia_namespaceObject.myTurncount)()
        },
        time = _ref2.time,
        turns = _ref2.turns;
      CommunityService.log[name] = {
        type: "task",
        turnCost: (0,external_kolmafia_namespaceObject.myTurncount)() - turns,
        predictedTurns: estimatedTurns,
        seconds: (Date.now() - time) / 1000
      };
    }
  }, {
    key: "printLog",
    value:
    /**
     * Prints turncount and time details of the test in question.
     *
     * @param colour The colour (or color) you'd like the log to be printed in.
     */
    function printLog() {
      var colour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "blue";
      var logEntries = Object.entries(CommunityService.log);
      for (var _i = 0, _logEntries = logEntries; _i < _logEntries.length; _i++) {
        var _logEntries$_i = CommunityService_slicedToArray(_logEntries[_i], 2),
          testName = _logEntries$_i[0],
          testEntry = _logEntries$_i[1];
        var type = testEntry.type,
          predictedTurns = testEntry.predictedTurns,
          turnCost = testEntry.turnCost,
          seconds = testEntry.seconds;
        if (type === "test") {
          (0,external_kolmafia_namespaceObject.print)("We predicted the ".concat(testName, " test would take ").concat(predictedTurns, " turns, ").concat(predictedTurns === turnCost ? "and" : "but", " it took ").concat(turnCost, " turns."), colour);
          (0,external_kolmafia_namespaceObject.print)("".concat(testName, " took ").concat(seconds.toFixed(1), " seconds."), colour);
        } else {
          if (!(predictedTurns === 0 && turnCost === 0)) {
            (0,external_kolmafia_namespaceObject.print)("We predicted the task ".concat(testName, " would take ").concat(predictedTurns, " turns, ").concat(predictedTurns === turnCost ? "and" : "but", " it took ").concat(turnCost, " turns."), colour);
          }
          (0,external_kolmafia_namespaceObject.print)("The task ".concat(testName, " took ").concat(seconds.toFixed(1), " seconds."), colour);
        }
      }
      var totalTime = utils_sum(logEntries, _ref3 => {
        var _ref4 = CommunityService_slicedToArray(_ref3, 2),
          testEntry = _ref4[1];
        return testEntry.seconds;
      });
      (0,external_kolmafia_namespaceObject.print)("All together, you have spent ".concat(totalTime.toFixed(1), " seconds during this Community Service run"), colour);
    }
    // Below, we have the tests themselves.
  }]);
  return CommunityService;
}();
CommunityService_defineProperty(CommunityService, "taskTimers", new Map());
CommunityService_defineProperty(CommunityService, "log", {});
CommunityService_defineProperty(CommunityService, "HP", new CommunityService(1, "HP", "Donate Blood", () => 60 - Math.floor(((0,external_kolmafia_namespaceObject.myMaxhp)() - (0,external_kolmafia_namespaceObject.myBuffedstat)($stat(CommunityService_templateObject8 || (CommunityService_templateObject8 = CommunityService_taggedTemplateLiteral(["muscle"])))) - 3) / 30), new Requirement(["HP"], {})));
CommunityService_defineProperty(CommunityService, "Muscle", new CommunityService(2, "Muscle", "Feed The Children", statCommunityServicePredictor($stat(CommunityService_templateObject9 || (CommunityService_templateObject9 = CommunityService_taggedTemplateLiteral(["Muscle"])))), new Requirement(["Muscle"], {})));
CommunityService_defineProperty(CommunityService, "Mysticality", new CommunityService(3, "Mysticality", "Build Playground Mazes", statCommunityServicePredictor($stat(CommunityService_templateObject10 || (CommunityService_templateObject10 = CommunityService_taggedTemplateLiteral(["Mysticality"])))), new Requirement(["Mysticality"], {})));
CommunityService_defineProperty(CommunityService, "Moxie", new CommunityService(4, "Moxie", "Feed Conspirators", statCommunityServicePredictor($stat(CommunityService_templateObject11 || (CommunityService_templateObject11 = CommunityService_taggedTemplateLiteral(["Moxie"])))), new Requirement(["Moxie"], {})));
CommunityService_defineProperty(CommunityService, "FamiliarWeight", new CommunityService(5, "Familiar Weight", "Breed More Collies", () => 60 - Math.floor((baseWeight() + (0,external_kolmafia_namespaceObject.weightAdjustment)()) / 5), new Requirement(["Familiar Weight"], {})));
CommunityService_defineProperty(CommunityService, "WeaponDamage", new CommunityService(6, "Weapon Damage", "Reduce Gazelle Population", () => {
  var weaponPower = (0,external_kolmafia_namespaceObject.getPower)((0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject12 || (CommunityService_templateObject12 = CommunityService_taggedTemplateLiteral(["weapon"])))));
  var offhandPower = (0,external_kolmafia_namespaceObject.toSlot)((0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject13 || (CommunityService_templateObject13 = CommunityService_taggedTemplateLiteral(["off-hand"]))))) === $slot(CommunityService_templateObject14 || (CommunityService_templateObject14 = CommunityService_taggedTemplateLiteral(["weapon"]))) ? (0,external_kolmafia_namespaceObject.getPower)((0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject15 || (CommunityService_templateObject15 = CommunityService_taggedTemplateLiteral(["off-hand"]))))) : 0;
  var familiarPower = (0,external_kolmafia_namespaceObject.toSlot)((0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject16 || (CommunityService_templateObject16 = CommunityService_taggedTemplateLiteral(["familiar"]))))) === $slot(CommunityService_templateObject17 || (CommunityService_templateObject17 = CommunityService_taggedTemplateLiteral(["weapon"]))) ? (0,external_kolmafia_namespaceObject.getPower)((0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject18 || (CommunityService_templateObject18 = CommunityService_taggedTemplateLiteral(["familiar"]))))) : 0;
  // mafia does not currently count swagger
  var multiplier = have($effect(CommunityService_templateObject19 || (CommunityService_templateObject19 = CommunityService_taggedTemplateLiteral(["Bow-Legged Swagger"])))) ? 2 : 1;
  // We add 0.001 because the floor function sometimes introduces weird rounding errors
  return 60 - Math.floor(multiplier * (modifier_get("Weapon Damage") - 0.15 * (weaponPower + offhandPower + familiarPower)) / 50 + 0.001) - Math.floor(multiplier * modifier_get("Weapon Damage Percent") / 50 + 0.001);
}, new Requirement(["Weapon Damage", "Weapon Damage Percent"], {})));
CommunityService_defineProperty(CommunityService, "SpellDamage", new CommunityService(7, "Spell Damage", "Make Sausage", () => {
  var dragonfishDamage = (0,external_kolmafia_namespaceObject.myFamiliar)() === template_string_$familiar(CommunityService_templateObject20 || (CommunityService_templateObject20 = CommunityService_taggedTemplateLiteral(["Magic Dragonfish"]))) ? (0,external_kolmafia_namespaceObject.numericModifier)(template_string_$familiar(CommunityService_templateObject21 || (CommunityService_templateObject21 = CommunityService_taggedTemplateLiteral(["Magic Dragonfish"]))), "Spell Damage Percent", baseWeight() + (0,external_kolmafia_namespaceObject.weightAdjustment)(), template_string_$item.none) : 0;
  // We add 0.001 because the floor function sometimes introduces weird rounding errors
  return 60 - Math.floor(modifier_get("Spell Damage") / 50 + 0.001) - Math.floor((modifier_get("Spell Damage Percent") - dragonfishDamage) / 50 + 0.001);
}, new Requirement(["Spell Damage", "Spell Damage Percent"], {})));
CommunityService_defineProperty(CommunityService, "Noncombat", new CommunityService(8, "Non-Combat", "Be a Living Statue", () => {
  var noncombatRate = -1 * modifier_get("Combat Rate");
  var unsoftcappedRate = noncombatRate > 25 ? 25 + (noncombatRate - 25) * 5 : noncombatRate;
  return 60 - 3 * Math.floor(unsoftcappedRate / 5);
}, new Requirement(["-combat"], {})));
CommunityService_defineProperty(CommunityService, "BoozeDrop", new CommunityService(9, "Item Drop", "Make Margaritas", () => {
  var mummingCostume = currentCostumes().get((0,external_kolmafia_namespaceObject.myFamiliar)());
  var mummingBuff = mummingCostume && mummingCostume[0] === "Item Drop" ? mummingCostume[1] : 0;
  var familiarItemDrop = (0,external_kolmafia_namespaceObject.numericModifier)((0,external_kolmafia_namespaceObject.myFamiliar)(), "Item Drop", baseWeight() + (0,external_kolmafia_namespaceObject.weightAdjustment)(), (0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject22 || (CommunityService_templateObject22 = CommunityService_taggedTemplateLiteral(["familiar"]))))) + mummingBuff - (0,external_kolmafia_namespaceObject.numericModifier)((0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject23 || (CommunityService_templateObject23 = CommunityService_taggedTemplateLiteral(["familiar"])))), "Item Drop");
  var familiarBoozeDrop = (0,external_kolmafia_namespaceObject.numericModifier)((0,external_kolmafia_namespaceObject.myFamiliar)(), "Booze Drop", baseWeight() + (0,external_kolmafia_namespaceObject.weightAdjustment)(), (0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject24 || (CommunityService_templateObject24 = CommunityService_taggedTemplateLiteral(["familiar"]))))) - (0,external_kolmafia_namespaceObject.numericModifier)((0,external_kolmafia_namespaceObject.equippedItem)($slot(CommunityService_templateObject25 || (CommunityService_templateObject25 = CommunityService_taggedTemplateLiteral(["familiar"])))), "Booze Drop");
  // Champagne doubling does NOT count for CS, so we undouble
  var multiplier = (0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(CommunityService_templateObject26 || (CommunityService_templateObject26 = CommunityService_taggedTemplateLiteral(["broken champagne bottle"])))) && property_get("garbageChampagneCharge") > 0 ? 0.5 : 1;
  // We add 0.001 because the floor function sometimes introduces weird rounding errors
  return 60 - Math.floor(multiplier * (modifier_get("Item Drop") - familiarItemDrop - (0,external_kolmafia_namespaceObject.numericModifier)((0,external_kolmafia_namespaceObject.myThrall)(), "Item Drop")) / 30 + 0.001) - Math.floor((modifier_get("Booze Drop") - familiarBoozeDrop) / 15 + 0.001);
}, new Requirement(["Item Drop", "2 Booze Drop"], {
  preventEquip: template_string_$items(CommunityService_templateObject27 || (CommunityService_templateObject27 = CommunityService_taggedTemplateLiteral(["broken champagne bottle"])))
})));
CommunityService_defineProperty(CommunityService, "HotRes", new CommunityService(10, "Hot Resistance", "Clean Steam Tunnels", () => 60 - modifier_get("Hot Resistance"), new Requirement(["Hot Resistance"], {})));
CommunityService_defineProperty(CommunityService, "CoilWire", new CommunityService(11, "Coil Wire", "Coil Wire", () => 60, new Requirement([], {})));
CommunityService_defineProperty(CommunityService, "donate", () => {
  visitCouncil();
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=30");
});

;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2018/SongBoom.js
var SongBoom_templateObject;
function SongBoom_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var item = template_string_$item(SongBoom_templateObject || (SongBoom_templateObject = SongBoom_taggedTemplateLiteral(["SongBoom\u2122 BoomBox"])));
/**
 * @returns Whether we `have` the SongBoom™ BoomBox
 */
function SongBoom_have() {
  return haveItem(item);
}
var keywords = {
  "Eye of the Giger": "spooky",
  "Food Vibrations": "food",
  "Remainin' Alive": "dr",
  "These Fists Were Made for Punchin'": "damage",
  "Total Eclipse of Your Meat": "meat"
};
var songBoomSongs = new Set(Object.keys(keywords));
/**
 * @returns The `SongBoomSong` you currently have active; `null` if none is active at this time
 */
function song() {
  var stored = property_get("boomBoxSong");
  return songBoomSongs.has(stored) ? stored : null;
}
/**
 * @returns Song changes left today.
 */
function songChangesLeft() {
  return property_get("_boomBoxSongsLeft");
}
/**
 * Change the song. Throws an error if unable.
 *
 * @param newSong Song to change to.
 * @returns Whether we successfully changed the song; `false` thus means that this was already our current song.
 */
function setSong(newSong) {
  if (song() !== newSong) {
    if (songChangesLeft() === 0) throw new Error("Out of song changes!");
    (0,external_kolmafia_namespaceObject.cliExecute)("boombox ".concat(newSong ? keywords[newSong] : "none"));
    return true;
  } else {
    return false;
  }
}
/**
 * @returns Progress to next song drop (e.g. gathered meat-clip).
 */
function dropProgress() {
  return get("_boomBoxFights");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/AutumnAton.js
var AutumnAton_templateObject, AutumnAton_templateObject2, AutumnAton_templateObject3, AutumnAton_templateObject4, AutumnAton_templateObject5, AutumnAton_templateObject6, AutumnAton_templateObject7, AutumnAton_templateObject8, AutumnAton_templateObject9;
function AutumnAton_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var AutumnAton_item = external_kolmafia_namespaceObject.Item.get("autumn-aton");
/**
 * Is the autumn-aton currently in your inventory, available to deploy?
 *
 * @returns The whether the autumn-aton is currently available for deployment
 */
function available() {
  return (0,external_kolmafia_namespaceObject.availableAmount)(AutumnAton_item) > 0;
}
/**
 * Do you own the autumn-aton?
 *
 * @returns Whether you are an autumn-aton `have`r
 */
function AutumnAton_have() {
  return get("hasAutumnaton") || available();
}
/**
 * Internal function used to parse the fallbot's choice adventure to determine which zones are currently available
 *
 * @param html The pagetext of the fallbot's choice adventure
 * @returns The locations currently available to send the fallbot to
 */
function checkLocations(html) {
  return (0,external_kolmafia_namespaceObject.xpath)(html, '//select[@name="heythereprogrammer"]//option[position()>1]/text()').map(name => (0,external_kolmafia_namespaceObject.toLocation)(name));
}
/**
 * @returns The current location the autumn-aton is questing in; null if it is not on a quest.
 */
function currentlyIn() {
  return get("autumnatonQuestLocation");
}
/**
 * Deploy the autumn-aton to a location of your choosing.
 *
 * @param target A location to send the autumn-aton to, or a prioritized list of locations to send it to, or a function to pick which location to send it to.
 * @param upgrade Should we apply any upgrades we see available?
 * @returns Where we ended up sending the autumn-aton; null if we didn't send it off.
 */
function sendTo(target) {
  var upgrade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (!available()) return null;
  var pageHtml = lib_directlyUse(AutumnAton_item);
  if (upgrade && (0,external_kolmafia_namespaceObject.availableChoiceOptions)()[1]) (0,external_kolmafia_namespaceObject.runChoice)(1);
  var locationsAvailable = checkLocations(pageHtml);
  var location = target instanceof external_kolmafia_namespaceObject.Location ? target : Array.isArray(target) ? target.find(l => locationsAvailable.includes(l)) : target(locationsAvailable);
  if (!location) return null;
  if (!locationsAvailable.includes(location)) return null;
  if (!(0,external_kolmafia_namespaceObject.handlingChoice)()) lib_directlyUse(AutumnAton_item);
  (0,external_kolmafia_namespaceObject.runChoice)(2, "heythereprogrammer=".concat(location.id));
  if ((0,external_kolmafia_namespaceObject.handlingChoice)()) (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
  return location;
}
/**
 * Install any available upgrades for the autumn-aton.
 *
 * @returns Whether there were any upgrades to install.
 */
function upgrade() {
  lib_directlyUse(AutumnAton_item);
  var canUpgrade = (0,external_kolmafia_namespaceObject.availableChoiceOptions)()[1] !== undefined;
  if (canUpgrade) (0,external_kolmafia_namespaceObject.runChoice)(1);
  (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
  return canUpgrade;
}
/**
 * @returns A list of all locations you can send your autumn-aton to right now. Empty if you are unable to send it anywhere.
 */
function availableLocations() {
  if (!available()) return [];
  var pageHtml = directlyUse(AutumnAton_item);
  visitUrl("main.php");
  return checkLocations(pageHtml);
}
/**
 * The mafia names for the autumn-aton upgrades
 */
var possibleUpgrades = (/* unused pure expression or super */ null && (["leftarm1", "leftleg1", "rightarm1", "rightleg1", "base_blackhat", "cowcatcher", "periscope", "radardish", "dualexhaust"]));
/**
 * @returns An array containing the upgrades that you currently have on your autumn-aton.
 */
function currentUpgrades() {
  return property_get("autumnatonUpgrades").split(",");
}
/**
 * @returns The number of turns remaining in your current autumn-aton quest. This number may be negative for any number of reasons.
 */
function turnsLeft() {
  return get("autumnatonQuestTurn") - totalTurnsPlayed();
}
/**
 * @returns The number of leg-upgrades your autumn-aton has installed
 */
function legs() {
  return currentUpgrades().filter(u => u.includes("leg")).length;
}
/**
 * @returns The number of turns we expect your next autumn-aton quest to take.
 */
function turnsForQuest() {
  return 11 * Math.max(1, property_get("_autumnatonQuests") - legs());
}
/**
 * @returns The current visual acuity level of your autumn-aton as determined by the current upgrade-state.
 */
function visualAcuity() {
  var visualUpgrades = ["periscope", "radardish"];
  return 1 + currentUpgrades().filter(u => visualUpgrades.includes(u)).length;
}
/**
 * @returns The number of items from a zone we expect the autumn-aton to steal based on the current upgrade-state. It may not succeed in stealing every item it can.
 */
function zoneItems() {
  return 3 + currentUpgrades().filter(u => u.includes("arm")).length;
}
/**
 * @returns The number of seasonal items we expect the autumn-aton to return with given its current upgrade-state.
 */
function seasonalItems() {
  return currentUpgrades().includes("cowcatcher") ? 2 : 1;
}
var difficulties = (/* unused pure expression or super */ null && (["low", "mid", "high"]));
var UNIQUES = {
  outdoor: {
    low: {
      index: 4,
      item: template_string_$item(AutumnAton_templateObject || (AutumnAton_templateObject = AutumnAton_taggedTemplateLiteral(["autumn leaf"])))
    },
    mid: {
      index: 2,
      item: template_string_$item(AutumnAton_templateObject2 || (AutumnAton_templateObject2 = AutumnAton_taggedTemplateLiteral(["autumn debris shield"])))
    },
    high: {
      index: 6,
      item: template_string_$item(AutumnAton_templateObject3 || (AutumnAton_templateObject3 = AutumnAton_taggedTemplateLiteral(["autumn leaf pendant"])))
    }
  },
  indoor: {
    low: {
      index: 0,
      item: template_string_$item(AutumnAton_templateObject4 || (AutumnAton_templateObject4 = AutumnAton_taggedTemplateLiteral(["AutumnFest ale"])))
    },
    mid: {
      index: 3,
      item: template_string_$item(AutumnAton_templateObject5 || (AutumnAton_templateObject5 = AutumnAton_taggedTemplateLiteral(["autumn-spice donut"])))
    },
    high: {
      index: 7,
      item: template_string_$item(AutumnAton_templateObject6 || (AutumnAton_templateObject6 = AutumnAton_taggedTemplateLiteral(["autumn breeze"])))
    }
  },
  underground: {
    low: {
      index: 1,
      item: template_string_$item(AutumnAton_templateObject7 || (AutumnAton_templateObject7 = AutumnAton_taggedTemplateLiteral(["autumn sweater-weather sweater"])))
    },
    mid: {
      index: 5,
      item: template_string_$item(AutumnAton_templateObject8 || (AutumnAton_templateObject8 = AutumnAton_taggedTemplateLiteral(["autumn dollar"])))
    },
    high: {
      index: 8,
      item: template_string_$item(AutumnAton_templateObject9 || (AutumnAton_templateObject9 = AutumnAton_taggedTemplateLiteral(["autumn years wisdom"])))
    }
  }
};
/**
 * Determines and returns the upgrade and item drop associated with the given location
 *
 * @param location The location to check the expected autumn-aton-unique drops of
 * @returns `null` if the location has no upgrade or drop; otherwise, the upgrade and the autumn-aton item associated with that item
 */
function getUniques(location) {
  var env = location.environment;
  var difficulty = location.difficultyLevel;
  if (arrayContains(env, ["outdoor", "indoor", "underground"]) && arrayContains(difficulty, difficulties)) {
    var _UNIQUES$env$difficul = UNIQUES[env][difficulty],
      index = _UNIQUES$env$difficul.index,
      _item = _UNIQUES$env$difficul.item;
    return {
      upgrade: possibleUpgrades[index],
      item: _item
    };
  }
  return null;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/TrainSet.js
var TrainSet_templateObject;
function TrainSet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var TrainSet_item = template_string_$item(TrainSet_templateObject || (TrainSet_templateObject = TrainSet_taggedTemplateLiteral(["model train set"])));
/**
 * Determines whether the Model Train Set is your current workshed
 *
 * @returns Whether the Model Train Set is your current workshed
 */
function installed() {
  return (0,external_kolmafia_namespaceObject.getWorkshed)() === TrainSet_item;
}
/**
 * Determines whether you `have` the model train set (or if it is installed)
 *
 * @returns Whether you `have` the model train set or it's installed
 */
function TrainSet_have() {
  return installed() || have_(TrainSet_item);
}
var Station;
(function (Station) {
  /**
   * Unknown station
   */
  Station["UNKNOWN"] = "";
  /**
   * Empty station
   */
  Station["EMPTY"] = "empty";
  /**
   * Gain 800 meat
   */
  Station["GAIN_MEAT"] = "meat_mine";
  /**
   * Effect: Regenerate MP
   */
  Station["TOWER_FIZZY"] = "tower_fizzy";
  /**
   * Gain mus, mys, mox stats
   */
  Station["VIEWING_PLATFORM"] = "viewing_platform";
  /**
   * Effect: Hot resist, cold damage
   */
  Station["TOWER_FROZEN"] = "tower_frozen";
  /**
   * Effect: Stench resist, spooky damage
   */
  Station["SPOOKY_GRAVEYARD"] = "spooky_graveyard";
  /**
   * Get smut bridge part, or stats
   */
  Station["LOGGING_MILL"] = "logging_mill";
  /**
   * Get some candy
   */
  Station["CANDY_FACTORY"] = "candy_factory";
  /**
   * Double strength of next station
   */
  Station["COAL_HOPPER"] = "coal_hopper";
  /**
   * Effect: Cold resist, stench damage
   */
  Station["TOWER_SEWAGE"] = "tower_sewage";
  /**
   * Effect: Spooky resist, sleaze damage
   */
  Station["OIL_REFINERY"] = "oil_refinery";
  /**
   * Effect: Sleaze resist, hot damage
   */
  Station["OIL_BRIDGE"] = "oil_bridge";
  /**
   * Effect: Increased Monster Level
   */
  Station["WATER_BRIDGE"] = "water_bridge";
  /**
   * Get moxie stats
   */
  Station["GROIN_SILO"] = "groin_silo";
  /**
   * Get random booze
   */
  Station["GRAIN_SILO"] = "grain_silo";
  /**
   * Get mys stats
   */
  Station["BRAIN_SILO"] = "brain_silo";
  /**
   * Get muscle stats
   */
  Station["BRAWN_SILO"] = "brawn_silo";
  /**
   * Effect: 50% food drop
   */
  Station["PRAWN_SILO"] = "prawn_silo";
  /**
   * Dupe last food dropped, or gain random food
   */
  Station["TRACKSIDE_DINER"] = "trackside_diner";
  /**
   * Drop random ore, or trapper ore if known
   */
  Station["ORE_HOPPER"] = "ore_hopper";
})(Station || (Station = {}));
var trainsetEffects = new Map([[Station.TOWER_FIZZY, external_kolmafia_namespaceObject.Effect.get("Carbonated")], [Station.TOWER_FROZEN, external_kolmafia_namespaceObject.Effect.get("Frozen")], [Station.SPOOKY_GRAVEYARD, external_kolmafia_namespaceObject.Effect.get("Shivering Spine")], [Station.TOWER_SEWAGE, external_kolmafia_namespaceObject.Effect.get("Hot Soupy Garbage")], [Station.OIL_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Burningly Oiled")], [Station.OIL_REFINERY, external_kolmafia_namespaceObject.Effect.get("Spookily Greasy")], [Station.WATER_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Troubled Waters")], [Station.PRAWN_SILO, external_kolmafia_namespaceObject.Effect.get("Craving Prawns")]]);
var trainsetEffectsDoubled = new Map([[Station.TOWER_FIZZY, external_kolmafia_namespaceObject.Effect.get("Double Carbonated")], [Station.TOWER_FROZEN, external_kolmafia_namespaceObject.Effect.get("Double Frozen")], [Station.SPOOKY_GRAVEYARD, external_kolmafia_namespaceObject.Effect.get("Doubly Shivering Spine")], [Station.TOWER_SEWAGE, external_kolmafia_namespaceObject.Effect.get("Double Hot Soupy Garbage")], [Station.OIL_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Doubly Burningly Oiled")], [Station.OIL_REFINERY, external_kolmafia_namespaceObject.Effect.get("Doubly Spookily Greasy")], [Station.WATER_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Doubly Troubled Waters")], [Station.PRAWN_SILO, external_kolmafia_namespaceObject.Effect.get("Doubly Craving Prawns")]]);
/**
 * Returns an effect--if one exists--for a given train station
 *
 * @param station The train station to check the effect of
 * @returns The effect associated with the given station
 */
function effect(station) {
  var _trainsetEffects$get;
  return (_trainsetEffects$get = trainsetEffects.get(station)) !== null && _trainsetEffects$get !== void 0 ? _trainsetEffects$get : null;
}
/**
 * Returns an effect--if one exists--for a given train station, assuming it's been primed by the coal station
 *
 * @param station The train station to check the doubled effect of
 * @returns The effect associated with given station, under the influence of coal
 */
function doubledEffect(station) {
  var _trainsetEffectsDoubl;
  return (_trainsetEffectsDoubl = trainsetEffectsDoubled.get(station)) !== null && _trainsetEffectsDoubl !== void 0 ? _trainsetEffectsDoubl : null;
}
/**
 * Determines the current configuration of train stations
 *
 * @returns An 8-tuple consisting of the stations currently installed in your Model Train Set; this functions even if the Model Train Set isn't your active workshed
 */
function cycle() {
  return property_get("trainsetConfiguration").split(",");
}
/**
 * Determines how many turns until you can next configure the Model Train Set
 *
 * @returns How many turns until you can next configure the Model Train Set
 */
function nextConfigurable() {
  return clamp(property_get("lastTrainsetConfiguration") + 40 - property_get("trainsetPosition"), 0, 40);
}
/**
 * Determines whether you can currently configure your Model Train Set
 *
 * @returns Whether you can currently configure your Model Train Set
 */
function canConfigure() {
  return installed() && !nextConfigurable();
}
var pieces = [Station.EMPTY, Station.GAIN_MEAT, Station.TOWER_FIZZY, Station.VIEWING_PLATFORM, Station.TOWER_FROZEN, Station.SPOOKY_GRAVEYARD, Station.LOGGING_MILL, Station.CANDY_FACTORY, Station.COAL_HOPPER, Station.TOWER_SEWAGE, Station.UNKNOWN, Station.OIL_REFINERY, Station.OIL_BRIDGE, Station.WATER_BRIDGE, Station.GROIN_SILO, Station.GRAIN_SILO, Station.BRAIN_SILO, Station.BRAWN_SILO, Station.PRAWN_SILO, Station.TRACKSIDE_DINER, Station.ORE_HOPPER];
/**
 * Converts a given station to the integer value KoL associates with them
 *
 * @param station The station in question
 * @returns The integer value KoL assigns the train station in question
 */
function stationToInt(station) {
  return pieces.indexOf(station);
}
/**
 * Sets your model train station to the given configuration, if able
 *
 * @param configuration The cycle to try to set your model train station to
 * @returns Whether your model train station matches the given configuration
 */
function setConfiguration(configuration) {
  if (!canConfigure()) return false;
  (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed");
  (0,external_kolmafia_namespaceObject.runChoice)(1, "forceoption=0".concat(configuration.map((station, index) => "&slot[".concat(index, "]=").concat(stationToInt(station))).join("")));
  (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
  var currentConfiguration = cycle();
  return configuration.every((station, index) => station === currentConfiguration[index]);
}
/**
 * Determines the next station you expect to encounter when the Model Train Station is active
 *
 * @returns The next station you expect to encounter when the Model Train Station is active
 */
function next() {
  return cycle()[get("trainsetPosition") % 8];
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/CombatLoversLocket.js
var CombatLoversLocket_templateObject;
function CombatLoversLocket_slicedToArray(arr, i) { return CombatLoversLocket_arrayWithHoles(arr) || CombatLoversLocket_iterableToArrayLimit(arr, i) || CombatLoversLocket_unsupportedIterableToArray(arr, i) || CombatLoversLocket_nonIterableRest(); }
function CombatLoversLocket_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function CombatLoversLocket_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CombatLoversLocket_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CombatLoversLocket_arrayLikeToArray(o, minLen); }
function CombatLoversLocket_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function CombatLoversLocket_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function CombatLoversLocket_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function CombatLoversLocket_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var locket = template_string_$item(CombatLoversLocket_templateObject || (CombatLoversLocket_templateObject = CombatLoversLocket_taggedTemplateLiteral(["combat lover's locket"])));
/**
 * @returns Whether you `have` the Combat Lover's Locket
 */
function CombatLoversLocket_have() {
  return have(locket);
}
/**
 * Filters the set of all unlocked locket monsters to only the ones available to be locketed right now.
 *
 * @returns An array consisting of all Monsters you can fight with your locket right now.
 */
function availableLocketMonsters() {
  if (reminiscesLeft() === 0) return [];
  return Object.entries(getLocketMonsters()).filter(_ref => {
    var _ref2 = CombatLoversLocket_slicedToArray(_ref, 2),
      unused = _ref2[1];
    return unused;
  }).map(_ref3 => {
    var _ref4 = CombatLoversLocket_slicedToArray(_ref3, 1),
      name = _ref4[0];
    return toMonster(name);
  });
}
/**
 * Parses getLocketMonsters and returns the collection of all Monsters as an Array.
 *
 * @returns An array consisting of all Monsters you can hypothetically fight, regardless of whether they've been fought today.
 */
function unlockedLocketMonsters() {
  return Object.entries(getLocketMonsters()).map(_ref5 => {
    var _ref6 = CombatLoversLocket_slicedToArray(_ref5, 1),
      name = _ref6[0];
    return toMonster(name);
  });
}
function parseLocketProperty() {
  return property_get("_locketMonstersFought").split(",").filter(id => id.trim().length > 0);
}
/**
 * Determines how many reminisces remain by parsing the _locketMonstersFought property.
 *
 * @returns The number of reminisces a player has available; 0 if they lack the Locket.
 */
function reminiscesLeft() {
  return CombatLoversLocket_have() ? clamp(3 - parseLocketProperty().length, 0, 3) : 0;
}
/**
 * Determines which monsters were reminisced today by parsing the _locketMonstersFought property.
 *
 * @returns An array consisting of the Monsters reminisced today.
 */
function monstersReminisced() {
  return parseLocketProperty().map(id => (0,external_kolmafia_namespaceObject.toMonster)(id));
}
/**
 * Fight a Monster using the Combat Lover's Locket
 *
 * @param monster The Monster to fight
 * @returns false if we are unable to reminisce about this monster. Else, returns whether, at the end of all things, we have reminisced about this monster.
 */
function reminisce(monster) {
  if (!CombatLoversLocket_have() || reminiscesLeft() === 0 || !(0,external_kolmafia_namespaceObject.getLocketMonsters)()[monster.name]) {
    return false;
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("reminisce ".concat(monster));
  (0,external_kolmafia_namespaceObject.runCombat)();
  return monstersReminisced().includes(monster);
}
/**
 * This function efficiently evaluates all of an adventurer's possibly reminiscable monsters, placing them through a filtering criteria and evaluating them based on a passed function.
 *
 * @param criteria A filtering function for delineating which monsters are "fair game" for the search, such as "is this monster free".
 * @param value A function for deciding which monsters are "better" than others.
 * @returns A singular monster that fulfills the criteria function and maximizes the value function.
 */
function findMonster(criteria) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => 1;
  if (!CombatLoversLocket_have() || reminiscesLeft() === 0) return null;
  var options = availableLocketMonsters().filter(criteria);
  if (!options.length) return null;
  return options.reduce((a, b) => value(a) > value(b) ? a : b);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2020/Cartography.js
var Cartography_templateObject, Cartography_templateObject2;
function Cartography_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var passive = template_string_$skill(Cartography_templateObject || (Cartography_templateObject = Cartography_taggedTemplateLiteral(["Comprehensive Cartography"])));
/**
 * Determines whether you `have` the skill Comprehensive Cartography
 *
 * @returns Whether you currently `have` the skill
 */
function Cartography_have() {
  return have(passive);
}
/**
 * Map a particular monster in a particular location
 * You'll need to set your autoattack or CCS in advance of using this. Additionally, it will loop to try to avoid time-spinner pranks or zone intro adventures
 *
 * @param location The location to target
 * @param monster The monster to target
 * @returns Whether we successfully mapped the monster
 */
function mapMonster(location, monster) {
  if (!Cartography_have()) return false;
  if (property_get("_monstersMapped") >= 3) return false;
  if (!(0,external_kolmafia_namespaceObject.canAdventure)(location)) return false;
  (0,external_kolmafia_namespaceObject.useSkill)(template_string_$skill(Cartography_templateObject2 || (Cartography_templateObject2 = Cartography_taggedTemplateLiteral(["Map the Monsters"]))));
  if (!property_get("mappingMonsters")) return false;
  var turns = (0,external_kolmafia_namespaceObject.myTurncount)();
  while ((0,external_kolmafia_namespaceObject.currentRound)() < 1) {
    // Not in combat
    if ((0,external_kolmafia_namespaceObject.myTurncount)() > turns) {
      throw new Error("Map the Monsters unsuccessful?");
    }
    (0,external_kolmafia_namespaceObject.visitUrl)((0,external_kolmafia_namespaceObject.toUrl)(location));
    if ((0,external_kolmafia_namespaceObject.handlingChoice)() && (0,external_kolmafia_namespaceObject.lastChoice)() === 1435) {
      (0,external_kolmafia_namespaceObject.runChoice)(1, "heyscriptswhatsupwinkwink=".concat(monster.id));
      return true;
    } else {
      (0,external_kolmafia_namespaceObject.runChoice)(-1, false);
    }
  }
  return false;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2018/LatteLoversMembersMug.js
var LatteLoversMembersMug_templateObject, LatteLoversMembersMug_templateObject2, LatteLoversMembersMug_templateObject3, LatteLoversMembersMug_templateObject4, LatteLoversMembersMug_templateObject5, LatteLoversMembersMug_templateObject6, LatteLoversMembersMug_templateObject7, LatteLoversMembersMug_templateObject8, LatteLoversMembersMug_templateObject9, LatteLoversMembersMug_templateObject10, LatteLoversMembersMug_templateObject11, LatteLoversMembersMug_templateObject12, LatteLoversMembersMug_templateObject13, LatteLoversMembersMug_templateObject14, LatteLoversMembersMug_templateObject15, LatteLoversMembersMug_templateObject16, LatteLoversMembersMug_templateObject17, LatteLoversMembersMug_templateObject18, LatteLoversMembersMug_templateObject19, LatteLoversMembersMug_templateObject20, LatteLoversMembersMug_templateObject21, LatteLoversMembersMug_templateObject22, LatteLoversMembersMug_templateObject23, LatteLoversMembersMug_templateObject24, LatteLoversMembersMug_templateObject25, LatteLoversMembersMug_templateObject26, LatteLoversMembersMug_templateObject27, LatteLoversMembersMug_templateObject28, LatteLoversMembersMug_templateObject29, LatteLoversMembersMug_templateObject30, LatteLoversMembersMug_templateObject31, LatteLoversMembersMug_templateObject32, LatteLoversMembersMug_templateObject33, LatteLoversMembersMug_templateObject34, LatteLoversMembersMug_templateObject35, LatteLoversMembersMug_templateObject36, LatteLoversMembersMug_templateObject37, LatteLoversMembersMug_templateObject38, LatteLoversMembersMug_templateObject39, LatteLoversMembersMug_templateObject40, LatteLoversMembersMug_templateObject41, LatteLoversMembersMug_templateObject42, LatteLoversMembersMug_templateObject43, LatteLoversMembersMug_templateObject44, LatteLoversMembersMug_templateObject45, LatteLoversMembersMug_templateObject46, LatteLoversMembersMug_templateObject47, LatteLoversMembersMug_templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53;
function LatteLoversMembersMug_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






/**
 * @returns Whether we `have` the latte lovers member's mug
 */
function LatteLoversMembersMug_have() {
  return haveItem($item(LatteLoversMembersMug_templateObject || (LatteLoversMembersMug_templateObject = LatteLoversMembersMug_taggedTemplateLiteral(["latte lovers member's mug"]))));
}
/**
 * @returns The current target of `Offer Latte`, assuming the effect is active; otherwise, `null`
 */
function sniffedMonster() {
  return Counter.exists("Latte Monster") ? get("_latteMonster") : null;
}
/**
 * @returns The number of latte refills remaining for the day
 */
function refillsRemaining() {
  return clamp(3 - property_get("_latteRefillsUsed"), 0, 3);
}
var INGREDIENTS = {
  ancient: {
    modifier: {
      "Spooky Damage": 50
    },
    location: $location(LatteLoversMembersMug_templateObject2 || (LatteLoversMembersMug_templateObject2 = LatteLoversMembersMug_taggedTemplateLiteral(["The Mouldering Mansion"])))
  },
  asp: {
    modifier: {
      "Weapon Damage": 25
    },
    location: $location(LatteLoversMembersMug_templateObject3 || (LatteLoversMembersMug_templateObject3 = LatteLoversMembersMug_taggedTemplateLiteral(["The Middle Chamber"])))
  },
  basil: {
    modifier: {
      "HP Regen Min": 5,
      "HP Regen Max": 5
    },
    location: $location(LatteLoversMembersMug_templateObject4 || (LatteLoversMembersMug_templateObject4 = LatteLoversMembersMug_taggedTemplateLiteral(["The Overgrown Lot"])))
  },
  belgian: {
    modifier: {
      "Moxie Percent": 20,
      "Mysticality Percent": 20,
      "Muscle Percent": 20
    },
    location: $location(LatteLoversMembersMug_templateObject5 || (LatteLoversMembersMug_templateObject5 = LatteLoversMembersMug_taggedTemplateLiteral(["Whitey's Grove"])))
  },
  chalk: {
    modifier: {
      "Cold Damage": 25
    },
    location: $location(LatteLoversMembersMug_templateObject6 || (LatteLoversMembersMug_templateObject6 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Billiards Room"])))
  },
  "bug-thistle": {
    modifier: {
      Mysticality: 20
    },
    location: $location(LatteLoversMembersMug_templateObject7 || (LatteLoversMembersMug_templateObject7 = LatteLoversMembersMug_taggedTemplateLiteral(["The Bugbear Pen"])))
  },
  butternut: {
    modifier: {
      "Spell Damage": 10
    },
    location: $location(LatteLoversMembersMug_templateObject8 || (LatteLoversMembersMug_templateObject8 = LatteLoversMembersMug_taggedTemplateLiteral(["Madness Bakery"])))
  },
  cajun: {
    modifier: {
      "Meat Drop": 40
    },
    location: $location(LatteLoversMembersMug_templateObject9 || (LatteLoversMembersMug_templateObject9 = LatteLoversMembersMug_taggedTemplateLiteral(["The Black Forest"])))
  },
  carrot: {
    modifier: {
      "Item Drop": 20
    },
    location: $location(LatteLoversMembersMug_templateObject10 || (LatteLoversMembersMug_templateObject10 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dire Warren"])))
  },
  carrrdamom: {
    modifier: {
      "MP Regen Min": 4,
      "MP Regen Max": 6
    },
    location: $location(LatteLoversMembersMug_templateObject11 || (LatteLoversMembersMug_templateObject11 = LatteLoversMembersMug_taggedTemplateLiteral(["Barrrney's Barrr"])))
  },
  chili: {
    modifier: {
      "Hot Resistance": 3
    },
    location: $location(LatteLoversMembersMug_templateObject12 || (LatteLoversMembersMug_templateObject12 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Kitchen"])))
  },
  clove: {
    modifier: {
      "Stench Resistance": 3
    },
    location: $location(LatteLoversMembersMug_templateObject13 || (LatteLoversMembersMug_templateObject13 = LatteLoversMembersMug_taggedTemplateLiteral(["The Sleazy Back Alley"])))
  },
  coal: {
    modifier: {
      "Hot Damage": 25
    },
    location: $location(LatteLoversMembersMug_templateObject14 || (LatteLoversMembersMug_templateObject14 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Boiler Room"])))
  },
  cocoa: {
    modifier: {
      "Cold Resistance": 3
    },
    location: $location(LatteLoversMembersMug_templateObject15 || (LatteLoversMembersMug_templateObject15 = LatteLoversMembersMug_taggedTemplateLiteral(["The Icy Peak"])))
  },
  diet: {
    modifier: {
      Initiative: 50
    },
    location: $location(LatteLoversMembersMug_templateObject16 || (LatteLoversMembersMug_templateObject16 = LatteLoversMembersMug_taggedTemplateLiteral(["Battlefield (No Uniform)"])))
  },
  dwarf: {
    modifier: {
      Muscle: 30
    },
    location: $location(LatteLoversMembersMug_templateObject17 || (LatteLoversMembersMug_templateObject17 = LatteLoversMembersMug_taggedTemplateLiteral(["Itznotyerzitz Mine"])))
  },
  dyspepsi: {
    modifier: {
      Initiative: 25
    },
    location: $location(LatteLoversMembersMug_templateObject18 || (LatteLoversMembersMug_templateObject18 = LatteLoversMembersMug_taggedTemplateLiteral(["Battlefield (Dyspepsi Uniform)"])))
  },
  filth: {
    modifier: {
      "Damage Reduction": 20
    },
    location: $location(LatteLoversMembersMug_templateObject19 || (LatteLoversMembersMug_templateObject19 = LatteLoversMembersMug_taggedTemplateLiteral(["The Feeding Chamber"])))
  },
  grass: {
    modifier: {
      Experience: 3
    },
    location: $location(LatteLoversMembersMug_templateObject20 || (LatteLoversMembersMug_templateObject20 = LatteLoversMembersMug_taggedTemplateLiteral(["The Hidden Park"])))
  },
  fungus: {
    modifier: {
      "Maximum MP": 30
    },
    location: $location(LatteLoversMembersMug_templateObject21 || (LatteLoversMembersMug_templateObject21 = LatteLoversMembersMug_taggedTemplateLiteral(["The Fungal Nethers"])))
  },
  mold: {
    modifier: {
      "Spooky Damage": 20
    },
    location: $location(LatteLoversMembersMug_templateObject22 || (LatteLoversMembersMug_templateObject22 = LatteLoversMembersMug_taggedTemplateLiteral(["The Unquiet Garves"])))
  },
  greek: {
    modifier: {
      "Sleaze Damage": 25
    },
    location: $location(LatteLoversMembersMug_templateObject23 || (LatteLoversMembersMug_templateObject23 = LatteLoversMembersMug_taggedTemplateLiteral(["Wartime Frat House"])))
  },
  grobold: {
    modifier: {
      "Sleaze Damage": 25
    },
    location: $location(LatteLoversMembersMug_templateObject24 || (LatteLoversMembersMug_templateObject24 = LatteLoversMembersMug_taggedTemplateLiteral(["The Old Rubee Mine"])))
  },
  guarna: {
    modifier: {
      Adventures: 4
    },
    location: $location(LatteLoversMembersMug_templateObject25 || (LatteLoversMembersMug_templateObject25 = LatteLoversMembersMug_taggedTemplateLiteral(["The Bat Hole Entrance"])))
  },
  gunpowder: {
    modifier: {
      "Weapon Damage": 50
    },
    location: $location(LatteLoversMembersMug_templateObject26 || (LatteLoversMembersMug_templateObject26 = LatteLoversMembersMug_taggedTemplateLiteral(["1st Floor, Shiawase-Mitsuhama Building"])))
  },
  healing: {
    modifier: {
      "HP Regen Min": 10,
      "HP Regen Max": 20
    },
    location: $location(LatteLoversMembersMug_templateObject27 || (LatteLoversMembersMug_templateObject27 = LatteLoversMembersMug_taggedTemplateLiteral(["The Daily Dungeon"])))
  },
  hellion: {
    modifier: {
      "PvP Fights": 6
    },
    location: $location(LatteLoversMembersMug_templateObject28 || (LatteLoversMembersMug_templateObject28 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dark Neck of the Woods"])))
  },
  hobo: {
    modifier: {
      "Damage Absorption": 50
    },
    location: $location(LatteLoversMembersMug_templateObject29 || (LatteLoversMembersMug_templateObject29 = LatteLoversMembersMug_taggedTemplateLiteral(["Hobopolis Town Square"])))
  },
  greasy: {
    modifier: {
      "Muscle Percent": 50
    },
    location: $location(LatteLoversMembersMug_templateObject30 || (LatteLoversMembersMug_templateObject30 = LatteLoversMembersMug_taggedTemplateLiteral(["Cobb's Knob Barracks"])))
  },
  wing: {
    modifier: {
      "Combat Rate": 10
    },
    location: $location(LatteLoversMembersMug_templateObject31 || (LatteLoversMembersMug_templateObject31 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dark Heart of the Woods"])))
  },
  ink: {
    modifier: {
      "Combat Rate": -10
    },
    location: $location(LatteLoversMembersMug_templateObject32 || (LatteLoversMembersMug_templateObject32 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Library"])))
  },
  kombucha: {
    modifier: {
      "Stench Damage": 25
    },
    location: $location(LatteLoversMembersMug_templateObject33 || (LatteLoversMembersMug_templateObject33 = LatteLoversMembersMug_taggedTemplateLiteral(["Wartime Hippy Camp"])))
  },
  lihc: {
    modifier: {
      "Spooky Damage": 25
    },
    location: $location(LatteLoversMembersMug_templateObject34 || (LatteLoversMembersMug_templateObject34 = LatteLoversMembersMug_taggedTemplateLiteral(["The Defiled Niche"])))
  },
  lizard: {
    modifier: {
      "MP Regen Min": 5,
      "MP Regen Max": 15
    },
    location: $location(LatteLoversMembersMug_templateObject35 || (LatteLoversMembersMug_templateObject35 = LatteLoversMembersMug_taggedTemplateLiteral(["The Arid, Extra-Dry Desert"])))
  },
  macaroni: {
    modifier: {
      "Maximum HP": 20
    },
    location: $location(LatteLoversMembersMug_templateObject36 || (LatteLoversMembersMug_templateObject36 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Pantry"])))
  },
  mega: {
    modifier: {
      "Moxie Percent": 50
    },
    location: $location(LatteLoversMembersMug_templateObject37 || (LatteLoversMembersMug_templateObject37 = LatteLoversMembersMug_taggedTemplateLiteral(["Cobb's Knob Laboratory"])))
  },
  oil: {
    modifier: {
      "Sleaze Damage": 20
    },
    location: $location(LatteLoversMembersMug_templateObject38 || (LatteLoversMembersMug_templateObject38 = LatteLoversMembersMug_taggedTemplateLiteral(["The Old Landfill"])))
  },
  msg: {
    modifier: {
      "Critical Hit Percent": 15
    },
    location: $location(LatteLoversMembersMug_templateObject39 || (LatteLoversMembersMug_templateObject39 = LatteLoversMembersMug_taggedTemplateLiteral(["The Briniest Deepests"])))
  },
  norwhal: {
    modifier: {
      "Maximum HP Percent": 200
    },
    location: $location(LatteLoversMembersMug_templateObject40 || (LatteLoversMembersMug_templateObject40 = LatteLoversMembersMug_taggedTemplateLiteral(["The Ice Hole"])))
  },
  paint: {
    modifier: {
      "Prismatic Damage": 5
    },
    location: $location(LatteLoversMembersMug_templateObject41 || (LatteLoversMembersMug_templateObject41 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Gallery"])))
  },
  paradise: {
    modifier: {
      Moxie: 20,
      Muscle: 20,
      Mysticality: 20
    },
    location: $location(LatteLoversMembersMug_templateObject42 || (LatteLoversMembersMug_templateObject42 = LatteLoversMembersMug_taggedTemplateLiteral(["The Stately Pleasure Dome"])))
  },
  rawhide: {
    modifier: {
      "Familiar Weight": 5
    },
    location: $location(LatteLoversMembersMug_templateObject43 || (LatteLoversMembersMug_templateObject43 = LatteLoversMembersMug_taggedTemplateLiteral(["The Spooky Forest"])))
  },
  rock: {
    modifier: {
      "Critical Hit Percent": 10
    },
    location: $location(LatteLoversMembersMug_templateObject44 || (LatteLoversMembersMug_templateObject44 = LatteLoversMembersMug_taggedTemplateLiteral(["The Brinier Deepers"])))
  },
  salt: {
    modifier: {
      "Critical Hit Percent": 5
    },
    location: $location(LatteLoversMembersMug_templateObject45 || (LatteLoversMembersMug_templateObject45 = LatteLoversMembersMug_taggedTemplateLiteral(["The Briny Deeps"])))
  },
  sandalwood: {
    modifier: {
      Moxie: 5,
      Muscle: 5,
      Mysticality: 5
    },
    location: $location(LatteLoversMembersMug_templateObject46 || (LatteLoversMembersMug_templateObject46 = LatteLoversMembersMug_taggedTemplateLiteral(["Noob Cave"])))
  },
  sausage: {
    modifier: {
      "Mysticality Percent": 50
    },
    location: $location(LatteLoversMembersMug_templateObject47 || (LatteLoversMembersMug_templateObject47 = LatteLoversMembersMug_taggedTemplateLiteral(["Cobb's Knob Kitchens"])))
  },
  space: {
    modifier: {
      Moxie: 10,
      Muscle: 10,
      Mysticality: 10
    },
    location: $location(LatteLoversMembersMug_templateObject48 || (LatteLoversMembersMug_templateObject48 = LatteLoversMembersMug_taggedTemplateLiteral(["The Hole in the Sky"])))
  },
  squash: {
    modifier: {
      "Spell Damage": 10
    },
    location: $location(_templateObject49 || (_templateObject49 = LatteLoversMembersMug_taggedTemplateLiteral(["The Copperhead Club"])))
  },
  teeth: {
    modifier: {
      "Spooky Damage": 25,
      "Weapon Damage": 25
    },
    location: $location(_templateObject50 || (_templateObject50 = LatteLoversMembersMug_taggedTemplateLiteral(["The VERY Unquiet Garves"])))
  },
  vitamin: {
    modifier: {
      "Familiar Experience": 3
    },
    location: $location(_templateObject51 || (_templateObject51 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dark Elbow of the Woods"])))
  },
  flour: {
    modifier: {
      "Sleaze Resistance": 3
    },
    location: $location(_templateObject52 || (_templateObject52 = LatteLoversMembersMug_taggedTemplateLiteral(["The Road to the White Citadel"])))
  },
  squamous: {
    modifier: {
      "Spooky Resistance": 3
    },
    location: $location(_templateObject53 || (_templateObject53 = LatteLoversMembersMug_taggedTemplateLiteral(["The Caliginous Abyss"])))
  },
  pumpkin: {
    modifier: {
      "Mysticality Experience": 1,
      "Spell Damage": 5,
      "Mysticality Percent": 5
    },
    location: null
  },
  cinnamon: {
    modifier: {
      "Moxie Experience": 1,
      "Pickpocket Rate": 5,
      "Moxie Percent": 5
    },
    location: null
  },
  vanilla: {
    modifier: {
      "Muscle Experience": 1,
      "Weapon Damage Percent": 5,
      "Muscle Percent": 5
    },
    location: null
  }
};
/**
 * @returns An array consisting of the Ingredients you've unlocked so far this ascension
 */
function ingredientsUnlocked() {
  return property_get("latteUnlocks").split(",");
}
/**
 * Fill the latte with ingredients of your choosing
 *
 * @param ingredients Ingredients to fill the latte with
 * @returns Whether we succeeded in this endeavor
 */
function fill() {
  if (refillsRemaining() <= 0) return false;
  for (var _len = arguments.length, ingredients = new Array(_len), _key = 0; _key < _len; _key++) {
    ingredients[_key] = arguments[_key];
  }
  if (new Set(ingredients).size < 3) return false;
  if (ingredients.some(i => !ingredientsUnlocked().includes(i))) return false;
  return (0,external_kolmafia_namespaceObject.cliExecute)("latte refill ".concat(ingredients.join(" ")));
}
/**
 * @param ingredient A latte ingredient
 * @returns An object containing the modifiers associated with that latte ingredient
 */
function modifierOf(ingredient) {
  return INGREDIENTS[ingredient].modifier;
}
/**
 * @param ingredient A latte ingredient
 * @returns The location that can be used to unlock said ingredient; null if the ingredient is free
 */
function locationOf(ingredient) {
  return INGREDIENTS[ingredient].location;
}
/**
 * @returns An array consisting of all Ingredients currently in your latte
 */
function currentIngredients() {
  return getProperty("latteIngredients").split(",");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/Witchess.js
var Witchess_templateObject;
function Witchess_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var Witchess_item = template_string_$item(Witchess_templateObject || (Witchess_templateObject = Witchess_taggedTemplateLiteral(["Witchess Set"])));
/**
 * @returns Is the Witchess installed and available in our campground?
 */
function Witchess_have() {
  return haveInCampground(Witchess_item);
}
/**
 * @returns How many Witchess fights have we done so far today?
 */
function fightsDone() {
  return get("_witchessFights");
}
var Witchess_pieces = external_kolmafia_namespaceObject.Monster.get(["Witchess Pawn", "Witchess Knight", "Witchess Bishop", "Witchess Rook", "Witchess Queen", "Witchess King", "Witchess Witch", "Witchess Ox"]);
/**
 * Fight a Witchess piece of your choice
 *
 * @param piece The piece to fight
 * @returns The value of `runCombat()`, which is the page html of the final round
 */
function fightPiece(piece) {
  if (!Witchess_pieces.includes(piece)) throw new Error("That is not a valid piece.");
  if (!(0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=witchess").includes("whichchoice value=1181")) {
    throw new Error("Failed to open Witchess.");
  }
  if (!(0,external_kolmafia_namespaceObject.runChoice)(1).includes("whichchoice=1182")) {
    throw new Error("Failed to visit shrink ray.");
  }
  if (!(0,external_kolmafia_namespaceObject.visitUrl)("choice.php?option=1&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&whichchoice=1182&piece=").concat(piece.id), false).includes(piece.name)) {
    throw new Error("Failed to start fight.");
  }
  return (0,external_kolmafia_namespaceObject.runCombat)();
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/DeckOfEveryCard.js
var DeckOfEveryCard_templateObject;
function DeckOfEveryCard_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





/**
 * @returns Do we `have` the Deck of Every Card?
 */
function DeckOfEveryCard_have() {
  return have_($item(DeckOfEveryCard_templateObject || (DeckOfEveryCard_templateObject = DeckOfEveryCard_taggedTemplateLiteral(["Deck of Every Card"]))));
}
var cards = Object.freeze(["X of Clubs", "X of Diamonds", "X of Hearts", "X of Spades", "X of Papayas", "X of Kumquats", "X of Salads", "X of Cups", "X of Coins", "X of Swords", "X of Wands", "XVI - The Tower", "Professor Plum", "Spare Tire", "Extra Tank", "Sheep", "Year of Plenty", "Mine", "Laboratory", "Plains", "Swamp", "Mountain", "Forest", "Island", "Lead Pipe", "Rope", "Wrench", "Candlestick", "Knife", "Revolver", "Gift Card", "1952 Mickey Mantle", "XXI - The World", "III - The Empress", "VI - The Lovers", "Healing Salve", "Dark Ritual", "Lightning Bolt", "Giant Growth", "Ancestral Recall", "XI - Strength", "I - The Magician", "0 - The Fool", "X - The Wheel of Fortune", "The Race Card", "Green Card", "IV - The Emperor", "IX - The Hermit", "Werewolf", "The Hive", "XVII - The Star", "VII - The Chariot", "XV - The Devil", "V - The Hierophant", "Fire Elemental", "Christmas Card", "Go Fish", "Goblin Sapper", "II - The High Priestess", "XIV - Temperance", "XVIII - The Moon", "Hunky Fireman Card", "Aquarius Horoscope", "XII - The Hanged Man", "Suit Warehouse Discount Card", "Pirate Birthday Card", "Plantable Greeting Card", "Slimer Trading Card", "XIII - Death", "Unstable Portal"]);
/**
 * @returns The number of cards we've drawn so far today--remember, cheating counts as 5
 */
function getCardsDrawn() {
  return clamp(property_get("_deckCardsDrawn"), 0, 15);
}
/**
 * @returns The number of draws we have remaining today--remember, cheating counts as 5
 */
function getRemainingDraws() {
  return 15 - getCardsDrawn();
}
/**
 * @returns The number of additional cards we can cheat today
 */
function getRemainingCheats() {
  return Math.floor(getRemainingDraws() / 5);
}
/**
 * @returns An array of the Cards we've seen today
 */
function getCardsSeen() {
  return property_get("_deckCardsSeen") ? property_get("_deckCardsSeen").split("|") : [];
}
/**
 * Cheat a card of your choice from the Deck
 *
 * @param card The card in question
 * @returns `true` if we succeed or if we've already cheated that card today; `false` if we fail or are out of draws/cheats for the day.
 */
function cheatCard(card) {
  if (getCardsSeen().includes(card)) return true;
  if (getRemainingDraws() < 5) return false;
  return (0,external_kolmafia_namespaceObject.cliExecute)("cheat ".concat(card));
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2023/CursedMonkeyPaw.js
var CursedMonkeyPaw_templateObject;
function CursedMonkeyPaw_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var CursedMonkeyPaw_item = template_string_$item(CursedMonkeyPaw_templateObject || (CursedMonkeyPaw_templateObject = CursedMonkeyPaw_taggedTemplateLiteral(["cursed monkey's paw"])));
/**
 * @returns Whether or not we currently `have` the cursed monkey's paw
 */
function CursedMonkeyPaw_have() {
  return have_(CursedMonkeyPaw_item);
}
/**
 * @returns The number of monkey paw wishes we have remaining
 */
function wishes() {
  return clamp(5 - property_get("_monkeyPawWishesUsed"), 0, 5);
}
/**
 * @param filters An optional object optionally consisting of filtering functions to shrink down the pool of wishable items
 * @param filters.location A filtering function to remove locations from the pool of wishable targets.
 * @param filters.monster A filtering function to remove monsters from the pool of wishable targets.
 * @param filters.drop A filtering function to remove item drops from the pool of wishable targets.
 * @returns A set of all items we expect to be able to wish; this doesn't actually constitute all items
 */
function wishableItems() {
  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new Set(flat(Location.all().filter(l => {
    var _filters$location, _filters$location2;
    return canAdventure(l) && ((_filters$location = (_filters$location2 = filters.location) === null || _filters$location2 === void 0 ? void 0 : _filters$location2.call(filters, l)) !== null && _filters$location !== void 0 ? _filters$location : true);
  }).map(l => getMonsters(l).filter(m => {
    var _filters$monster, _filters$monster2;
    return m.copyable && ((_filters$monster = (_filters$monster2 = filters.monster) === null || _filters$monster2 === void 0 ? void 0 : _filters$monster2.call(filters, m)) !== null && _filters$monster !== void 0 ? _filters$monster : true);
  }).map(m => itemDropsArray(m).filter(_ref => {
    var _filters$drop, _filters$drop2;
    var type = _ref.type,
      rate = _ref.rate,
      drop = _ref.drop;
    return !drop.quest && (type !== "c" || rate >= 1) && ( // Remove random roll drops
    (_filters$drop = (_filters$drop2 = filters.drop) === null || _filters$drop2 === void 0 ? void 0 : _filters$drop2.call(filters, {
      type: type,
      rate: rate,
      drop: drop
    })) !== null && _filters$drop !== void 0 ? _filters$drop : true);
  }).map(_ref2 => {
    var drop = _ref2.drop;
    return drop;
  })))));
}
var INVALID_CHARACTERS = /[^a-z\d -]/g;
var _unwishableEffects;
function unwishableEffects() {
  // This is the set of all names of genie-wishable effects, split into the maximal substrings we can actually submit
  var names = Effect.all().filter(e => !e.attributes.includes("nohookah")).map(e => {
    var name = e.name.toLowerCase();
    return {
      name: name,
      splitName: name.split(INVALID_CHARACTERS)
    };
  });
  return names.filter(_ref3 => {
    var name = _ref3.name,
      splitName = _ref3.splitName;
    return (
      // Any effect that doesn't contain an INVALID_CHARACTER is fine
      splitName.length > 1 &&
      // To be unwishable, there can't be any substrings that uniquely match a genie-wishable effect
      splitName.every(s =>
      // So we check every maximal substring against every one of our genie-wishable effects, excluding the effect we're currently looking at
      // if one of the substrings matches a substring associated with another effect, we're screwed.
      names.some(_ref4 => {
        var n = _ref4.name;
        return n !== name && n.includes(s);
      }))
    );
  }).map(_ref5 => {
    var name = _ref5.name;
    return toEffect(name);
  });
}
/**
 * @returns An Array consisting of all genie-wishable Effects that are not Monkey-wishable
 */
function getUnwishableEffects() {
  var _unwishableEffects2;
  return (_unwishableEffects2 = _unwishableEffects) !== null && _unwishableEffects2 !== void 0 ? _unwishableEffects2 : _unwishableEffects = unwishableEffects();
}
/**
 * Decides if we expect that a given Item or Effect can be wished for.
 * May be slow for Effects;
 *
 * @param wish The Item or Effect in question
 * @returns Whether we expect it can be wished for
 */
function isWishable(wish) {
  if (wish instanceof Item) {
    return wishableItems().has(wish);
  } else {
    if (wish.attributes.includes("nohookah")) return false;
    if (!wish.name.match(/[.,']/)) return true;
    return !getUnwishableEffects().includes(wish);
  }
}
/**
 * Wish for a given Item or Effect.
 * If it's an item, will `prepareForAdventure`; if an item is available in multiple locations this will pick the first one.
 *
 * @param wish The Item or Effect to wish for
 * @returns Whether we succeeded in this endeavor
 */
function wishFor(wish) {
  if (wishes() <= 0) return false;
  if (wish instanceof external_kolmafia_namespaceObject.Effect) return (0,external_kolmafia_namespaceObject.monkeyPaw)(wish);
  var locations = external_kolmafia_namespaceObject.Location.all().filter(l => (0,external_kolmafia_namespaceObject.canAdventure)(l) && (0,external_kolmafia_namespaceObject.getMonsters)(l).some(m => m.copyable && (0,external_kolmafia_namespaceObject.itemDropsArray)(m).some(_ref6 => {
    var drop = _ref6.drop;
    return drop === wish;
  })));
  try {
    if (locations.length) {
      (0,external_kolmafia_namespaceObject.cliExecute)("checkpoint");
      (0,external_kolmafia_namespaceObject.prepareForAdventure)(locations[0]);
    }
    var result = (0,external_kolmafia_namespaceObject.monkeyPaw)(wish);
    if (!result) {
      dist_logger.debug("Failed to monkeyPaw wish for ".concat(wish, "; assumed it was available in locations ").concat(locations.join(", ")));
    }
    return result;
  } finally {
    if (locations.length) (0,external_kolmafia_namespaceObject.cliExecute)("outfit checkpoint");
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2014/CrimboShrub.js
var CrimboShrub_templateObject, CrimboShrub_templateObject2, CrimboShrub_templateObject3, CrimboShrub_templateObject4;
function CrimboShrub_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




/**
 * @returns Whether we `have` the Crimbo Shrub in our terrarium
 */
function CrimboShrub_have() {
  return have(template_string_$familiar(CrimboShrub_templateObject || (CrimboShrub_templateObject = CrimboShrub_taggedTemplateLiteral(["Crimbo Shrub"]))));
}
var Toppers = {
  Muscle: 1,
  Mysticality: 2,
  Moxie: 3
};
var Lights = {
  "Prismatic Damage": 1,
  "Hot Damage": 2,
  "Cold Damage": 3,
  "Stench Damage": 4,
  "Spooky Damage": 5,
  "Sleaze Damage": 6
};
var Garland = {
  "HP Regen": 1,
  "PvP Fights": 2,
  Blocking: 3
};
var Gifts = {
  "Yellow Ray": 1,
  "Red Ray": 2,
  Gifts: 3
};
var Prefs = {
  Muscle: "Muscle",
  Mysticality: "Mysticality",
  Moxie: "Moxie",
  Prismatic: "Prismatic Damage",
  Hot: "Hot Damage",
  Cold: "Cold Damage",
  Stench: "Stench Damage",
  Spooky: "Spooky Damage",
  Sleaze: "Sleaze Damage",
  HP: "HP Regen",
  PvP: "PvP Fights",
  blocking: "Blocking",
  yellow: "Yellow Ray",
  meat: "Red Ray",
  gifts: "Gifts"
};
/**
 * Internal function used to check whether decour perfectly matches what we want
 *
 * @param topper Topper to check for
 * @param lights Lights to check for
 * @param garland Garland to check for
 * @param gifts Gifts to check for
 * @returns Whether every single decour matches what we expect
 */
function isDecoratedWith(topper, lights, garland, gifts) {
  var decorations = [property_get("shrubTopper"), property_get("shrubLights"), property_get("shrubGarland"), property_get("shrubGifts")].map(x => Prefs[x]);
  return [topper, lights, garland, gifts].every((x, i) => x === decorations[i]);
}
/**
 * Decorates our Crimbo Shrub with the chosen decour, if able
 *
 * @param topper The shrub Topper to select
 * @param lights The shrub Lights to select
 * @param garland The shrub Garland to select
 * @param gifts The shrub Gifts to select
 * @returns Whether the shrub's decour perfectly matches the given decour
 */
function decorate(topper, lights, garland, gifts) {
  if (!CrimboShrub_have()) return false;
  if (property_get("_shrubDecorated")) return isDecoratedWith(topper, lights, garland, gifts);
  if (!have(template_string_$item(CrimboShrub_templateObject2 || (CrimboShrub_templateObject2 = CrimboShrub_taggedTemplateLiteral(["box of old Crimbo decorations"]))))) {
    (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(CrimboShrub_templateObject3 || (CrimboShrub_templateObject3 = CrimboShrub_taggedTemplateLiteral(["Crimbo Shrub"]))));
  }
  lib_directlyUse(template_string_$item(CrimboShrub_templateObject4 || (CrimboShrub_templateObject4 = CrimboShrub_taggedTemplateLiteral(["box of old Crimbo decorations"]))));
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=999&pwd=&option=1&topper=".concat(Toppers[topper], "&lights=").concat(Lights[lights], "&garland=").concat(Garland[garland], "&gift=").concat(Gifts[gifts]));
  return isDecoratedWith(topper, lights, garland, gifts);
}
;// CONCATENATED MODULE: ./src/lib.ts
var lib_templateObject, lib_templateObject2, lib_templateObject3, lib_templateObject4, lib_templateObject5, lib_templateObject6, lib_templateObject7, lib_templateObject8, lib_templateObject9, lib_templateObject10, lib_templateObject11, lib_templateObject12, lib_templateObject13, lib_templateObject14, lib_templateObject15, lib_templateObject16, lib_templateObject17, lib_templateObject18, lib_templateObject19, lib_templateObject20, lib_templateObject21, lib_templateObject22, lib_templateObject23, lib_templateObject24, lib_templateObject25, lib_templateObject26, lib_templateObject27, lib_templateObject28, lib_templateObject29, lib_templateObject30, lib_templateObject31, lib_templateObject32, lib_templateObject33, lib_templateObject34, lib_templateObject35, lib_templateObject36, lib_templateObject37, lib_templateObject38, lib_templateObject39, lib_templateObject40, lib_templateObject41, lib_templateObject42, lib_templateObject43, lib_templateObject44, lib_templateObject45, lib_templateObject46, lib_templateObject47, lib_templateObject48, lib_templateObject49, lib_templateObject50, lib_templateObject51, lib_templateObject52, lib_templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59, _templateObject60, _templateObject61, _templateObject62, _templateObject63, _templateObject64, _templateObject65, _templateObject66, _templateObject67, _templateObject68, _templateObject69, _templateObject70, _templateObject71, _templateObject72, _templateObject73, _templateObject74, _templateObject75, _templateObject76, _templateObject77, _templateObject78, _templateObject79, _templateObject80, _templateObject81, _templateObject82, _templateObject83, _templateObject84, _templateObject85, _templateObject86, _templateObject87, _templateObject88, _templateObject89;
function src_lib_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_lib_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function src_lib_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_lib_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_lib_arrayLikeToArray(o, minLen); }
function src_lib_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function lib_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


var defaultTasks = [died, sweatSweat, juneCleaver, kramGo, sweatSweat, juneCleaver, ghostieMode, sweatSweat, juneCleaver, rayMode, fallGuy, stillSuit, coldConsult];
var freeOutfit = new Map([[$slot(lib_templateObject || (lib_templateObject = lib_taggedTemplateLiteral(["hat"]))), template_string_$item(lib_templateObject2 || (lib_templateObject2 = lib_taggedTemplateLiteral(["giant yellow hat"])))], [$slot(lib_templateObject3 || (lib_templateObject3 = lib_taggedTemplateLiteral(["back"]))), template_string_$item(lib_templateObject4 || (lib_templateObject4 = lib_taggedTemplateLiteral(["balsam barrel"])))], [$slot(lib_templateObject5 || (lib_templateObject5 = lib_taggedTemplateLiteral(["shirt"]))), template_string_$item(lib_templateObject6 || (lib_templateObject6 = lib_taggedTemplateLiteral(["Jurassic Parka"])))], [$slot(lib_templateObject7 || (lib_templateObject7 = lib_taggedTemplateLiteral(["weapon"]))), template_string_$item(lib_templateObject8 || (lib_templateObject8 = lib_taggedTemplateLiteral(["yule hatchet"])))], [$slot(lib_templateObject9 || (lib_templateObject9 = lib_taggedTemplateLiteral(["off-hand"]))), template_string_$item(lib_templateObject10 || (lib_templateObject10 = lib_taggedTemplateLiteral(["yule hatchet"])))], [$slot(lib_templateObject11 || (lib_templateObject11 = lib_taggedTemplateLiteral(["pants"]))), template_string_$item(lib_templateObject12 || (lib_templateObject12 = lib_taggedTemplateLiteral(["designer sweatpants"])))], [$slot(lib_templateObject13 || (lib_templateObject13 = lib_taggedTemplateLiteral(["acc1"]))), template_string_$item(lib_templateObject14 || (lib_templateObject14 = lib_taggedTemplateLiteral(["Mr. Cheeng's spectacles"])))], [$slot(lib_templateObject15 || (lib_templateObject15 = lib_taggedTemplateLiteral(["acc2"]))), template_string_$item(lib_templateObject16 || (lib_templateObject16 = lib_taggedTemplateLiteral(["lucky gold ring"])))], [$slot(lib_templateObject17 || (lib_templateObject17 = lib_taggedTemplateLiteral(["acc3"]))), template_string_$item(lib_templateObject18 || (lib_templateObject18 = lib_taggedTemplateLiteral(["teacher's pen"])))], [$slot(lib_templateObject19 || (lib_templateObject19 = lib_taggedTemplateLiteral(["familiar"]))), template_string_$item(lib_templateObject20 || (lib_templateObject20 = lib_taggedTemplateLiteral(["tiny stillsuit"])))]]);
function accessoryChecker(accs) {
  var _iterator = src_lib_createForOfIteratorHelper(accs),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var acc = _step.value;
      if (!(0,external_kolmafia_namespaceObject.haveEquipped)(acc)) {
        for (var _i = 0, _arr = [$slot(lib_templateObject21 || (lib_templateObject21 = lib_taggedTemplateLiteral(["acc1"]))), $slot(lib_templateObject22 || (lib_templateObject22 = lib_taggedTemplateLiteral(["acc2"]))), $slot(lib_templateObject23 || (lib_templateObject23 = lib_taggedTemplateLiteral(["acc3"])))]; _i < _arr.length; _i++) {
          var slot = _arr[_i];
          if (!accs.includes((0,external_kolmafia_namespaceObject.equippedItem)(slot))) {
            (0,external_kolmafia_namespaceObject.equip)(slot, acc);
            break;
          }
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function equipOutfit(outfit) {
  //Fam
  (0,external_kolmafia_namespaceObject.useFamiliar)(outfit[1]);

  //Equips
  var _iterator2 = src_lib_createForOfIteratorHelper(outfit[0].keys()),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var key = _step2.value;
      var item = outfit[0].get(key);
      var accs = [];
      if (item) {
        if ([$slot(lib_templateObject24 || (lib_templateObject24 = lib_taggedTemplateLiteral(["acc1"]))), $slot(lib_templateObject25 || (lib_templateObject25 = lib_taggedTemplateLiteral(["acc2"]))), $slot(lib_templateObject26 || (lib_templateObject26 = lib_taggedTemplateLiteral(["acc3"])))].includes(key)) {
          accs.push(item);
        } else {
          (0,external_kolmafia_namespaceObject.equip)(key, item);
        }
        accessoryChecker(accs);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
function currentOutfit() {
  var curFit = new Map([[$slot(lib_templateObject27 || (lib_templateObject27 = lib_taggedTemplateLiteral(["hat"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject28 || (lib_templateObject28 = lib_taggedTemplateLiteral(["hat"]))))], [$slot(lib_templateObject29 || (lib_templateObject29 = lib_taggedTemplateLiteral(["back"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject30 || (lib_templateObject30 = lib_taggedTemplateLiteral(["back"]))))], [$slot(lib_templateObject31 || (lib_templateObject31 = lib_taggedTemplateLiteral(["shirt"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject32 || (lib_templateObject32 = lib_taggedTemplateLiteral(["shirt"]))))], [$slot(lib_templateObject33 || (lib_templateObject33 = lib_taggedTemplateLiteral(["weapon"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject34 || (lib_templateObject34 = lib_taggedTemplateLiteral(["weapon"]))))], [$slot(lib_templateObject35 || (lib_templateObject35 = lib_taggedTemplateLiteral(["off-hand"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject36 || (lib_templateObject36 = lib_taggedTemplateLiteral(["off-hand"]))))], [$slot(lib_templateObject37 || (lib_templateObject37 = lib_taggedTemplateLiteral(["pants"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject38 || (lib_templateObject38 = lib_taggedTemplateLiteral(["pants"]))))], [$slot(lib_templateObject39 || (lib_templateObject39 = lib_taggedTemplateLiteral(["acc1"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject40 || (lib_templateObject40 = lib_taggedTemplateLiteral(["acc1"]))))], [$slot(lib_templateObject41 || (lib_templateObject41 = lib_taggedTemplateLiteral(["acc2"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject42 || (lib_templateObject42 = lib_taggedTemplateLiteral(["acc2"]))))], [$slot(lib_templateObject43 || (lib_templateObject43 = lib_taggedTemplateLiteral(["acc3"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject44 || (lib_templateObject44 = lib_taggedTemplateLiteral(["acc3"]))))], [$slot(lib_templateObject45 || (lib_templateObject45 = lib_taggedTemplateLiteral(["familiar"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(lib_templateObject46 || (lib_templateObject46 = lib_taggedTemplateLiteral(["familiar"]))))]]);
  var curFam = (0,external_kolmafia_namespaceObject.myFamiliar)();
  return [curFit, curFam];
}
function died() {
  if (have($effect(lib_templateObject47 || (lib_templateObject47 = lib_taggedTemplateLiteral(["Beaten Up"]))))) {
    (0,external_kolmafia_namespaceObject.abort)(":pensive: died??");
  }
}
function kramGo() {
  if ((0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
    if (getKramcoWandererChance() === 1) {
      (0,external_kolmafia_namespaceObject.print)("It's time to fight a goblin!", "blue");
      var outfit = currentOutfit();
      var fam = template_string_$familiar(lib_templateObject48 || (lib_templateObject48 = lib_taggedTemplateLiteral(["Grey Goose"])));
      equipOutfit([freeOutfit, fam]);
      (0,external_kolmafia_namespaceObject.equip)($slot(lib_templateObject49 || (lib_templateObject49 = lib_taggedTemplateLiteral(["off-hand"]))), template_string_$item(lib_templateObject50 || (lib_templateObject50 = lib_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))));
      var dropZone = dropZoner();
      var fightStyle = "if hasskill 7410; skill 7410; endif; attack; repeat;";
      (0,external_kolmafia_namespaceObject.adv1)(dropZone, -1, fightStyle);
      equipOutfit(outfit);
    }
  }
}
function ghostieMode() {
  if ((0,external_kolmafia_namespaceObject.totalTurnsPlayed)() - 50 > Number((0,external_kolmafia_namespaceObject.getProperty)("gwa_ghostiecounter"))) {
    var curOut = currentOutfit();
    equipOutfit([freeOutfit, template_string_$familiar(lib_templateObject51 || (lib_templateObject51 = lib_taggedTemplateLiteral(["Grey Goose"])))]);
    if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
      (0,external_kolmafia_namespaceObject.equip)(template_string_$item(lib_templateObject52 || (lib_templateObject52 = lib_taggedTemplateLiteral(["Drunkula's wineglass"]))));
    } else {
      (0,external_kolmafia_namespaceObject.equip)($slot(lib_templateObject53 || (lib_templateObject53 = lib_taggedTemplateLiteral(["off-hand"]))), template_string_$item(_templateObject54 || (_templateObject54 = lib_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))));
    }
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject55 || (_templateObject55 = lib_taggedTemplateLiteral(["almost-dead walkie-talkie"]))));
    (0,external_kolmafia_namespaceObject.visitUrl)("questlog.php?which=7");
    while (property_get("ghostLocation") !== null) {
      var target = property_get("ghostLocation");
      if (target) {
        (0,external_kolmafia_namespaceObject.restoreMp)(30);
        (0,external_kolmafia_namespaceObject.setProperty)("gwa_ghostiecounter", "".concat((0,external_kolmafia_namespaceObject.totalTurnsPlayed)()));
        var sausageGhost = "if monstername sausage goblin; attack; repeat; endif; skill saucegeyser; repeat;";
        (0,external_kolmafia_namespaceObject.adv1)(target, -1, sausageGhost);
      } else {
        (0,external_kolmafia_namespaceObject.print)("uhh...");
      }
    }
    equipOutfit(curOut);
  }
}
function sweatSweat() {
  if (property_get("sweat") === 100) {
    if (property_get("_sweatOutSomeBoozeUsed") < 3 && (0,external_kolmafia_namespaceObject.myInebriety)() > 0) {
      (0,external_kolmafia_namespaceObject.print)("Sweating out some Booze", "blue");
      (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject56 || (_templateObject56 = lib_taggedTemplateLiteral(["Sweat Out Some Booze"]))));
    } else {
      (0,external_kolmafia_namespaceObject.print)("Sweating out some Ade", "blue");
      (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject57 || (_templateObject57 = lib_taggedTemplateLiteral(["Make Sweat-Ade"]))));
    }
  }
}
function juneCleaver() {
  if (property_get("_juneCleaverFightsLeft") === 0 && ((0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)() || (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(_templateObject58 || (_templateObject58 = lib_taggedTemplateLiteral(["Drunkula's wineglass"])))))) {
    (0,external_kolmafia_namespaceObject.print)("It's Cleavin' time", "blue");
    var curOut = currentOutfit();
    if ((0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject59 || (_templateObject59 = lib_taggedTemplateLiteral(["weapon"])))) !== template_string_$item(_templateObject60 || (_templateObject60 = lib_taggedTemplateLiteral(["June cleaver"])))) {
      (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject61 || (_templateObject61 = lib_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject62 || (_templateObject62 = lib_taggedTemplateLiteral(["June cleaver"]))));
    }
    if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
      (0,external_kolmafia_namespaceObject.equip)(template_string_$item(_templateObject63 || (_templateObject63 = lib_taggedTemplateLiteral(["Drunkula's wineglass"]))));
    }
    var dropZone = dropZoner();
    (0,external_kolmafia_namespaceObject.adv1)(dropZone, -1, "abort;");
    equipOutfit(curOut);
    if (have($effect(_templateObject64 || (_templateObject64 = lib_taggedTemplateLiteral(["Beaten Up"]))))) {
      uneffect($effect(_templateObject65 || (_templateObject65 = lib_taggedTemplateLiteral(["Beaten Up"]))));
    }
  }
}
function dropZoner() {
  var dropZone = $location(_templateObject66 || (_templateObject66 = lib_taggedTemplateLiteral(["The Sleazy Back Alley"])));
  if ((0,external_kolmafia_namespaceObject.canAdventure)($location(_templateObject67 || (_templateObject67 = lib_taggedTemplateLiteral(["Inside the Palindome"]))))) {
    if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject68 || (_templateObject68 = lib_taggedTemplateLiteral(["mafia thumb ring"]))))) {
      var curOut = currentOutfit();
      var accslots = [$slot(_templateObject69 || (_templateObject69 = lib_taggedTemplateLiteral(["acc1"]))), $slot(_templateObject70 || (_templateObject70 = lib_taggedTemplateLiteral(["acc2"]))), $slot(_templateObject71 || (_templateObject71 = lib_taggedTemplateLiteral(["acc3"])))];
      var _iterator3 = src_lib_createForOfIteratorHelper(curOut[0].keys()),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var key = _step3.value;
          if (accslots.includes(key) && curOut[0].get(key) === template_string_$item(_templateObject72 || (_templateObject72 = lib_taggedTemplateLiteral(["mafia thumb ring"])))) {
            (0,external_kolmafia_namespaceObject.equip)(key, template_string_$item(_templateObject73 || (_templateObject73 = lib_taggedTemplateLiteral(["Talisman o' Namsilat"]))));
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
    dropZone = $location(_templateObject74 || (_templateObject74 = lib_taggedTemplateLiteral(["Inside the Palindome"])));
  }
  return dropZone;
}
function rayMode() {
  if ((0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
    if (!have($effect(_templateObject75 || (_templateObject75 = lib_taggedTemplateLiteral(["Everything Looks Yellow"]))))) {
      var curOut = currentOutfit();
      var curParka = property_get("parkaMode");
      (0,external_kolmafia_namespaceObject.cliExecute)("parka acid");
      if (!have($effect(_templateObject76 || (_templateObject76 = lib_taggedTemplateLiteral(["Everything Looks Red"]))))) {
        (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject77 || (_templateObject77 = lib_taggedTemplateLiteral(["Crimbo Shrub"]))));
        if (property_get("_shrubDecorated") === false && property_get("shrubGifts") !== "meat") {
          decorate("Muscle", "Prismatic Damage", "PvP Fights", "Red Ray");
        }
      }
      var spit = "if hasskill Open a Big Red Present; skill Open a Big Red Present; endif; if hasskill spit jurassic acid; skill spit jurassic acid; endif; abort;";
      (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject78 || (_templateObject78 = lib_taggedTemplateLiteral(["Shadow Rift"]))), -1, spit);
      (0,external_kolmafia_namespaceObject.cliExecute)("parka ".concat(curParka));
      equipOutfit(curOut);
    }
  }
}
function fallGuy() {
  if (available()) {
    (0,external_kolmafia_namespaceObject.print)("Fallguy is available!", "blue");
    upgrade();
    if (turnsForQuest() < (0,external_kolmafia_namespaceObject.myAdventures)()) {
      (0,external_kolmafia_namespaceObject.print)("Sending him to Shadow Rift", "blue");
      sendTo($location(_templateObject79 || (_templateObject79 = lib_taggedTemplateLiteral(["Shadow Rift"]))));
    } else {
      (0,external_kolmafia_namespaceObject.print)("He won't come back in time so we won't send him", "blue");
    }
  }
}
function stillSuit() {
  if (property_get("stillsuitFamiliar") === null) {
    (0,external_kolmafia_namespaceObject.visitUrl)("familiar.php?action=equip&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&whichfam=150&whichitem=10932"));
  }
}
function coldConsult() {
  if ((0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(_templateObject80 || (_templateObject80 = lib_taggedTemplateLiteral(["cold medicine cabinet"]))) && property_get("_coldMedicineConsults") <= 5 && (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() >= property_get("_nextColdMedicineConsult")) {
    var workshed = (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed", false, true);
    if (workshed.includes("Extrovermectin&trade;") || workshed.includes("Breathitin")) {
      (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed");
      (0,external_kolmafia_namespaceObject.runChoice)(5);
    }
  }
}
function frickingNamsilat() {
  if (haveEquipped($item(_templateObject81 || (_templateObject81 = lib_taggedTemplateLiteral(["Talisman o' Namsilat"]))))) {
    abort("Fricking NAMSILAT");
  }
}
function burnMp(burnTo) {
  var bannedEffects = [$effect(_templateObject82 || (_templateObject82 = lib_taggedTemplateLiteral(["Drescher's Annoying Noise"]))), $effect(_templateObject83 || (_templateObject83 = lib_taggedTemplateLiteral(["Pride of the Puffin"]))), $effect(_templateObject84 || (_templateObject84 = lib_taggedTemplateLiteral(["The Sonata of Sneakiness"]))), $effect(_templateObject85 || (_templateObject85 = lib_taggedTemplateLiteral(["Smooth Movements"]))), $effect(_templateObject86 || (_templateObject86 = lib_taggedTemplateLiteral(["Musk of the Moose"]))), $effect(_templateObject87 || (_templateObject87 = lib_taggedTemplateLiteral(["Carlweather's Cantata of Confrontation"]))), $effect(_templateObject88 || (_templateObject88 = lib_taggedTemplateLiteral(["Ode to Booze"])))];
  while ((0,external_kolmafia_namespaceObject.myMp)() - burnTo > 10) {
    var myEffects = getActiveEffects().filter(E => (0,external_kolmafia_namespaceObject.toSkill)(E) !== template_string_$skill(_templateObject89 || (_templateObject89 = lib_taggedTemplateLiteral(["none"]))) && (0,external_kolmafia_namespaceObject.mpCost)((0,external_kolmafia_namespaceObject.toSkill)(E)) > 0 && !bannedEffects.includes(E)).sort((a, b) => (0,external_kolmafia_namespaceObject.haveEffect)(b) - (0,external_kolmafia_namespaceObject.haveEffect)(a));
    var safetyCheck = (0,external_kolmafia_namespaceObject.myMp)();
    var _iterator4 = src_lib_createForOfIteratorHelper(myEffects.sort((a, b) => (0,external_kolmafia_namespaceObject.haveEffect)(a) - (0,external_kolmafia_namespaceObject.haveEffect)(b))),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var eff = _step4.value;
        // print(`${myMp() - burnTo}`, `blue`);
        if ((0,external_kolmafia_namespaceObject.myMp)() - burnTo < 10) {
          break;
        } else {
          var numCasts = Math.max(1, Math.min(Math.floor(((0,external_kolmafia_namespaceObject.myMp)() - burnTo) / (0,external_kolmafia_namespaceObject.mpCost)((0,external_kolmafia_namespaceObject.toSkill)(eff))), Math.floor(((0,external_kolmafia_namespaceObject.haveEffect)(myEffects[0]) - (0,external_kolmafia_namespaceObject.haveEffect)(eff)) / (0,external_kolmafia_namespaceObject.turnsPerCast)((0,external_kolmafia_namespaceObject.toSkill)(eff)))));
          (0,external_kolmafia_namespaceObject.useSkill)(numCasts, (0,external_kolmafia_namespaceObject.toSkill)(eff));
        }
        //print(`${eff} [${haveEffect(eff)}]`);
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    if ((0,external_kolmafia_namespaceObject.myMp)() === safetyCheck) {
      break;
    }
  }
}
function preAdventure() {
  var additionalFunctions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultTasks;
  var hpGoal = arguments.length > 1 ? arguments[1] : undefined;
  var mpGoal = arguments.length > 2 ? arguments[2] : undefined;
  var hpThreshold = Math.min(4000, (hpGoal !== null && hpGoal !== void 0 ? hpGoal : 0.9) * (0,external_kolmafia_namespaceObject.myMaxhp)());
  (0,external_kolmafia_namespaceObject.restoreHp)(hpThreshold);
  if (additionalFunctions) {
    var _iterator5 = src_lib_createForOfIteratorHelper(additionalFunctions),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var func = _step5.value;
        func();
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
  var mpThreshold = (mpGoal !== null && mpGoal !== void 0 ? mpGoal : 0.75) * (0,external_kolmafia_namespaceObject.myMaxmp)();
  if ((0,external_kolmafia_namespaceObject.myMp)() > mpThreshold) {
    burnMp(mpThreshold);
  }
}
function main() {
  cliExecute("parka kachungasaur");
  print("hehe");
}
;// CONCATENATED MODULE: ./src/mustard service.ts
var mustard_service_templateObject, mustard_service_templateObject2, mustard_service_templateObject3, mustard_service_templateObject4, mustard_service_templateObject5, mustard_service_templateObject6, mustard_service_templateObject7, mustard_service_templateObject8, mustard_service_templateObject9, mustard_service_templateObject10, mustard_service_templateObject11, mustard_service_templateObject12, mustard_service_templateObject13, mustard_service_templateObject14, mustard_service_templateObject15, mustard_service_templateObject16, mustard_service_templateObject17, mustard_service_templateObject18, mustard_service_templateObject19, mustard_service_templateObject20, mustard_service_templateObject21, mustard_service_templateObject22, mustard_service_templateObject23, mustard_service_templateObject24, mustard_service_templateObject25, mustard_service_templateObject26, mustard_service_templateObject27, mustard_service_templateObject28, mustard_service_templateObject29, mustard_service_templateObject30, mustard_service_templateObject31, mustard_service_templateObject32, mustard_service_templateObject33, mustard_service_templateObject34, mustard_service_templateObject35, mustard_service_templateObject36, mustard_service_templateObject37, mustard_service_templateObject38, mustard_service_templateObject39, mustard_service_templateObject40, mustard_service_templateObject41, mustard_service_templateObject42, mustard_service_templateObject43, mustard_service_templateObject44, mustard_service_templateObject45, mustard_service_templateObject46, mustard_service_templateObject47, mustard_service_templateObject48, mustard_service_templateObject49, mustard_service_templateObject50, mustard_service_templateObject51, mustard_service_templateObject52, mustard_service_templateObject53, mustard_service_templateObject54, mustard_service_templateObject55, mustard_service_templateObject56, mustard_service_templateObject57, mustard_service_templateObject58, mustard_service_templateObject59, mustard_service_templateObject60, mustard_service_templateObject61, mustard_service_templateObject62, mustard_service_templateObject63, mustard_service_templateObject64, mustard_service_templateObject65, mustard_service_templateObject66, mustard_service_templateObject67, mustard_service_templateObject68, mustard_service_templateObject69, mustard_service_templateObject70, mustard_service_templateObject71, mustard_service_templateObject72, mustard_service_templateObject73, mustard_service_templateObject74, mustard_service_templateObject75, mustard_service_templateObject76, mustard_service_templateObject77, mustard_service_templateObject78, mustard_service_templateObject79, mustard_service_templateObject80, mustard_service_templateObject81, mustard_service_templateObject82, mustard_service_templateObject83, mustard_service_templateObject84, mustard_service_templateObject85, mustard_service_templateObject86, mustard_service_templateObject87, mustard_service_templateObject88, mustard_service_templateObject89, _templateObject90, _templateObject91, _templateObject92, _templateObject93, _templateObject94, _templateObject95, _templateObject96, _templateObject97, _templateObject98, _templateObject99, _templateObject100, _templateObject101, _templateObject102, _templateObject103, _templateObject104, _templateObject105, _templateObject106, _templateObject107, _templateObject108, _templateObject109, _templateObject110, _templateObject111, _templateObject112, _templateObject113, _templateObject114, _templateObject115, _templateObject116, _templateObject117, _templateObject118, _templateObject119, _templateObject120, _templateObject121, _templateObject122, _templateObject123, _templateObject124, _templateObject125, _templateObject126, _templateObject127, _templateObject128, _templateObject129, _templateObject130, _templateObject131, _templateObject132, _templateObject133, _templateObject134, _templateObject135, _templateObject136, _templateObject137, _templateObject138, _templateObject139, _templateObject140, _templateObject141, _templateObject142, _templateObject143, _templateObject144, _templateObject145, _templateObject146, _templateObject147, _templateObject148, _templateObject149, _templateObject150, _templateObject151, _templateObject152, _templateObject153, _templateObject154, _templateObject155, _templateObject156, _templateObject157, _templateObject158, _templateObject159, _templateObject160, _templateObject161, _templateObject162, _templateObject163, _templateObject164, _templateObject165, _templateObject166, _templateObject167, _templateObject168, _templateObject169, _templateObject170, _templateObject171, _templateObject172, _templateObject173, _templateObject174, _templateObject175, _templateObject176, _templateObject177, _templateObject178, _templateObject179, _templateObject180, _templateObject181, _templateObject182, _templateObject183, _templateObject184, _templateObject185, _templateObject186, _templateObject187, _templateObject188, _templateObject189, _templateObject190, _templateObject191, _templateObject192, _templateObject193, _templateObject194, _templateObject195, _templateObject196, _templateObject197, _templateObject198, _templateObject199, _templateObject200, _templateObject201, _templateObject202, _templateObject203, _templateObject204, _templateObject205, _templateObject206, _templateObject207, _templateObject208, _templateObject209, _templateObject210, _templateObject211, _templateObject212, _templateObject213, _templateObject214, _templateObject215, _templateObject216, _templateObject217, _templateObject218, _templateObject219, _templateObject220, _templateObject221, _templateObject222, _templateObject223, _templateObject224, _templateObject225, _templateObject226, _templateObject227, _templateObject228, _templateObject229, _templateObject230, _templateObject231, _templateObject232, _templateObject233, _templateObject234, _templateObject235, _templateObject236, _templateObject237, _templateObject238, _templateObject239, _templateObject240, _templateObject241, _templateObject242, _templateObject243, _templateObject244, _templateObject245, _templateObject246, _templateObject247, _templateObject248, _templateObject249, _templateObject250, _templateObject251, _templateObject252, _templateObject253, _templateObject254, _templateObject255, _templateObject256, _templateObject257, _templateObject258, _templateObject259, _templateObject260, _templateObject261, _templateObject262, _templateObject263, _templateObject264, _templateObject265, _templateObject266, _templateObject267, _templateObject268, _templateObject269, _templateObject270, _templateObject271, _templateObject272, _templateObject273, _templateObject274, _templateObject275, _templateObject276, _templateObject277, _templateObject278, _templateObject279, _templateObject280, _templateObject281, _templateObject282, _templateObject283, _templateObject284, _templateObject285, _templateObject286, _templateObject287, _templateObject288, _templateObject289, _templateObject290, _templateObject291, _templateObject292, _templateObject293, _templateObject294, _templateObject295, _templateObject296, _templateObject297, _templateObject298, _templateObject299, _templateObject300, _templateObject301, _templateObject302, _templateObject303, _templateObject304, _templateObject305, _templateObject306, _templateObject307, _templateObject308, _templateObject309, _templateObject310, _templateObject311, _templateObject312, _templateObject313, _templateObject314, _templateObject315, _templateObject316, _templateObject317, _templateObject318, _templateObject319, _templateObject320, _templateObject321, _templateObject322, _templateObject323, _templateObject324, _templateObject325, _templateObject326, _templateObject327, _templateObject328, _templateObject329, _templateObject330, _templateObject331, _templateObject332, _templateObject333, _templateObject334, _templateObject335, _templateObject336, _templateObject337, _templateObject338, _templateObject339, _templateObject340, _templateObject341, _templateObject342, _templateObject343, _templateObject344, _templateObject345, _templateObject346, _templateObject347, _templateObject348, _templateObject349, _templateObject350, _templateObject351, _templateObject352, _templateObject353, _templateObject354, _templateObject355, _templateObject356, _templateObject357, _templateObject358, _templateObject359, _templateObject360, _templateObject361, _templateObject362;
function mustard_service_defineProperty(obj, key, value) { key = mustard_service_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function mustard_service_toPropertyKey(arg) { var key = mustard_service_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function mustard_service_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function mustard_service_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = mustard_service_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function mustard_service_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mustard_service_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mustard_service_arrayLikeToArray(o, minLen); }
function mustard_service_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function mustard_service_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






function kramMode() {
  if (getKramcoWandererChance() === 1) {
    var outfit = currentOutfit();
    (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject || (mustard_service_templateObject = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(mustard_service_templateObject2 || (mustard_service_templateObject2 = mustard_service_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))));
    var dropZone = $location(mustard_service_templateObject3 || (mustard_service_templateObject3 = mustard_service_taggedTemplateLiteral(["The Outskirts of Cobb's Knob"])));
    (0,external_kolmafia_namespaceObject.adv1)(dropZone, -1, "attack; repeat;");
    equipOutfit(outfit);
  }
}
function mpRestore() {
  while ((0,external_kolmafia_namespaceObject.myMp)() < 100 && (0,external_kolmafia_namespaceObject.myMp)() <= 0.85 * (0,external_kolmafia_namespaceObject.myMaxmp)()) {
    (0,external_kolmafia_namespaceObject.cliExecute)("restore mp");
  }
}
function badJuju() {
  if (have($effect(mustard_service_templateObject4 || (mustard_service_templateObject4 = mustard_service_taggedTemplateLiteral(["Beaten Up"]))))) {
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(mustard_service_templateObject5 || (mustard_service_templateObject5 = mustard_service_taggedTemplateLiteral(["Tongue of the Walrus"]))));
  }
  if (have($effect(mustard_service_templateObject6 || (mustard_service_templateObject6 = mustard_service_taggedTemplateLiteral(["Really Quite Poisoned"]))))) {
    uneffect($effect(mustard_service_templateObject7 || (mustard_service_templateObject7 = mustard_service_taggedTemplateLiteral(["Really Quite Poisoned"]))));
  }
}
function levellingSlime() {
  if ((0,external_kolmafia_namespaceObject.myLevel)() >= 13 && property_get("_snokebombUsed") === 0 && property_get("csServicesPerformed") === "Coil Wire") {
    while (!have($effect(mustard_service_templateObject8 || (mustard_service_templateObject8 = mustard_service_taggedTemplateLiteral(["Inner Elf"]))))) {
      (0,external_kolmafia_namespaceObject.print)("Attemping: Levelling Motherslime", "blue");
      motherSlime();
    }
  }
}
function sombreroSwap() {
  if (have($effect(mustard_service_templateObject9 || (mustard_service_templateObject9 = mustard_service_taggedTemplateLiteral(["Spit Upon"])))) && property_get("csServicesPerformed") === "Coil Wire" && (0,external_kolmafia_namespaceObject.myFamiliar)() !== template_string_$familiar(mustard_service_templateObject10 || (mustard_service_templateObject10 = mustard_service_taggedTemplateLiteral(["Hovering Sombrero"]))) && (0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceStage") !== "Levelling: DMT") {
    (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(mustard_service_templateObject11 || (mustard_service_templateObject11 = mustard_service_taggedTemplateLiteral(["Hovering Sombrero"]))));
    (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject12 || (mustard_service_templateObject12 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(mustard_service_templateObject13 || (mustard_service_templateObject13 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  }
}
function preVenture() {
  preAdventure([juneCleaver, pilsners, badJuju, levellingSlime, sombreroSwap, mpRestore, kramMode], 0.85, 1);
}
function deepDarkVisions() {
  var outfit = currentOutfit();
  (0,external_kolmafia_namespaceObject.equip)(template_string_$item(mustard_service_templateObject14 || (mustard_service_templateObject14 = mustard_service_taggedTemplateLiteral(["Jurassic Parka"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("parka ghostasaurus");
  (0,external_kolmafia_namespaceObject.equip)(template_string_$item(mustard_service_templateObject15 || (mustard_service_templateObject15 = mustard_service_taggedTemplateLiteral(["Fourth of May Cosplay Saber"]))));
  (0,external_kolmafia_namespaceObject.equip)(template_string_$item(mustard_service_templateObject16 || (mustard_service_templateObject16 = mustard_service_taggedTemplateLiteral(["cursed monkey's paw"]))));
  for (var _i = 0, _arr = [$effect(mustard_service_templateObject17 || (mustard_service_templateObject17 = mustard_service_taggedTemplateLiteral(["Astral Shell"]))), $effect(mustard_service_templateObject18 || (mustard_service_templateObject18 = mustard_service_taggedTemplateLiteral(["Elemental Saucesphere"])))]; _i < _arr.length; _i++) {
    var eff = _arr[_i];
    if (!have(eff)) {
      ensureEffect(eff);
    }
  }
  if ((0,external_kolmafia_namespaceObject.myHp)() <= (0,external_kolmafia_namespaceObject.myMaxhp)()) {
    (0,external_kolmafia_namespaceObject.restoreHp)((0,external_kolmafia_namespaceObject.myMaxhp)());
  }
  (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(mustard_service_templateObject19 || (mustard_service_templateObject19 = mustard_service_taggedTemplateLiteral(["Deep Dark Visions"]))));
  equipOutfit(outfit);
}
function motherSlime() {
  var curFam = (0,external_kolmafia_namespaceObject.myFamiliar)();
  (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(mustard_service_templateObject20 || (mustard_service_templateObject20 = mustard_service_taggedTemplateLiteral(["Machine Elf"]))));
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject21 || (mustard_service_templateObject21 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(mustard_service_templateObject22 || (mustard_service_templateObject22 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  Clan.join("beldungeon");
  (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure326", "1");
  (0,external_kolmafia_namespaceObject.writeCcs)("[default]\nskill snokebomb\nabort", "mustardservice");
  (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
  (0,external_kolmafia_namespaceObject.adv1)($location(mustard_service_templateObject23 || (mustard_service_templateObject23 = mustard_service_taggedTemplateLiteral(["The Slime Tube"]))), -1, "skill snokebomb; abort;");
  (0,external_kolmafia_namespaceObject.setCcs)("default");
  (0,external_kolmafia_namespaceObject.useFamiliar)(curFam);
}
function pilsners() {
  if ((0,external_kolmafia_namespaceObject.myLevel)() >= 11 && (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(mustard_service_templateObject24 || (mustard_service_templateObject24 = mustard_service_taggedTemplateLiteral(["astral pilsner"])))) === 6) {
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(mustard_service_templateObject25 || (mustard_service_templateObject25 = mustard_service_taggedTemplateLiteral(["The Ode to Booze"]))));
    (0,external_kolmafia_namespaceObject.drink)(4, template_string_$item(mustard_service_templateObject26 || (mustard_service_templateObject26 = mustard_service_taggedTemplateLiteral(["astral pilsner"]))));
  }
}
var famRoute = template_string_$familiar(mustard_service_templateObject27 || (mustard_service_templateObject27 = mustard_service_taggedTemplateLiteral(["Melodramedary"])));
var drinkSockdollager = false;
var floundryItem = template_string_$item(mustard_service_templateObject28 || (mustard_service_templateObject28 = mustard_service_taggedTemplateLiteral(["fish hatchet"])));
var yachtzeeChaining = false;
var scalerZone = $location(mustard_service_templateObject29 || (mustard_service_templateObject29 = mustard_service_taggedTemplateLiteral(["The Neverending Party"])));
function preRun() {
  (0,external_kolmafia_namespaceObject.print)("Pre Run: Pulling");
  (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
  var pulls = [template_string_$item(mustard_service_templateObject30 || (mustard_service_templateObject30 = mustard_service_taggedTemplateLiteral(["Calzone of Legend"]))), template_string_$item(mustard_service_templateObject31 || (mustard_service_templateObject31 = mustard_service_taggedTemplateLiteral(["Pizza of Legend"]))), //$item`Deep Dish of Legend`,
  template_string_$item(mustard_service_templateObject32 || (mustard_service_templateObject32 = mustard_service_taggedTemplateLiteral(["wasabi marble soda"]))), //$item`abstraction: purpose`,
  template_string_$item(mustard_service_templateObject33 || (mustard_service_templateObject33 = mustard_service_taggedTemplateLiteral(["Stick-Knife of Loathing"]))), template_string_$item(mustard_service_templateObject34 || (mustard_service_templateObject34 = mustard_service_taggedTemplateLiteral(["tobiko marble soda"]))) //$item`red eye`,
  //$item`Great Wolf's beastly trousers`,
  ];
  for (var _i2 = 0, _pulls = pulls; _i2 < _pulls.length; _i2++) {
    var pull = _pulls[_i2];
    (0,external_kolmafia_namespaceObject.takeStorage)(1, pull);
  }
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceDiner", "false");
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Set-up and Preparation");
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTime", "".concat((0,external_kolmafia_namespaceObject.nowToInt)()));
  setup();
}

//setup and prep
function setup() {
  (0,external_kolmafia_namespaceObject.print)("Beginning Stage 1: Set-up and Preparation", "blue");
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject35 || (mustard_service_templateObject35 = mustard_service_taggedTemplateLiteral(["pants"]))), template_string_$item(mustard_service_templateObject36 || (mustard_service_templateObject36 = mustard_service_taggedTemplateLiteral(["designer sweatpants"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("numberology 69");
  //useSkill(1, $skill`Spirit of Garlic`);

  if (have(template_string_$item(mustard_service_templateObject37 || (mustard_service_templateObject37 = mustard_service_taggedTemplateLiteral(["astral six-pack"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(mustard_service_templateObject38 || (mustard_service_templateObject38 = mustard_service_taggedTemplateLiteral(["astral six-pack"]))));
  }
  if (!have(floundryItem)) {
    Clan.join("Floundry");
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, floundryItem);
    Clan.join("Bonus Adventures from Hell");
  }
  if (!have(template_string_$skill(mustard_service_templateObject39 || (mustard_service_templateObject39 = mustard_service_taggedTemplateLiteral(["Insectologist"]))))) {
    (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&which=3&whichitem=11116"));
    (0,external_kolmafia_namespaceObject.runChoice)(2);
  }
  if (!have(template_string_$item(mustard_service_templateObject40 || (mustard_service_templateObject40 = mustard_service_taggedTemplateLiteral(["your cowboy boots"]))))) {
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=town_right&action=townright_ltt");
    (0,external_kolmafia_namespaceObject.runChoice)(3);
  }
  (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
  (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
  (0,external_kolmafia_namespaceObject.visitUrl)("tutorial.php?action=toot");
  if (have(template_string_$item(mustard_service_templateObject41 || (mustard_service_templateObject41 = mustard_service_taggedTemplateLiteral(["letter from King Ralph XI"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(mustard_service_templateObject42 || (mustard_service_templateObject42 = mustard_service_taggedTemplateLiteral(["letter from King Ralph XI"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(mustard_service_templateObject43 || (mustard_service_templateObject43 = mustard_service_taggedTemplateLiteral(["pork elf goodies sack"]))));
    var _iterator = mustard_service_createForOfIteratorHelper(template_string_$items(mustard_service_templateObject47 || (mustard_service_templateObject47 = mustard_service_taggedTemplateLiteral(["baconstone, hamethyst"])))),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var gem = _step.value;
        (0,external_kolmafia_namespaceObject.autosell)((0,external_kolmafia_namespaceObject.availableAmount)(gem), gem);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(mustard_service_templateObject44 || (mustard_service_templateObject44 = mustard_service_taggedTemplateLiteral(["porquoise"])))) > 2) {
      (0,external_kolmafia_namespaceObject.autosell)((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(mustard_service_templateObject45 || (mustard_service_templateObject45 = mustard_service_taggedTemplateLiteral(["porquoise"])))) - 2, template_string_$item(mustard_service_templateObject46 || (mustard_service_templateObject46 = mustard_service_taggedTemplateLiteral(["porquoise"]))));
    }
  }
  for (var _i3 = 0, _arr2 = [template_string_$item(mustard_service_templateObject48 || (mustard_service_templateObject48 = mustard_service_taggedTemplateLiteral(["toy accordion"]))), template_string_$item(mustard_service_templateObject49 || (mustard_service_templateObject49 = mustard_service_taggedTemplateLiteral(["turtle totem"]))), template_string_$item(mustard_service_templateObject50 || (mustard_service_templateObject50 = mustard_service_taggedTemplateLiteral(["saucepan"])))]; _i3 < _arr2.length; _i3++) {
    var item = _arr2[_i3];
    if (!have(item)) {
      (0,external_kolmafia_namespaceObject.retrieveItem)(1, item);
    }
  }
  (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=meatsmith&action=talk");
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=".concat(external_kolmafia_namespaceObject.myHash, "&whichchoice=1059&option=1"));
  if (!have(template_string_$item(mustard_service_templateObject51 || (mustard_service_templateObject51 = mustard_service_taggedTemplateLiteral(["borrowed time"])))) && property_get("_borrowedTimeUsed") === false) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(2, template_string_$item(mustard_service_templateObject52 || (mustard_service_templateObject52 = mustard_service_taggedTemplateLiteral(["borrowed time"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(mustard_service_templateObject53 || (mustard_service_templateObject53 = mustard_service_taggedTemplateLiteral(["borrowed time"]))));
  }
  if (!have(template_string_$item(mustard_service_templateObject54 || (mustard_service_templateObject54 = mustard_service_taggedTemplateLiteral(["box of Familiar Jacks"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(mustard_service_templateObject55 || (mustard_service_templateObject55 = mustard_service_taggedTemplateLiteral(["box of Familiar Jacks"]))));
  }
  (0,external_kolmafia_namespaceObject.useFamiliar)(famRoute);
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject56 || (mustard_service_templateObject56 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(mustard_service_templateObject57 || (mustard_service_templateObject57 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  if (property_get("_mummeryUses") === "") {
    (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1271", "3");
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(mustard_service_templateObject58 || (mustard_service_templateObject58 = mustard_service_taggedTemplateLiteral(["mumming trunk"]))));
  }
  if (property_get("boomBoxSong") !== "Total Eclipse of Your Meat") {
    setSong("Total Eclipse of Your Meat");
  }
  if (property_get("_saberMod") === 0) {
    (0,external_kolmafia_namespaceObject.visitUrl)("main.php?action=may4");
    (0,external_kolmafia_namespaceObject.runChoice)(4);
  }
  if (property_get("_spinmasterLatheVisited") === false) {
    (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=lathe");
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(mustard_service_templateObject59 || (mustard_service_templateObject59 = mustard_service_taggedTemplateLiteral(["ebony epee"]))));
  }
  if (property_get("backupCameraMode") !== "ml") {
    (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?action=bcmode");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1449&option=1");
  }
  if (property_get("backupCameraReverserEnabled") === false) {
    (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?action=bcmode");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1449&option=4");
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("garden pick");
  if (property_get("_lookingGlass") === false) {
    if (Clan.get().name !== "Bonus Adventures from Hell") {
      Clan.join("Bonus Adventures from Hell");
    }
    (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php?action=lookingglass&whichfloor=2");
  }
  if (available()) {
    sendTo($location(mustard_service_templateObject60 || (mustard_service_templateObject60 = mustard_service_taggedTemplateLiteral(["The Sleazy Back Alley"]))));
  }
  if (property_get("trainsetConfiguration") === "") {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(mustard_service_templateObject61 || (mustard_service_templateObject61 = mustard_service_taggedTemplateLiteral(["model train set"]))));
    setConfiguration([Station.COAL_HOPPER, Station.BRAWN_SILO, Station.VIEWING_PLATFORM, Station.WATER_BRIDGE, Station.GAIN_MEAT, Station.TOWER_FIZZY, Station.CANDY_FACTORY, Station.TRACKSIDE_DINER]);
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("mcd 10");
  (0,external_kolmafia_namespaceObject.cliExecute)("mcd 11");
  (0,external_kolmafia_namespaceObject.cliExecute)("fold wad of used tape");
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject62 || (mustard_service_templateObject62 = mustard_service_taggedTemplateLiteral(["hat"]))), template_string_$item(mustard_service_templateObject63 || (mustard_service_templateObject63 = mustard_service_taggedTemplateLiteral(["wad of used tape"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("parka kachungasaur");
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject64 || (mustard_service_templateObject64 = mustard_service_taggedTemplateLiteral(["shirt"]))), template_string_$item(mustard_service_templateObject65 || (mustard_service_templateObject65 = mustard_service_taggedTemplateLiteral(["Jurassic Parka"]))));
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject66 || (mustard_service_templateObject66 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(mustard_service_templateObject67 || (mustard_service_templateObject67 = mustard_service_taggedTemplateLiteral(["June cleaver"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("umbrella dr");
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject68 || (mustard_service_templateObject68 = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(mustard_service_templateObject69 || (mustard_service_templateObject69 = mustard_service_taggedTemplateLiteral(["unbreakable umbrella"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera init");
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject70 || (mustard_service_templateObject70 = mustard_service_taggedTemplateLiteral(["acc1"]))), template_string_$item(mustard_service_templateObject71 || (mustard_service_templateObject71 = mustard_service_taggedTemplateLiteral(["backup camera"]))));
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject72 || (mustard_service_templateObject72 = mustard_service_taggedTemplateLiteral(["acc2"]))), template_string_$item(mustard_service_templateObject73 || (mustard_service_templateObject73 = mustard_service_taggedTemplateLiteral(["your cowboy boots"]))));
  (0,external_kolmafia_namespaceObject.equip)($slot(mustard_service_templateObject74 || (mustard_service_templateObject74 = mustard_service_taggedTemplateLiteral(["acc3"]))), template_string_$item(mustard_service_templateObject75 || (mustard_service_templateObject75 = mustard_service_taggedTemplateLiteral(["combat lover's locket"]))));
  skeletons();
}
function skeletons() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Skeletons to Coil Wire");
  (0,external_kolmafia_namespaceObject.print)("Beginning Stage 2: Skeletons to Coil Wire", "blue");
  if ((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceDiner") === "false") {
    (0,external_kolmafia_namespaceObject.adv1)($location(mustard_service_templateObject76 || (mustard_service_templateObject76 = mustard_service_taggedTemplateLiteral(["Sloppy Seconds Diner"]))), -1, "abort;");
    (0,external_kolmafia_namespaceObject.adv1)($location(mustard_service_templateObject77 || (mustard_service_templateObject77 = mustard_service_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"]))), -1, "abort;");
    (0,external_kolmafia_namespaceObject.adv1)($location(mustard_service_templateObject78 || (mustard_service_templateObject78 = mustard_service_taggedTemplateLiteral(["Barf Mountain"]))), -1, "abort;");
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceDiner", "true");
  }
  (0,external_kolmafia_namespaceObject.visitUrl)("guild.php?guild=f");
  (0,external_kolmafia_namespaceObject.visitUrl)("guild.php?place=challenge");
  if (getKramcoWandererChance() === 1) {
    kramMode(); // should guarantee a sosig
  }

  if (have($effect(mustard_service_templateObject79 || (mustard_service_templateObject79 = mustard_service_taggedTemplateLiteral(["Beaten Up"])))) && !have(template_string_$item(mustard_service_templateObject80 || (mustard_service_templateObject80 = mustard_service_taggedTemplateLiteral(["magical sausage casing"]))))) {
    (0,external_kolmafia_namespaceObject.abort)("Died during first sosig?");
  }
  if (!have(template_string_$item(mustard_service_templateObject81 || (mustard_service_templateObject81 = mustard_service_taggedTemplateLiteral(["red rocket"])))) && !have($effect(mustard_service_templateObject82 || (mustard_service_templateObject82 = mustard_service_taggedTemplateLiteral(["Everything Looks Red"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(mustard_service_templateObject83 || (mustard_service_templateObject83 = mustard_service_taggedTemplateLiteral(["red rocket"]))));
  }
  if (!have($effect(mustard_service_templateObject84 || (mustard_service_templateObject84 = mustard_service_taggedTemplateLiteral(["Everything Looks Yellow"]))))) {
    (0,external_kolmafia_namespaceObject.writeCcs)("[default]\nskill feel hatred\nabort", "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    reminisce($monster(mustard_service_templateObject85 || (mustard_service_templateObject85 = mustard_service_taggedTemplateLiteral(["red skeleton"]))));
    (0,external_kolmafia_namespaceObject.setCcs)("default");
    (0,external_kolmafia_namespaceObject.cliExecute)("umbrella ml");
    (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera ml");
    (0,external_kolmafia_namespaceObject.cliExecute)("parka dilophosaur");
    (0,external_kolmafia_namespaceObject.writeCcs)("[default]\nskill feel nostalgic\nitem red rocket\nskill spit jurassic acid\nabort", "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    mapMonster($location(mustard_service_templateObject86 || (mustard_service_templateObject86 = mustard_service_taggedTemplateLiteral(["The Skeleton Store"]))), $monster(mustard_service_templateObject87 || (mustard_service_templateObject87 = mustard_service_taggedTemplateLiteral(["novelty tropical skeleton"]))));
    (0,external_kolmafia_namespaceObject.setCcs)("default");
  }
  if (!have($effect(mustard_service_templateObject88 || (mustard_service_templateObject88 = mustard_service_taggedTemplateLiteral(["Everything Looks Yellow"])))) && have($effect(mustard_service_templateObject89 || (mustard_service_templateObject89 = mustard_service_taggedTemplateLiteral(["Beaten Up"]))))) {
    (0,external_kolmafia_namespaceObject.abort)("Failed to YR skeletong");
  }
  if (have(template_string_$item(_templateObject90 || (_templateObject90 = mustard_service_taggedTemplateLiteral(["red box"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject91 || (_templateObject91 = mustard_service_taggedTemplateLiteral(["red box"]))));
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("parka spikolodon");
  if (have(template_string_$item(_templateObject92 || (_templateObject92 = mustard_service_taggedTemplateLiteral(["MayDay\u2122 supply package"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject93 || (_templateObject93 = mustard_service_taggedTemplateLiteral(["MayDay\u2122 supply package"]))));
    (0,external_kolmafia_namespaceObject.autosell)(1, template_string_$item(_templateObject94 || (_templateObject94 = mustard_service_taggedTemplateLiteral(["space blanket"]))));
  }
  if (!have(template_string_$item(_templateObject95 || (_templateObject95 = mustard_service_taggedTemplateLiteral(["Catherine Wheel"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject96 || (_templateObject96 = mustard_service_taggedTemplateLiteral(["Catherine Wheel"]))));
    (0,external_kolmafia_namespaceObject.equip)(template_string_$item(_templateObject97 || (_templateObject97 = mustard_service_taggedTemplateLiteral(["Catherine Wheel"]))));
  }
  if (have(template_string_$item(_templateObject98 || (_templateObject98 = mustard_service_taggedTemplateLiteral(["magical sausage casing"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject99 || (_templateObject99 = mustard_service_taggedTemplateLiteral(["magical sausage"]))));
    (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject100 || (_templateObject100 = mustard_service_taggedTemplateLiteral(["magical sausage"]))));
  }
  if (property_get("questG09Muscle") !== "finished") {
    var effs = [$effect(_templateObject101 || (_templateObject101 = mustard_service_taggedTemplateLiteral(["Ur-Kel's Aria of Annoyance"]))), $effect(_templateObject102 || (_templateObject102 = mustard_service_taggedTemplateLiteral(["Musk of the Moose"]))), $effect(_templateObject103 || (_templateObject103 = mustard_service_taggedTemplateLiteral(["Carlweather's Cantata of Confrontation"]))), $effect(_templateObject104 || (_templateObject104 = mustard_service_taggedTemplateLiteral(["Pride of the Puffin"]))), $effect(_templateObject105 || (_templateObject105 = mustard_service_taggedTemplateLiteral(["Carol of the Thrills"]))), $effect(_templateObject106 || (_templateObject106 = mustard_service_taggedTemplateLiteral(["Empathy"]))), $effect(_templateObject107 || (_templateObject107 = mustard_service_taggedTemplateLiteral(["Leash of Linguini"]))), $effect(_templateObject108 || (_templateObject108 = mustard_service_taggedTemplateLiteral(["Drescher's Annoying Noise"])))];
    for (var _i4 = 0, _effs = effs; _i4 < _effs.length; _i4++) {
      var effect = _effs[_i4];
      ensureEffect(effect);
    }
    (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject109 || (_templateObject109 = mustard_service_taggedTemplateLiteral(["Pair of Stomping Boots"]))));
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject110 || (_templateObject110 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(_templateObject111 || (_templateObject111 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
    while ((0,external_kolmafia_namespaceObject.getProperty)("questG09Muscle") !== "step1" && (0,external_kolmafia_namespaceObject.getProperty)("questG09Muscle") !== "finished") {
      (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject112 || (_templateObject112 = mustard_service_taggedTemplateLiteral(["The Outskirts of Cobb's Knob"]))), -1, "runaway; abort;");
    }
    if (have($effect(_templateObject113 || (_templateObject113 = mustard_service_taggedTemplateLiteral(["Carlweather's Cantata of Confrontation"]))))) {
      uneffect($effect(_templateObject114 || (_templateObject114 = mustard_service_taggedTemplateLiteral(["Carlweather's Cantata of Confrontation"]))));
    }
    (0,external_kolmafia_namespaceObject.visitUrl)("guild.php?guild=f");
    (0,external_kolmafia_namespaceObject.visitUrl)("guild.php?place=challenge");
    (0,external_kolmafia_namespaceObject.visitUrl)("guild.php?place=scg");
    (0,external_kolmafia_namespaceObject.visitUrl)("guild.php?place=scg");
    (0,external_kolmafia_namespaceObject.useFamiliar)(famRoute);
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject115 || (_templateObject115 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(_templateObject116 || (_templateObject116 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  }
  if (property_get("_universeCalculated") === 0) {
    (0,external_kolmafia_namespaceObject.cliExecute)("numberology 69");
  }
  if ((0,external_kolmafia_namespaceObject.myAdventures)() < 61 && !have(template_string_$item(_templateObject117 || (_templateObject117 = mustard_service_taggedTemplateLiteral(["distilled fortified wine"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject118 || (_templateObject118 = mustard_service_taggedTemplateLiteral(["11-leaf clover"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject119 || (_templateObject119 = mustard_service_taggedTemplateLiteral(["11-leaf clover"]))));
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject120 || (_templateObject120 = mustard_service_taggedTemplateLiteral(["The Sleazy Back Alley"]))));
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject121 || (_templateObject121 = mustard_service_taggedTemplateLiteral(["The Ode to Booze"]))));
    (0,external_kolmafia_namespaceObject.drink)(1, template_string_$item(_templateObject122 || (_templateObject122 = mustard_service_taggedTemplateLiteral(["distilled fortified wine"]))));
    uneffect($effect(_templateObject123 || (_templateObject123 = mustard_service_taggedTemplateLiteral(["Ode to Booze"]))));
  }
  if (!property_get("csServicesPerformed").includes("Coil Wire")) {
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=11&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.print)("WIRE? COILED.", "blue");
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "60");
  }
  nextLevelling();
}
function levellingPrep() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling Preparation");
  if (!have($effect(_templateObject124 || (_templateObject124 = mustard_service_taggedTemplateLiteral(["HGH-charged"]))))) {
    //cliExecute(`genie effect HGH-charged`);
    //CursedMonkeyPaw.wishFor($effect`HGH-charged`);
  }
  if ((0,external_kolmafia_namespaceObject.mySpleenUse)() === 0 && have(template_string_$item(_templateObject125 || (_templateObject125 = mustard_service_taggedTemplateLiteral(["abstraction: purpose"]))))) {
    (0,external_kolmafia_namespaceObject.chew)(1, template_string_$item(_templateObject126 || (_templateObject126 = mustard_service_taggedTemplateLiteral(["abstraction: purpose"]))));
  }
  if (property_get("_aprilShower") === false) {
    if (Clan.get().name !== "Bonus Adventures from Hell") {
      Clan.join("Bonus Adventures from Hell");
    }
    (0,external_kolmafia_namespaceObject.cliExecute)("shower warm");
  }
  if (have(template_string_$item(_templateObject127 || (_templateObject127 = mustard_service_taggedTemplateLiteral(["a ten-percent bonus"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject128 || (_templateObject128 = mustard_service_taggedTemplateLiteral(["a ten-percent bonus"]))));
  }
  if (property_get("_clanFortuneBuffUsed") === false) {
    if (Clan.get().name !== "Bonus Adventures from Hell") {
      Clan.join("Bonus Adventures from Hell");
    }
    //cliExecute(`fortune mus`);  //seems to not be necessary at this point
  }

  if (property_get("calzoneOfLegendEaten") === false) {
    (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject129 || (_templateObject129 = mustard_service_taggedTemplateLiteral(["Calzone of Legend"]))));
  }
  if (property_get("deepDishOfLegendEaten") === false && have(template_string_$item(_templateObject130 || (_templateObject130 = mustard_service_taggedTemplateLiteral(["Deep Dish of Legend"]))))) {
    (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject131 || (_templateObject131 = mustard_service_taggedTemplateLiteral(["Deep Dish of Legend"]))));
  }
  if (property_get("_lyleFavored") === false) {
    (0,external_kolmafia_namespaceObject.cliExecute)("monorail");
  }
  if (property_get("telescopeLookedHigh") === false) {
    (0,external_kolmafia_namespaceObject.cliExecute)("telescope look high");
  }
  if (!have($effect(_templateObject132 || (_templateObject132 = mustard_service_taggedTemplateLiteral(["New and Improved"]))))) {
    //CursedMonkeyPaw.wishFor($effect`New and Improved`);
    (0,external_kolmafia_namespaceObject.cliExecute)("genie effect New and Improved");
  }
  if (have(template_string_$item(_templateObject133 || (_templateObject133 = mustard_service_taggedTemplateLiteral(["wasabi marble soda"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject134 || (_templateObject134 = mustard_service_taggedTemplateLiteral(["wasabi marble soda"]))));
  }
  if (!have($effect(_templateObject135 || (_templateObject135 = mustard_service_taggedTemplateLiteral(["A Contender"])))) && famRoute === template_string_$familiar(_templateObject136 || (_templateObject136 = mustard_service_taggedTemplateLiteral(["Melodramedary"])))) {
    //CursedMonkeyPaw.wishFor($effect`A Contender`);
    (0,external_kolmafia_namespaceObject.cliExecute)("genie effect A Contender");
  }
  var _iterator2 = mustard_service_createForOfIteratorHelper(template_string_$items(_templateObject201 || (_templateObject201 = mustard_service_taggedTemplateLiteral(["Ben-Gal\u2122 Balm, hair spray, glittery mascara"])))),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var item = _step2.value;
      if (!have(item)) {
        (0,external_kolmafia_namespaceObject.retrieveItem)(3, item);
        (0,external_kolmafia_namespaceObject.use)(2, item);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (property_get("reagentSummons") === 0) {
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject137 || (_templateObject137 = mustard_service_taggedTemplateLiteral(["Advanced Saucecrafting"]))));
  }
  if (property_get("_preventScurvy") === false) {
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject138 || (_templateObject138 = mustard_service_taggedTemplateLiteral(["Prevent Scurvy and Sobriety"]))));
  }
  if (!have($effect(_templateObject139 || (_templateObject139 = mustard_service_taggedTemplateLiteral(["Phorcefullness"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject140 || (_templateObject140 = mustard_service_taggedTemplateLiteral(["philter of phorce"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject141 || (_templateObject141 = mustard_service_taggedTemplateLiteral(["philter of phorce"]))));
  }
  if (!have($effect(_templateObject142 || (_templateObject142 = mustard_service_taggedTemplateLiteral(["Stabilizing Oiliness"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject143 || (_templateObject143 = mustard_service_taggedTemplateLiteral(["oil of stability"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject144 || (_templateObject144 = mustard_service_taggedTemplateLiteral(["oil of stability"]))));
  }
  if (!have($effect(_templateObject145 || (_templateObject145 = mustard_service_taggedTemplateLiteral(["Mystically Oiled"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject146 || (_templateObject146 = mustard_service_taggedTemplateLiteral(["ointment of the occult"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject147 || (_templateObject147 = mustard_service_taggedTemplateLiteral(["ointment of the occult"]))));
  }
  (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject148 || (_templateObject148 = mustard_service_taggedTemplateLiteral(["Blood Sugar Sauce Magic"]))));
  if (have($effect(_templateObject149 || (_templateObject149 = mustard_service_taggedTemplateLiteral(["Everything Looks Red"]))))) {
    (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject150 || (_templateObject150 = mustard_service_taggedTemplateLiteral(["Pizza of Legend"]))));
  }
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject151 || (_templateObject151 = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(_templateObject152 || (_templateObject152 = mustard_service_taggedTemplateLiteral(["latte lovers member's mug"]))));
  if (property_get("_latteDrinkUsed") === false && property_get("_latteRefillsUsed") === 0) {
    var rocketFight = "[default]\nskill gulp latte\nskill throw latte on opponent\nabort";
    (0,external_kolmafia_namespaceObject.writeCcs)(rocketFight, "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject153 || (_templateObject153 = mustard_service_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"]))), -1); //gulp, rockets, run
    (0,external_kolmafia_namespaceObject.setCcs)("default");
    fill("pumpkin", "cinnamon", "vanilla");
  }
  if (property_get("_latteDrinkUsed") === false && property_get("_latteRefillsUsed") === 1) {
    var _rocketFight = "[default]\nskill gulp latte\nskill throw latte on opponent\nabort";
    (0,external_kolmafia_namespaceObject.writeCcs)(_rocketFight, "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject154 || (_templateObject154 = mustard_service_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"]))), -1); //gulp, rockets, run
    (0,external_kolmafia_namespaceObject.setCcs)("default");
    fill("pumpkin", "cinnamon", "vanilla");
  }
  if (have($effect(_templateObject155 || (_templateObject155 = mustard_service_taggedTemplateLiteral(["Everything Looks Red"]))))) {
    (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject156 || (_templateObject156 = mustard_service_taggedTemplateLiteral(["Pizza of Legend"]))));
  } else {
    (0,external_kolmafia_namespaceObject.abort)("rocket fight: wrongy");
  }
  if (!have($effect(_templateObject157 || (_templateObject157 = mustard_service_taggedTemplateLiteral(["In a Lather"])))) && drinkSockdollager) {
    if (Clan.get().name !== "Bonus Adventures from Hell") {
      Clan.join("Bonus Adventures from Hell");
    }
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject158 || (_templateObject158 = mustard_service_taggedTemplateLiteral(["The Ode to Booze"]))));
    (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php?preaction=speakeasydrink&drink=6&pwd=".concat(+(0,external_kolmafia_namespaceObject.myHash)())); //sockdollager
  }

  var effects = [$effect(_templateObject159 || (_templateObject159 = mustard_service_taggedTemplateLiteral(["Bendin' Hell"]))), $effect(_templateObject160 || (_templateObject160 = mustard_service_taggedTemplateLiteral(["Song of the North"]))), $effect(_templateObject161 || (_templateObject161 = mustard_service_taggedTemplateLiteral(["Disco Fever"]))), $effect(_templateObject162 || (_templateObject162 = mustard_service_taggedTemplateLiteral(["Mariachi Mood"]))), $effect(_templateObject163 || (_templateObject163 = mustard_service_taggedTemplateLiteral(["Patience of the Tortoise"]))), $effect(_templateObject164 || (_templateObject164 = mustard_service_taggedTemplateLiteral(["Rage of the Reindeer"]))), $effect(_templateObject165 || (_templateObject165 = mustard_service_taggedTemplateLiteral(["Seal Clubbing Frenzy"]))), $effect(_templateObject166 || (_templateObject166 = mustard_service_taggedTemplateLiteral(["Saucemastery"]))), $effect(_templateObject167 || (_templateObject167 = mustard_service_taggedTemplateLiteral(["Stevedave's Shanty of Superiority"]))), $effect(_templateObject168 || (_templateObject168 = mustard_service_taggedTemplateLiteral(["Song of Bravado"]))), $effect(_templateObject169 || (_templateObject169 = mustard_service_taggedTemplateLiteral(["Carol of the Bulls"]))), $effect(_templateObject170 || (_templateObject170 = mustard_service_taggedTemplateLiteral(["Carol of the Hells"]))), $effect(_templateObject171 || (_templateObject171 = mustard_service_taggedTemplateLiteral(["Carol of the Thrills"]))), $effect(_templateObject172 || (_templateObject172 = mustard_service_taggedTemplateLiteral(["Pride of the Puffin"]))), $effect(_templateObject173 || (_templateObject173 = mustard_service_taggedTemplateLiteral(["Ur-Kel's Aria of Annoyance"]))), $effect(_templateObject174 || (_templateObject174 = mustard_service_taggedTemplateLiteral(["Drescher's Annoying Noise"]))), $effect(_templateObject175 || (_templateObject175 = mustard_service_taggedTemplateLiteral(["The Magical Mojomuscular Melody"]))), $effect(_templateObject176 || (_templateObject176 = mustard_service_taggedTemplateLiteral(["Quiet Determination"]))), $effect(_templateObject177 || (_templateObject177 = mustard_service_taggedTemplateLiteral(["Big"]))), $effect(_templateObject178 || (_templateObject178 = mustard_service_taggedTemplateLiteral(["Empathy"]))), $effect(_templateObject179 || (_templateObject179 = mustard_service_taggedTemplateLiteral(["Leash of Linguini"]))), $effect(_templateObject180 || (_templateObject180 = mustard_service_taggedTemplateLiteral(["Blood Bond"]))), $effect(_templateObject181 || (_templateObject181 = mustard_service_taggedTemplateLiteral(["Feeling Excited"]))), $effect(_templateObject182 || (_templateObject182 = mustard_service_taggedTemplateLiteral(["Ghostly Shell"]))), $effect(_templateObject183 || (_templateObject183 = mustard_service_taggedTemplateLiteral(["Astral Shell"]))), $effect(_templateObject184 || (_templateObject184 = mustard_service_taggedTemplateLiteral(["Jalape\xF1o Saucesphere"]))), $effect(_templateObject185 || (_templateObject185 = mustard_service_taggedTemplateLiteral(["Elemental Saucesphere"]))), $effect(_templateObject186 || (_templateObject186 = mustard_service_taggedTemplateLiteral(["Scarysauce"]))), $effect(_templateObject187 || (_templateObject187 = mustard_service_taggedTemplateLiteral(["Feeling Peaceful"]))), $effect(_templateObject188 || (_templateObject188 = mustard_service_taggedTemplateLiteral(["Your Fifteen Minutes"]))), $effect(_templateObject189 || (_templateObject189 = mustard_service_taggedTemplateLiteral(["Frostbeard"]))), $effect(_templateObject190 || (_templateObject190 = mustard_service_taggedTemplateLiteral(["Takin' It Greasy"]))), $effect(_templateObject191 || (_templateObject191 = mustard_service_taggedTemplateLiteral(["Rotten Memories"]))), $effect(_templateObject192 || (_templateObject192 = mustard_service_taggedTemplateLiteral(["Pyromania"]))), $effect(_templateObject193 || (_templateObject193 = mustard_service_taggedTemplateLiteral(["Intimidating Mien"]))), $effect(_templateObject194 || (_templateObject194 = mustard_service_taggedTemplateLiteral(["Fat Leon's Phat Loot Lyric"]))), $effect(_templateObject195 || (_templateObject195 = mustard_service_taggedTemplateLiteral(["Singer's Faithful Ocelot"])))];
  for (var _i5 = 0, _effects = effects; _i5 < _effects.length; _i5++) {
    var effect = _effects[_i5];
    ensureEffect(effect);
  }
  if (!have($effect(_templateObject196 || (_templateObject196 = mustard_service_taggedTemplateLiteral(["Frostbeard"]))))) {
    (0,external_kolmafia_namespaceObject.abort)("Failed to obtain effects?");
  }
  if (!property_get("_latteDrinkUsed") && property_get("_latteRefillsUsed") === 2) {
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject197 || (_templateObject197 = mustard_service_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"]))), -1, "skill 7303; skill 7301; abort;"); //gulp, run
    fill("pumpkin", "cinnamon", "vanilla");
  }
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject198 || (_templateObject198 = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(_templateObject199 || (_templateObject199 = mustard_service_taggedTemplateLiteral(["unbreakable umbrella"]))));
  (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject200 || (_templateObject200 = mustard_service_taggedTemplateLiteral(["Blood Sugar Sauce Magic"]))));
  nextLevelling();
}
function riftConsult() {
  var _bossStrategies;
  var bossStrategies = (_bossStrategies = {}, mustard_service_defineProperty(_bossStrategies, "shadow cauldron", "skill northern explosion; repeat;"), mustard_service_defineProperty(_bossStrategies, "shadow matrix", "skill stuffed mortar shell; skill saucegeyser; repeat;"), mustard_service_defineProperty(_bossStrategies, "shadow orrery", "skill northern explosion; repeat;"), mustard_service_defineProperty(_bossStrategies, "shadow scythe", "skill northern explosion; repeat;"), mustard_service_defineProperty(_bossStrategies, "shadow spire", "skill northern explosion; repeat;"), mustard_service_defineProperty(_bossStrategies, "shadow tongue", "skill northern explosion; repeat;"), _bossStrategies);
  if (property_get("_fireExtinguisherCharge") > 10) {
    if ((0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject202 || (_templateObject202 = mustard_service_taggedTemplateLiteral(["weapon"])))) !== template_string_$item(_templateObject203 || (_templateObject203 = mustard_service_taggedTemplateLiteral(["industrial fire extinguisher"])))) {
      (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject204 || (_templateObject204 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject205 || (_templateObject205 = mustard_service_taggedTemplateLiteral(["industrial fire extinguisher"]))));
    }
    var riftStyle = "skill summon love stinkbug; if monsterid 2278; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; skill Fire Extinguisher: Polar Vortex; endif; attack; repeat;";
    return riftStyle;
  } else if (property_get("rufusQuestType") === "entity" && property_get("encountersUntilSRChoice") === 0) {
    (0,external_kolmafia_namespaceObject.restoreHp)((0,external_kolmafia_namespaceObject.myMaxhp)());
    (0,external_kolmafia_namespaceObject.equip)(template_string_$item(_templateObject206 || (_templateObject206 = mustard_service_taggedTemplateLiteral(["Jurassic Parka"]))));
    var boss = property_get("rufusQuestTarget");
    if (boss in bossStrategies) {
      var _riftStyle = bossStrategies[boss];
      return _riftStyle;
    } else {
      return "abort;";
    }
  } else {
    if ((0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject207 || (_templateObject207 = mustard_service_taggedTemplateLiteral(["weapon"])))) !== template_string_$item(_templateObject208 || (_templateObject208 = mustard_service_taggedTemplateLiteral(["June cleaver"])))) {
      (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject209 || (_templateObject209 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject210 || (_templateObject210 = mustard_service_taggedTemplateLiteral(["June cleaver"]))));
    }
    var _riftStyle2 = "skill summon love stinkbug; attack; repeat;";
    return _riftStyle2;
  }
}
function payphoneFights() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: Payphone");
  if (have(template_string_$item(_templateObject211 || (_templateObject211 = mustard_service_taggedTemplateLiteral(["porkpie-mounted popper"]))))) {
    (0,external_kolmafia_namespaceObject.equip)(template_string_$item(_templateObject212 || (_templateObject212 = mustard_service_taggedTemplateLiteral(["porkpie-mounted popper"]))));
  }
  if (property_get("_shadowAffinityToday") === false) {
    (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1497", "1");
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject213 || (_templateObject213 = mustard_service_taggedTemplateLiteral(["closed-circuit pay phone"]))));
  }
  while (have($effect(_templateObject214 || (_templateObject214 = mustard_service_taggedTemplateLiteral(["Shadow Affinity"])))) && property_get("encountersUntilSRChoice") > 0) {
    preVenture();
    var riftStyle = riftConsult();
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject215 || (_templateObject215 = mustard_service_taggedTemplateLiteral(["Shadow Rift (The Misspelled Cemetary)"]))), -1, riftStyle);
  }
  if (property_get("questRufus") === "started" && property_get("encountersUntilSRChoice") === 0) {
    if ((0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject216 || (_templateObject216 = mustard_service_taggedTemplateLiteral(["weapon"])))) !== template_string_$item(_templateObject217 || (_templateObject217 = mustard_service_taggedTemplateLiteral(["June cleaver"])))) {
      (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject218 || (_templateObject218 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject219 || (_templateObject219 = mustard_service_taggedTemplateLiteral(["June cleaver"]))));
    }
    preVenture();
    (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject220 || (_templateObject220 = mustard_service_taggedTemplateLiteral(["Machine Elf"]))));
    var _riftStyle3 = riftConsult();
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject221 || (_templateObject221 = mustard_service_taggedTemplateLiteral(["Shadow Rift"]))), -1, _riftStyle3);
    (0,external_kolmafia_namespaceObject.useFamiliar)(famRoute);
  }
  if (property_get("questRufus") === "step1") {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject222 || (_templateObject222 = mustard_service_taggedTemplateLiteral(["closed-circuit pay phone"]))));
  }
  fallGuy();
  if (have($effect(_templateObject223 || (_templateObject223 = mustard_service_taggedTemplateLiteral(["Beaten Up"]))))) {
    (0,external_kolmafia_namespaceObject.abort)("Died? Shadow Boss?");
  }
  nextLevelling();
}
function snojoFights() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: Snojo");
  (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=snojo&action=snojo_controller");
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&whichchoice=1118&option=3"));
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject224 || (_templateObject224 = mustard_service_taggedTemplateLiteral(["hat"]))), template_string_$item(_templateObject225 || (_templateObject225 = mustard_service_taggedTemplateLiteral(["porkpie-mounted popper"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("fold garbage shirt");
  (0,external_kolmafia_namespaceObject.equip)(template_string_$item(_templateObject226 || (_templateObject226 = mustard_service_taggedTemplateLiteral(["makeshift garbage shirt"]))));
  var snojoMode = "attack; repeat;";
  while (property_get("_snojoFreeFights") < 10) {
    preVenture();
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject227 || (_templateObject227 = mustard_service_taggedTemplateLiteral(["The X-32-F Combat Training Snowman"]))), -1, snojoMode);
  }
  if (Clan.get().name !== "Bonus Adventures from Hell") {
    Clan.join("Bonus Adventures from Hell");
  }
  (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php?action=hottub");
  nextLevelling();
}
function oliverFights() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: Oliver's");
  if (property_get("_monstersMapped") === 1) {
    preVenture();
    (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject228 || (_templateObject228 = mustard_service_taggedTemplateLiteral(["Nanorhino"]))));
    (0,external_kolmafia_namespaceObject.writeCcs)("[default]\nskill feel nostalgic\nskill feel envy\nskill lunging thrust-smack\nattack", "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    mapMonster($location(_templateObject229 || (_templateObject229 = mustard_service_taggedTemplateLiteral(["An Unusually Quiet Barroom Brawl"]))), $monster(_templateObject230 || (_templateObject230 = mustard_service_taggedTemplateLiteral(["goblin flapper"]))));
    (0,external_kolmafia_namespaceObject.setCcs)("default");
    (0,external_kolmafia_namespaceObject.useFamiliar)(famRoute);
  }
  var barMode = "attack; repeat;";
  while (property_get("_speakeasyFreeFights") < 3) {
    preVenture();
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject231 || (_templateObject231 = mustard_service_taggedTemplateLiteral(["An Unusually Quiet Barroom Brawl"]))), -1, barMode);
  }
  nextLevelling();
}
function sealFights() {
  var _iterator3 = mustard_service_createForOfIteratorHelper(template_string_$items(_templateObject239 || (_templateObject239 = mustard_service_taggedTemplateLiteral(["porkpie-mounted popper, seal-clubbing club"])))),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var item = _step3.value;
      if (!have(item)) {
        (0,external_kolmafia_namespaceObject.retrieveItem)(1, item);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: Seals");
  var clubMode = "[default]\nattack";
  (0,external_kolmafia_namespaceObject.writeCcs)(clubMode, "mustardservice");
  (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
  while (property_get("_sealsSummoned") < 5) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject232 || (_templateObject232 = mustard_service_taggedTemplateLiteral(["figurine of an ancient seal"]))));
    (0,external_kolmafia_namespaceObject.retrieveItem)(3, template_string_$item(_templateObject233 || (_templateObject233 = mustard_service_taggedTemplateLiteral(["seal-blubber candle"]))));
    preVenture();
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject234 || (_templateObject234 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject235 || (_templateObject235 = mustard_service_taggedTemplateLiteral(["seal-clubbing club"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject236 || (_templateObject236 = mustard_service_taggedTemplateLiteral(["figurine of an ancient seal"]))));
  }
  (0,external_kolmafia_namespaceObject.setCcs)("default");
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject237 || (_templateObject237 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject238 || (_templateObject238 = mustard_service_taggedTemplateLiteral(["June cleaver"]))));
  nextLevelling();
}
function witchessFights() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: Witchess");
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject240 || (_templateObject240 = mustard_service_taggedTemplateLiteral(["shirt"]))), template_string_$item(_templateObject241 || (_templateObject241 = mustard_service_taggedTemplateLiteral(["makeshift garbage shirt"]))));
  var bishieMode = "[default]\n\"if hasskill 7340; skill 7340; endif;\"\nattack";
  (0,external_kolmafia_namespaceObject.writeCcs)(bishieMode, "mustardservice");
  (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
  while (property_get("_witchessFights") < 4) {
    preVenture();
    fightPiece($monster(_templateObject242 || (_templateObject242 = mustard_service_taggedTemplateLiteral(["Witchess Bishop"]))));
  }
  (0,external_kolmafia_namespaceObject.setCcs)("default");
  nextLevelling(); //currently, skipping backups entirely
}

//backups
function backupFights() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: Backups");
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject243 || (_templateObject243 = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(_templateObject244 || (_templateObject244 = mustard_service_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))));
  if (property_get("_sausageFights") === 0) {
    preVenture();
    var sausageFights = "attack; repeat;";
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject245 || (_templateObject245 = mustard_service_taggedTemplateLiteral(["Barf Mountain"]))), -1, sausageFights);
  }
  if (property_get("_sausageFights") > 0) {
    var _backupFights = "if hasskill 7381; skill 7381; endif; if hasskill 7340; skill 7340; endif; attack; repeat;";
    while (property_get("_backUpUses") < 11) {
      preVenture();
      (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject246 || (_templateObject246 = mustard_service_taggedTemplateLiteral(["The Dire Warren"]))), -1, _backupFights);
    }
  }
  nextLevelling();
}
function deepMachineFights() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: DMT");
  var deepFight = "if hasskill 7340; skill 7340; endif; skill lunging thrust-smack; repeat;";
  (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject247 || (_templateObject247 = mustard_service_taggedTemplateLiteral(["Machine Elf"]))));
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject248 || (_templateObject248 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(_templateObject249 || (_templateObject249 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  while (property_get("_machineTunnelsAdv") < 5) {
    preVenture();
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject250 || (_templateObject250 = mustard_service_taggedTemplateLiteral(["The Deep Machine Tunnels"]))), -1, deepFight);
  }
  (0,external_kolmafia_namespaceObject.useFamiliar)(famRoute);
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject251 || (_templateObject251 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(_templateObject252 || (_templateObject252 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  nextLevelling();
}
function neverendingFreefights() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: NEP");
  var NEPFight = "if hasskill 7406; skill 7406; endif; if hasskill 7340; skill 7340; endif; skill lunging thrust-smack; repeat;";
  if (property_get("_questPartyFair") === "unstarted") {
    _set("choiceAdventure1322", 2);
    _set("choiceAdventure1324", 5);
    _set("choiceAdventure1326", 2);
    (0,external_kolmafia_namespaceObject.adv1)(scalerZone, -1, "abort");
  }
  (0,external_kolmafia_namespaceObject.writeCcs)(NEPFight, "mustardservice");
  (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
  while (property_get("_neverendingPartyFreeTurns") < 10) {
    preVenture();
    (0,external_kolmafia_namespaceObject.adv1)(scalerZone, -1, NEPFight);
  }
  (0,external_kolmafia_namespaceObject.setCcs)("default");
  nextLevelling();
}
function freekillConsult() {
  var freeFights = "if hasskill 7406; skill 7406; endif; if hasskill 7340; skill 7340; endif;";
  if (property_get("_shatteringPunchUsed") < 3) {
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject253 || (_templateObject253 = mustard_service_taggedTemplateLiteral(["acc3"]))), template_string_$item(_templateObject254 || (_templateObject254 = mustard_service_taggedTemplateLiteral(["Cincho de Mayo"]))));
    freeFights += "if hasskill 7357; skill 7357; endif; if hasskill 7444; skill 7444; endif; if hasskill Shattering Punch; skill Shattering Punch; endif; abort;";
    return freeFights;
  } else if (property_get("_chestXRayUsed") < 3) {
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject255 || (_templateObject255 = mustard_service_taggedTemplateLiteral(["acc3"]))), template_string_$item(_templateObject256 || (_templateObject256 = mustard_service_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"]))));
    freeFights += " if hasskill 7307; skill 7307; endif; abort;";
    return freeFights;
  } else if (!property_get("_gingerbreadMobHitUsed")) {
    freeFights += " if hasskill 163; skill 163; endif; abort;";
    return freeFights;
  } else {
    return "abort;";
  }
}
function freekillBonanza() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Levelling: Freekills");
  if (property_get("_witchessFights") === 4) {
    var finalWitchpiece = "[default]\nskill lunging thrust-smack";
    (0,external_kolmafia_namespaceObject.writeCcs)(finalWitchpiece, "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    preVenture();
    fightPiece($monster(_templateObject257 || (_templateObject257 = mustard_service_taggedTemplateLiteral(["Witchess Witch"]))));
    (0,external_kolmafia_namespaceObject.setCcs)("default");
  }
  var cookbatGoal = (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject258 || (_templateObject258 = mustard_service_taggedTemplateLiteral(["St. Sneaky Pete's Whey"])))) + (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject259 || (_templateObject259 = mustard_service_taggedTemplateLiteral(["Yeast of Boris"])))) + (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject260 || (_templateObject260 = mustard_service_taggedTemplateLiteral(["Vegetable of Jarlsberg"]))));
  var camelgoal = property_get("_gingerbreadMobHitUsed") && have($effect(_templateObject261 || (_templateObject261 = mustard_service_taggedTemplateLiteral(["Spit Upon"]))));
  while (cookbatGoal < 15 && !camelgoal) {
    var freeFights = freekillConsult();
    (0,external_kolmafia_namespaceObject.writeCcs)(freeFights, "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    preVenture();
    (0,external_kolmafia_namespaceObject.adv1)(scalerZone, -1, freeFights);
    (0,external_kolmafia_namespaceObject.setCcs)("default");
    cookbatGoal = (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject262 || (_templateObject262 = mustard_service_taggedTemplateLiteral(["St. Sneaky Pete's Whey"])))) + (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject263 || (_templateObject263 = mustard_service_taggedTemplateLiteral(["Yeast of Boris"])))) + (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject264 || (_templateObject264 = mustard_service_taggedTemplateLiteral(["Vegetable of Jarlsberg"]))));
    camelgoal = property_get("_gingerbreadMobHitUsed") && have($effect(_templateObject265 || (_templateObject265 = mustard_service_taggedTemplateLiteral(["Spit Upon"]))));
  }
  if (famRoute === template_string_$familiar(_templateObject266 || (_templateObject266 = mustard_service_taggedTemplateLiteral(["Cookbookbat"])))) {
    if (!have($effect(_templateObject267 || (_templateObject267 = mustard_service_taggedTemplateLiteral(["Inspired Chef"]))))) {
      (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject268 || (_templateObject268 = mustard_service_taggedTemplateLiteral(["Boris's bread"]))));
      (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject269 || (_templateObject269 = mustard_service_taggedTemplateLiteral(["Boris's bread"]))));
    }
    if (!have($effect(_templateObject270 || (_templateObject270 = mustard_service_taggedTemplateLiteral(["Pretty Delicious"]))))) {
      (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject271 || (_templateObject271 = mustard_service_taggedTemplateLiteral(["baked veggie ricotta casserole"]))));
      (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject272 || (_templateObject272 = mustard_service_taggedTemplateLiteral(["baked veggie ricotta casserole"]))));
    }
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("fold wad of used tape");
  if (property_get("lastTrainsetConfiguration") === 0) {
    setConfiguration([Station.COAL_HOPPER, Station.GAIN_MEAT, Station.TOWER_FIZZY, Station.CANDY_FACTORY, Station.ORE_HOPPER, Station.GRAIN_SILO, Station.VIEWING_PLATFORM, Station.TRACKSIDE_DINER]);
  }
  if (Clan.get().name !== "Bonus Adventures from Hell") {
    Clan.join("Bonus Adventures from Hell");
  }
  (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php?action=hottub");
  nextTest();
}
function musTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: Muscle");
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Feed The Children")) {
    (0,external_kolmafia_namespaceObject.maximize)("mus", false);
    if (!have($effect(_templateObject273 || (_templateObject273 = mustard_service_taggedTemplateLiteral(["Quiet Determination"]))))) {
      (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject274 || (_templateObject274 = mustard_service_taggedTemplateLiteral(["Quiet Determination"]))));
    }
    printModtrace("muscle");
    printModtrace("muscle percent");
    var musTurnsave = CommunityService.Muscle.prediction;
    (0,external_kolmafia_namespaceObject.print)("MUS TEST: Expecting: ".concat(musTurnsave, " "), "blue");
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=2&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(musTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("MUS TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()), "blue");
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function mysTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: Mysticality");
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Build Playground Mazes")) {
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject275 || (_templateObject275 = mustard_service_taggedTemplateLiteral(["Quiet Judgement"]))));
    (0,external_kolmafia_namespaceObject.maximize)("mys", false);
    printModtrace("mysticality");
    printModtrace("mysticality percent");
    var mysTurnsave = CommunityService.Mysticality.prediction;
    (0,external_kolmafia_namespaceObject.print)("MYS TEST: Expecting: ".concat(mysTurnsave, " "), "blue");
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=3&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(mysTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("MYS TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()), "blue");
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function moxTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: Moxie");
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Feed Conspirators")) {
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject276 || (_templateObject276 = mustard_service_taggedTemplateLiteral(["Quiet Desperation"]))));
    (0,external_kolmafia_namespaceObject.maximize)("mox", false);
    printModtrace("moxie");
    printModtrace("moxie percent");
    var moxTurnsave = CommunityService.Moxie.prediction;
    (0,external_kolmafia_namespaceObject.print)("MOX TEST: Expecting: ".concat(moxTurnsave, " "), "blue");
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=4&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(moxTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("MOX TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()), "blue");
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function hpTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: HP");
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Donate Blood")) {
    (0,external_kolmafia_namespaceObject.maximize)("hp", false);
    printModtrace("Maximum HP");
    printModtrace("Maximum HP percent");
    var hpTurnsave = CommunityService.HP.prediction;
    (0,external_kolmafia_namespaceObject.print)("HP TEST: Expecting: ".concat(hpTurnsave, " "), "blue");
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=1&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(hpTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("HP TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()), "blue");
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function famwtTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: famwt");
  (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject277 || (_templateObject277 = mustard_service_taggedTemplateLiteral(["Mini-Trainbot"]))));
  if ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject278 || (_templateObject278 = mustard_service_taggedTemplateLiteral(["box of Familiar Jacks"])))) === 1) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject279 || (_templateObject279 = mustard_service_taggedTemplateLiteral(["box of Familiar Jacks"]))));
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject280 || (_templateObject280 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(_templateObject281 || (_templateObject281 = mustard_service_taggedTemplateLiteral(["overloaded Yule battery"]))));
  }
  for (var _i6 = 0, _arr3 = ["Empathy", "Leash of Linguini", "Blood Bond"]; _i6 < _arr3.length; _i6++) {
    var eff = _arr3[_i6];
    if ((0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get(eff)) === 0) {
      (0,external_kolmafia_namespaceObject.useSkill)(1, (0,external_kolmafia_namespaceObject.toSkill)(external_kolmafia_namespaceObject.Effect.get(eff)));
    }
  }
  if ((0,external_kolmafia_namespaceObject.getProperty)("_witchessBuff") === "false") {
    (0,external_kolmafia_namespaceObject.cliExecute)("witchess");
  }
  if ((0,external_kolmafia_namespaceObject.haveEffect)($effect(_templateObject282 || (_templateObject282 = mustard_service_taggedTemplateLiteral(["Billiards Belligerence"])))) === 0) {
    (0,external_kolmafia_namespaceObject.cliExecute)("pool 1");
  }
  (0,external_kolmafia_namespaceObject.maximize)("familiar weight", false);
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Breed More Collies")) {
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    var famwtTurnsave = CommunityService.FamiliarWeight.prediction;
    printModtrace("familiar weight");
    (0,external_kolmafia_namespaceObject.print)("FAMWT TEST: Expecting: ".concat(famwtTurnsave), "blue");
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=5&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(famwtTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("FAMWT TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()), "blue");
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}

/*
get shadow waters
swap fam disgeist
maximize nc (squeaky toy rose, shady shades)
TEST: noncom
*/

function noncomTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: noncom");
  if (!have($effect(_templateObject283 || (_templateObject283 = mustard_service_taggedTemplateLiteral(["Shadow Waters"]))))) {
    (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1500", "2"); //shadow waters
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject284 || (_templateObject284 = mustard_service_taggedTemplateLiteral(["Shadow Rift"]))), -1, "abort;");
  }
  (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject285 || (_templateObject285 = mustard_service_taggedTemplateLiteral(["Disgeist"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("umbrella nc");
  (0,external_kolmafia_namespaceObject.cliExecute)("parka pterodactyl");
  for (var _i7 = 0, _arr4 = ["squeaky rose", "shady shades"]; _i7 < _arr4.length; _i7++) {
    var item = _arr4[_i7];
    if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get(item)) > 0) {
      (0,external_kolmafia_namespaceObject.use)(1, external_kolmafia_namespaceObject.Item.get(item));
    }
  }
  if (!have($effect(_templateObject286 || (_templateObject286 = mustard_service_taggedTemplateLiteral(["Silent Running"]))))) {
    (0,external_kolmafia_namespaceObject.cliExecute)("swim noncombat");
  }
  for (var _i8 = 0, _arr5 = ["The Sonata of Sneakiness", "Smooth Movement", "Feel Lonely"]; _i8 < _arr5.length; _i8++) {
    var skill = _arr5[_i8];
    (0,external_kolmafia_namespaceObject.useSkill)(1, external_kolmafia_namespaceObject.Skill.get(skill));
  }
  (0,external_kolmafia_namespaceObject.maximize)("-60 combat rate 13 familiar weight -tie", false);
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject287 || (_templateObject287 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(_templateObject288 || (_templateObject288 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject289 || (_templateObject289 = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(_templateObject290 || (_templateObject290 = mustard_service_taggedTemplateLiteral(["unbreakable umbrella"]))));
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Be a Living Statue")) {
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    var ncTurnsave = CommunityService.Noncombat.prediction;
    (0,external_kolmafia_namespaceObject.print)("Recorded Combat Rate at ".concat((0,external_kolmafia_namespaceObject.numericModifier)("Combat Rate")));
    printModtrace("Combat Rate");
    (0,external_kolmafia_namespaceObject.print)("NC TEST: Expecting ".concat(ncTurnsave), "blue");
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=8&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(ncTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("NC TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()), "blue");
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function itemTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: Item");
  if ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject291 || (_templateObject291 = mustard_service_taggedTemplateLiteral(["cyclops eyedrops"])))) < 1 && (0,external_kolmafia_namespaceObject.haveEffect)($effect(_templateObject292 || (_templateObject292 = mustard_service_taggedTemplateLiteral(["One Very Clear Eye"])))) === 0) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject293 || (_templateObject293 = mustard_service_taggedTemplateLiteral(["11-leaf clover"]))));
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject294 || (_templateObject294 = mustard_service_taggedTemplateLiteral(["11-leaf clover"]))));
    (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject295 || (_templateObject295 = mustard_service_taggedTemplateLiteral(["The Limerick Dungeon"]))), -1, "abort;");
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject296 || (_templateObject296 = mustard_service_taggedTemplateLiteral(["cyclops eyedrops"]))));
  }
  if (!have($effect(_templateObject297 || (_templateObject297 = mustard_service_taggedTemplateLiteral(["Feeling Lost"]))))) {
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject298 || (_templateObject298 = mustard_service_taggedTemplateLiteral(["Feel Lost"]))));
  }
  if ((0,external_kolmafia_namespaceObject.getProperty)("_deckCardsDrawn") === "0") {
    cheatCard("X - The Wheel of Fortune");
  }
  if ((0,external_kolmafia_namespaceObject.haveEffect)($effect(_templateObject299 || (_templateObject299 = mustard_service_taggedTemplateLiteral(["Infernal Thirst"])))) === 0) {
    wishFor($effect(_templateObject300 || (_templateObject300 = mustard_service_taggedTemplateLiteral(["Infernal Thirst"]))));
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("umbrella item");
  (0,external_kolmafia_namespaceObject.cliExecute)("fold wad of used tape");
  (0,external_kolmafia_namespaceObject.maximize)("Item Drop, -equip broken champagne bottle", false);
  (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject301 || (_templateObject301 = mustard_service_taggedTemplateLiteral(["autumn leaf"]))));
  (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject302 || (_templateObject302 = mustard_service_taggedTemplateLiteral(["bag of grain"]))));
  for (var _i9 = 0, _arr6 = [$effect(_templateObject303 || (_templateObject303 = mustard_service_taggedTemplateLiteral(["Fat Leon's Phat Loot Lyric"]))), $effect(_templateObject304 || (_templateObject304 = mustard_service_taggedTemplateLiteral(["Singer's Faithful Ocelot"]))), $effect(_templateObject305 || (_templateObject305 = mustard_service_taggedTemplateLiteral(["Steely-Eyed Squint"]))), $effect(_templateObject306 || (_templateObject306 = mustard_service_taggedTemplateLiteral(["Spice Haze"])))]; _i9 < _arr6.length; _i9++) {
    var eff = _arr6[_i9];
    ensureEffect(eff);
  }
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Make Margaritas")) {
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    var itemTurnsave = CommunityService.BoozeDrop.prediction;
    printModtrace("item drop");
    printModtrace("booze drop");
    (0,external_kolmafia_namespaceObject.print)("ITEM TEST: Expecting ".concat(itemTurnsave), "blue");
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=9&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(itemTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("ITEM TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()), "blue");
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function hotresTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: hotres");
  (0,external_kolmafia_namespaceObject.useFamiliar)(template_string_$familiar(_templateObject307 || (_templateObject307 = mustard_service_taggedTemplateLiteral(["Exotic Parrot"]))));
  if (!have($effect(_templateObject308 || (_templateObject308 = mustard_service_taggedTemplateLiteral(["Fireproof Foam Suit"])))) && property_get("_fireExtinguisherCharge") > 0) {
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject309 || (_templateObject309 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject310 || (_templateObject310 = mustard_service_taggedTemplateLiteral(["Fourth of May Cosplay Saber"]))));
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject311 || (_templateObject311 = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(_templateObject312 || (_templateObject312 = mustard_service_taggedTemplateLiteral(["industrial fire extinguisher"]))));
    var fireProof = "if hasskill 7388; skill 7388; endif; if hasskill 7311; skill 7311; endif; abort;";
    (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1387", "3");
    (0,external_kolmafia_namespaceObject.writeCcs)(fireProof, "mustardservice");
    (0,external_kolmafia_namespaceObject.setCcs)("mustardservice");
    (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1387", "3");
    reminisce($monster(_templateObject313 || (_templateObject313 = mustard_service_taggedTemplateLiteral(["ungulith"]))));
    (0,external_kolmafia_namespaceObject.setCcs)("default");
    if (!have($effect(_templateObject314 || (_templateObject314 = mustard_service_taggedTemplateLiteral(["Fireproof Foam Suit"]))))) {
      (0,external_kolmafia_namespaceObject.abort)("Failed to gain foam suit :(");
    }
  }
  (0,external_kolmafia_namespaceObject.maximize)("hot res", false);
  for (var _i10 = 0, _arr7 = ["Elemental Saucesphere", "Feel Peaceful", "Astral Shell", "Blood Bond", "Empathy of the Newt", "Leash of Linguini"]; _i10 < _arr7.length; _i10++) {
    var skill = _arr7[_i10];
    if ((0,external_kolmafia_namespaceObject.haveEffect)((0,external_kolmafia_namespaceObject.toEffect)(external_kolmafia_namespaceObject.Skill.get(skill))) === 0) {
      (0,external_kolmafia_namespaceObject.useSkill)(1, external_kolmafia_namespaceObject.Skill.get(skill));
    }
  }
  (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject315 || (_templateObject315 = mustard_service_taggedTemplateLiteral(["familiar"]))), template_string_$item(_templateObject316 || (_templateObject316 = mustard_service_taggedTemplateLiteral(["tiny stillsuit"]))));
  if ((0,external_kolmafia_namespaceObject.numericModifier)("hot resistance") < 59) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject317 || (_templateObject317 = mustard_service_taggedTemplateLiteral(["pocket maze"]))));
  }
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Clean Steam Tunnels")) {
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    var hotresTurnsave = CommunityService.HotRes.prediction;
    printModtrace("hot resistance");
    (0,external_kolmafia_namespaceObject.print)("HOTRES TEST: Expecting ".concat(hotresTurnsave));
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=10&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(hotresTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("HOTRES TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(hotresTurnsave, "]"));
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function wdmgTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: wdmg");
  preVenture();
  if ((0,external_kolmafia_namespaceObject.haveEffect)($effect(_templateObject318 || (_templateObject318 = mustard_service_taggedTemplateLiteral(["Billiards Belligerence"])))) === 0) {
    if (Clan.get().name !== "Bonus Adventures from Hell") {
      Clan.join("Bonus Adventures from Hell");
    }
    (0,external_kolmafia_namespaceObject.cliExecute)("pool 1");
  }
  while ((0,external_kolmafia_namespaceObject.haveEffect)($effect(_templateObject319 || (_templateObject319 = mustard_service_taggedTemplateLiteral(["Inner Elf"])))) === 0 && (0,external_kolmafia_namespaceObject.getProperty)("_snokebombUsed") !== "3") {
    preVenture();
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject320 || (_templateObject320 = mustard_service_taggedTemplateLiteral(["weapon"]))), external_kolmafia_namespaceObject.Item.none);
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject321 || (_templateObject321 = mustard_service_taggedTemplateLiteral(["off-hand"]))), external_kolmafia_namespaceObject.Item.none);
    motherSlime();
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject322 || (_templateObject322 = mustard_service_taggedTemplateLiteral(["weapon"]))), template_string_$item(_templateObject323 || (_templateObject323 = mustard_service_taggedTemplateLiteral(["ebony epee"]))));
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject324 || (_templateObject324 = mustard_service_taggedTemplateLiteral(["off-hand"]))), template_string_$item(_templateObject325 || (_templateObject325 = mustard_service_taggedTemplateLiteral(["Stick-Knife of Loathing"]))));
  }
  fallGuy();

  //attempt deep dark visions of course :slightsmile: must be done before cowrruption, must last until spelltest
  deepDarkVisions();
  var _iterator4 = mustard_service_createForOfIteratorHelper(template_string_$items(_templateObject335 || (_templateObject335 = mustard_service_taggedTemplateLiteral(["Punching Potion, potion of potency, corrupted marrow, imported taffy, red eye"])))),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var item = _step4.value;
      if (have(item)) {
        (0,external_kolmafia_namespaceObject.use)(1, item);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  if ((0,external_kolmafia_namespaceObject.haveEffect)($effect(_templateObject326 || (_templateObject326 = mustard_service_taggedTemplateLiteral(["Weapon of Mass Destruction"])))) === 0) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject327 || (_templateObject327 = mustard_service_taggedTemplateLiteral(["goofily-plumed helmet"]))));
    (0,external_kolmafia_namespaceObject.cliExecute)("hatter goofily-plumed helmet");
  }
  var effs = [$effect(_templateObject328 || (_templateObject328 = mustard_service_taggedTemplateLiteral(["Bow-Legged Swagger"]))), $effect(_templateObject329 || (_templateObject329 = mustard_service_taggedTemplateLiteral(["Scowl of the Auk"]))), $effect(_templateObject330 || (_templateObject330 = mustard_service_taggedTemplateLiteral(["Rage of the Reindeer"]))), $effect(_templateObject331 || (_templateObject331 = mustard_service_taggedTemplateLiteral(["Song of the North"]))), $effect(_templateObject332 || (_templateObject332 = mustard_service_taggedTemplateLiteral(["Carol of the Bulls"]))), $effect(_templateObject333 || (_templateObject333 = mustard_service_taggedTemplateLiteral(["Tenacity of the Snapper"]))), $effect(_templateObject334 || (_templateObject334 = mustard_service_taggedTemplateLiteral(["Jackasses' Symphony of Destruction"])))];
  for (var _i11 = 0, _effs2 = effs; _i11 < _effs2.length; _i11++) {
    var e = _effs2[_i11];
    ensureEffect(e);
  }
  if ((0,external_kolmafia_namespaceObject.getProperty)("_barrelPrayer") === "false") {
    (0,external_kolmafia_namespaceObject.visitUrl)("da.php?barrelshrine=1");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1100&option=4");
  }
  (0,external_kolmafia_namespaceObject.maximize)("weapon dmg", false);
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Reduce Gazelle Population")) {
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    var wdmgTurnsave = CommunityService.WeaponDamage.prediction;
    printModtrace("weapon damage");
    printModtrace("weapon damage percent");
    (0,external_kolmafia_namespaceObject.print)("WDMG TEST: Expecting ".concat(wdmgTurnsave));
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=6&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(wdmgTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("WDMG TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()));
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function sdmgTest() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "TEST: sdmg");
  preVenture();
  var effs = [$effect(_templateObject336 || (_templateObject336 = mustard_service_taggedTemplateLiteral(["Simmering"]))), $effect(_templateObject337 || (_templateObject337 = mustard_service_taggedTemplateLiteral(["Song of Sauce"]))), $effect(_templateObject338 || (_templateObject338 = mustard_service_taggedTemplateLiteral(["Carol of the Hells"]))), $effect(_templateObject339 || (_templateObject339 = mustard_service_taggedTemplateLiteral(["Jackasses' Symphony of Destruction"])))];
  for (var _i12 = 0, _effs3 = effs; _i12 < _effs3.length; _i12++) {
    var e = _effs3[_i12];
    ensureEffect(e);
  }
  if (!have(template_string_$item(_templateObject340 || (_templateObject340 = mustard_service_taggedTemplateLiteral(["obsidian nutcracker"]))))) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject341 || (_templateObject341 = mustard_service_taggedTemplateLiteral(["obsidian nutcracker"]))));
  }
  if (have(template_string_$item(_templateObject342 || (_templateObject342 = mustard_service_taggedTemplateLiteral(["tobiko marble soda"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(_templateObject343 || (_templateObject343 = mustard_service_taggedTemplateLiteral(["tobiko marble soda"]))));
  }
  while (!have($effect(_templateObject344 || (_templateObject344 = mustard_service_taggedTemplateLiteral(["Inner Elf"])))) && (0,external_kolmafia_namespaceObject.getProperty)("_snokebombUsed") !== "3") {
    preVenture();
    motherSlime();
  }
  if (!have($effect(_templateObject345 || (_templateObject345 = mustard_service_taggedTemplateLiteral(["Mental A-cue-ity"]))))) {
    if (Clan.get().name !== "Bonus Adventures from Hell") {
      Clan.join("Bonus Adventures from Hell");
    }
    (0,external_kolmafia_namespaceObject.cliExecute)("pool 2");
  }
  (0,external_kolmafia_namespaceObject.maximize)("spell damage", false);
  if (!(0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").includes("Make Sausage")) {
    var testTurns = (0,external_kolmafia_namespaceObject.myAdventures)();
    var sdmgTurnsave = CommunityService.SpellDamage.prediction;
    printModtrace("spell damage");
    printModtrace("spell damage percent");
    (0,external_kolmafia_namespaceObject.print)("SDMG TEST: Expected ".concat(sdmgTurnsave));
    (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=7&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceTests", "".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests"), ",").concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)(), " [Expected: ").concat(sdmgTurnsave, "]"));
    (0,external_kolmafia_namespaceObject.print)("SDMG TEST: Took ".concat(testTurns - (0,external_kolmafia_namespaceObject.myAdventures)()));
  } else {
    (0,external_kolmafia_namespaceObject.abort)("uh oh!");
  }
  nextTest();
}
function finale() {
  (0,external_kolmafia_namespaceObject.setProperty)("_mustardServiceStage", "Finale");
  var currentTime = (0,external_kolmafia_namespaceObject.nowToInt)();
  (0,external_kolmafia_namespaceObject.print)("".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests")));
  setSong("Food Vibrations");
  (0,external_kolmafia_namespaceObject.visitUrl)("council.php");
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1089&option=30&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
  var testString = (0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").replace("Feed The Children", "Muscle: ").replace("Build Playground Mazes", "Mysticality: ").replace("Feed Conspirators", "Moxie: ").replace("Donate Blood", "HP: ").replace("Reduce Gazelle Population", "Weapon Damage: ").replace("Make Sausage", "Spell Damage: ").replace("Breed More Collies", "Familiar Weight: ").replace("Be a Living Statue", "Noncombat: ").replace("Make Margaritas", "Item and Booze Drop: ").replace("Clean Steam Tunnels", "Hot Resistance: ");
  (0,external_kolmafia_namespaceObject.print)("(none): [".concat((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests").split(",")[0], "]"), "blue");
  for (var i = 1; i <= 10; i++) {
    var testName = testString.split(",")[i];
    var testDetails = (0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTests").split(",")[i];
    (0,external_kolmafia_namespaceObject.print)("".concat(testName, "[").concat(testDetails, "]"));
  }
  (0,external_kolmafia_namespaceObject.print)("Took: ".concat(Math.floor((currentTime - Number((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTime"))) / 60000), " Minute(s), ").concat(Math.floor((currentTime - Number((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceTime"))) % 60000 / 1000), " Second(s)"), "green");
  (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?action=pullall&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
  if (have($effect(_templateObject346 || (_templateObject346 = mustard_service_taggedTemplateLiteral(["Feeling Lost"]))))) {
    uneffect($effect(_templateObject347 || (_templateObject347 = mustard_service_taggedTemplateLiteral(["Feeling Lost"]))));
  }
  if (yachtzeeChaining) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject348 || (_templateObject348 = mustard_service_taggedTemplateLiteral(["Deep Dish of Legend"]))));
    (0,external_kolmafia_namespaceObject.eat)(1, template_string_$item(_templateObject349 || (_templateObject349 = mustard_service_taggedTemplateLiteral(["Deep Dish of Legend"]))));
    (0,external_kolmafia_namespaceObject.useSkill)(1, template_string_$skill(_templateObject350 || (_templateObject350 = mustard_service_taggedTemplateLiteral(["The Ode to Booze"]))));
    (0,external_kolmafia_namespaceObject.drink)((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject351 || (_templateObject351 = mustard_service_taggedTemplateLiteral(["astral pilsner"])))), template_string_$item(_templateObject352 || (_templateObject352 = mustard_service_taggedTemplateLiteral(["astral pilsner"]))));
  }
  var mpSpendy = [$effect(_templateObject353 || (_templateObject353 = mustard_service_taggedTemplateLiteral(["Empathy"]))), $effect(_templateObject354 || (_templateObject354 = mustard_service_taggedTemplateLiteral(["Leash of Linguini"]))), $effect(_templateObject355 || (_templateObject355 = mustard_service_taggedTemplateLiteral(["Fat Leon's Phat Loot Lyric"]))), $effect(_templateObject356 || (_templateObject356 = mustard_service_taggedTemplateLiteral(["Singer's Faithful Ocelot"]))), $effect(_templateObject357 || (_templateObject357 = mustard_service_taggedTemplateLiteral(["Disco Leer"]))), $effect(_templateObject358 || (_templateObject358 = mustard_service_taggedTemplateLiteral(["Polka of Plenty"]))), $effect(_templateObject359 || (_templateObject359 = mustard_service_taggedTemplateLiteral(["Big"]))), $effect(_templateObject360 || (_templateObject360 = mustard_service_taggedTemplateLiteral(["Carol of the Bulls"]))), $effect(_templateObject361 || (_templateObject361 = mustard_service_taggedTemplateLiteral(["Carol of the Hells"]))), $effect(_templateObject362 || (_templateObject362 = mustard_service_taggedTemplateLiteral(["Carol of the Thrills"])))];
  for (var _i13 = 0, _mpSpendy = mpSpendy; _i13 < _mpSpendy.length; _i13++) {
    var eff = _mpSpendy[_i13];
    while ((0,external_kolmafia_namespaceObject.haveEffect)(eff) < 100) {
      ensureEffect(eff, 100);
    }
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("gwa prismbreak");
  (0,external_kolmafia_namespaceObject.cliExecute)("gwa breakfast");
}
function reEnter(stage) {
  var _stageMap;
  (0,external_kolmafia_namespaceObject.print)("Attempting Re-entry");
  var stageMap = (_stageMap = {}, mustard_service_defineProperty(_stageMap, "Set-up and Preparation", () => setup()), mustard_service_defineProperty(_stageMap, "Skeletons to Coil Wire", () => skeletons()), mustard_service_defineProperty(_stageMap, "Levelling Preparation", () => levellingPrep()), mustard_service_defineProperty(_stageMap, "Levelling: Payphone", () => payphoneFights()), mustard_service_defineProperty(_stageMap, "Levelling: Snojo", () => snojoFights()), mustard_service_defineProperty(_stageMap, "Levelling: Oliver's", () => oliverFights()), mustard_service_defineProperty(_stageMap, "Levelling: Seals", () => sealFights()), mustard_service_defineProperty(_stageMap, "Levelling: Witchess", () => witchessFights()), mustard_service_defineProperty(_stageMap, "Levelling: Backups", () => backupFights()), mustard_service_defineProperty(_stageMap, "Levelling: DMT", () => deepMachineFights()), mustard_service_defineProperty(_stageMap, "Levelling: NEP", () => neverendingFreefights()), mustard_service_defineProperty(_stageMap, "Levelling: Freekills", () => freekillBonanza()), mustard_service_defineProperty(_stageMap, "TEST: famwt", () => famwtTest()), mustard_service_defineProperty(_stageMap, "TEST: noncom", () => noncomTest()), mustard_service_defineProperty(_stageMap, "TEST: Item", () => itemTest()), mustard_service_defineProperty(_stageMap, "TEST: hotres", () => hotresTest()), mustard_service_defineProperty(_stageMap, "TEST: wdmg", () => wdmgTest()), mustard_service_defineProperty(_stageMap, "TEST: sdmg", () => sdmgTest()), mustard_service_defineProperty(_stageMap, "TEST: HP", () => hpTest()), mustard_service_defineProperty(_stageMap, "TEST: Muscle", () => musTest()), mustard_service_defineProperty(_stageMap, "TEST: Mysticality", () => mysTest()), mustard_service_defineProperty(_stageMap, "TEST: Moxie", () => moxTest()), mustard_service_defineProperty(_stageMap, "Finale", () => finale()), _stageMap);
  stageMap[stage]();
}
function nextLevelling() {
  var _levelOrder;
  var levelOrder = (_levelOrder = {}, mustard_service_defineProperty(_levelOrder, "Set-up and Preparation", () => skeletons()), mustard_service_defineProperty(_levelOrder, "Skeletons to Coil Wire", () => levellingPrep()), mustard_service_defineProperty(_levelOrder, "Levelling Preparation", () => oliverFights()), mustard_service_defineProperty(_levelOrder, "Levelling: Payphone", () => snojoFights()), mustard_service_defineProperty(_levelOrder, "Levelling: Snojo", () => witchessFights()), mustard_service_defineProperty(_levelOrder, "Levelling: Oliver's", () => sealFights()), mustard_service_defineProperty(_levelOrder, "Levelling: Seals", () => payphoneFights()), mustard_service_defineProperty(_levelOrder, "Levelling: Witchess", () => deepMachineFights()), mustard_service_defineProperty(_levelOrder, "Levelling: Backups", () => backupFights()), mustard_service_defineProperty(_levelOrder, "Levelling: DMT", () => neverendingFreefights()), mustard_service_defineProperty(_levelOrder, "Levelling: NEP", () => freekillBonanza()), _levelOrder);
  var curStage = (0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceStage");
  levelOrder[curStage]();
}
function nextTest() {
  var testNumber = (0,external_kolmafia_namespaceObject.getProperty)("csServicesPerformed").split(",").length;
  var testOrder = {
    1: () => musTest(),
    2: () => mysTest(),
    3: () => moxTest(),
    4: () => hotresTest(),
    5: () => wdmgTest(),
    6: () => sdmgTest(),
    7: () => hpTest(),
    8: () => famwtTest(),
    9: () => noncomTest(),
    10: () => itemTest(),
    11: () => finale()
  };
  testOrder[testNumber]();
}
function mustard_service_main() {
  if ((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceStage") === "") {
    (0,external_kolmafia_namespaceObject.print)("Fresh Run");
    preRun();
  } else {
    reEnter((0,external_kolmafia_namespaceObject.getProperty)("_mustardServiceStage"));
  }
}
var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;